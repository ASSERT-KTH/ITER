bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  r  =  x  *  FastMath.sin(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  x  *  FastMath.sin(nextGaussian);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  x  *  FastMath.sin(nextGaussian);	  r    =    x    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	24	None	replace
2	[BUG]  [BUGGY]  r  =  x  *  FastMath.sin(y);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  x  *  FastMath.sin(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  x  *  FastMath.sin(y);	  r    =    x    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	24	None	replace
3	[BUG]  [BUGGY]  r  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  r  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  r  *  FastMath.sin(alpha);	  r    =    random    *    FastMath.sin(y);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	26	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    random    *    FastMath.sin(x);    nextGaussian  =  random  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	3	3	add
5	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(x);    nextGaussian  =  random  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	3	3	add
6	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  random  =  random  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  random  =  random  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(x);    random  =  random  *  FastMath.sin(x);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	3	None	add
7	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(x);    r  =  random  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	3	None	add
8	[BUG]  [BUGGY]  r  =  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  FastMath.sin(alpha);	  r    =    FastMath.sin(nextGaussian);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	22	None	replace
9	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  x  *  FastMath.sin(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  x  *  FastMath.sin(y);	  random    =    x    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	2	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	6	3	add
11	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	6	3	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	6	3	add
13	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	6	3	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.cos(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.cos(r);	  	compilable	  [FE]  AssertionError  	6	3	add
15	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.cos(r);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.cos(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  nextGaussian  =  random  *  FastMath.cos(r);	  	compilable	  [FE]  AssertionError  	6	3	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    r    *    FastMath.sin(random);    nextGaussian  =  r  *  FastMath.sin(random);	  	compilable	  [FE]  AssertionError  	20	3	add
17	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  nextGaussian  =  r  *  FastMath.sin(random);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(random);    nextGaussian  =  r  *  FastMath.sin(random);	  	compilable	  [FE]  AssertionError  	20	3	add
18	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  r  =  r  *  FastMath.sin(random);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  r  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(random);    r  =  r  *  FastMath.sin(random);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	20	None	add
19	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  random  =  r  *  FastMath.sin(random);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  random  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(random);    random  =  r  *  FastMath.sin(random);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	20	None	add
20	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        double    nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()	27	None	add
21	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        double    nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()	27	None	add
22	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.cos(alpha);  [CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        double    nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.cos(alpha);	  	non-compiled	[CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()	27	None	add
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian    =    random    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	11	6	replace
24	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  random  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian    =    random    *    FastMath.sin(alpha);    	compilable	  [FE]  AssertionError  	11	6	replace
25	[BUG]  [BUGGY]  random  =  x  *  FastMath.sin(r,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  x  *  FastMath.sin(r,  alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  x  *  FastMath.sin(r,  alpha);	  random    =    r    *    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
26	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  y,  alpha);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  r  *  FastMath.sin(x,  y,  alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  r  *  FastMath.sin(x,  y,  alpha);	  random    =    r    *    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
27	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    r    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	replace
28	[BUG]  [BUGGY]  r  =  random  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]              AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    r    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    x    *    FastMath.sin(r);    nextGaussian  =  x  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	29	3	add
30	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  nextGaussian  =  x  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(r);    nextGaussian  =  x  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	29	3	add
31	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  x  =  x  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  x  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(r);    x  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	29	None	add
32	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  r  =  x  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  r  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(r);    r  =  x  *  FastMath.sin(r);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	29	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	10	3	add
34	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	10	3	add
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	10	3	add
36	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	10	3	add
37	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  random  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  random  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    random  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	10	None	add
38	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  random  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    random    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	12	None	replace
39	[BUG]  [BUGGY]  random  =  random  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    random    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	replace
40	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  r  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  r  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    random    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	16	3	add
42	[BUG]  [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	16	3	add
43	[BUG]  [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  r  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    r  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	16	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	16	3	add
45	[BUG]  [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	16	3	add
46	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  random  =  r  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  random  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  r  *  FastMath.sin(y);  random  =  r  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    random    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	19	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    x    *    FastMath.sin(alpha);    nextGaussian  =  x  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
48	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  nextGaussian  =  x  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(alpha);    nextGaussian  =  x  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	3	add
49	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  x  =  x  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  x  =  x  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(alpha);    x  =  x  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	14	None	add
50	[BUG]  [BUGGY]  r  =  r  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  r  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	18	None	replace
51	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(x);  r  =  random  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    r    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	13	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  x  *  FastMath.sin(random);	  nextGaussian    =    random    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	4	6	replace
53	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(random);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  x  *  FastMath.sin(random);	  nextGaussian    =    random    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	4	6	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  double  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    x    *    FastMath.sin(r);    double  nextGaussian  =  x  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	29	6	add
55	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  double  nextGaussian  =  x  *  FastMath.sin(r);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  double  nextGaussian  =  x  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(r);    double  nextGaussian  =  x  *  FastMath.sin(r);	  	compilable	  [FE]  AssertionError  	29	6	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  double  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    x    *    FastMath.sin(alpha);    double  nextGaussian  =  x  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	6	add
57	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  double  nextGaussian  =  x  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  double  nextGaussian  =  x  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    x    *    FastMath.sin(alpha);    double  nextGaussian  =  x  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	14	6	add
58	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  r  =  y  *  FastMath.sin(x);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(r);  r  =  y  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  x  *  FastMath.sin(r);  r  =  y  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    r    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	18	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  double  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    r    *    FastMath.sin(random);    double  nextGaussian  =  r  *  FastMath.sin(random);	  	compilable	  [FE]  AssertionError  	20	3	add
60	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  double  nextGaussian  =  r  *  FastMath.sin(random);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  double  nextGaussian  =  r  *  FastMath.sin(random);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    r    *    FastMath.sin(random);    double  nextGaussian  =  r  *  FastMath.sin(random);	  	compilable	  [FE]  AssertionError  	20	3	add
61	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  random  =  random  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(r);    nextGaussian  =  random  *  FastMath.sin(r);  random  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(r);        nextGaussian    =    random    *    FastMath.sin(r);    random  =  random  *  FastMath.sin(r);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	6	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(y);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(y);	  	compilable	  [FE]  AssertionError  	16	3	add
63	[BUG]  [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(y);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(y);	  	compilable	  [FE]  AssertionError  	16	3	add
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  double  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian    =    random    *    FastMath.sin(x);    double  nextGaussian  =  random  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	3	6	add
65	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  double  nextGaussian  =  random  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  double  nextGaussian  =  random  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian    =    random    *    FastMath.sin(x);    double  nextGaussian  =  random  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	3	6	add
66	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  r  =  random  *  FastMath.sin(r);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  r  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(y);  r  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    r    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	9	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	10	6	add
68	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	10	6	add
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	10	3	add
70	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        nextGaussian    =    random    *    FastMath.sin(alpha);    nextGaussian  =  random  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	10	3	add
71	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  r  =  random  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  r  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(y);  r  =  random  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    r    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	13	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  random  *  FastMath.sin(y);	  nextGaussian    =    random    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	4	6	replace
73	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(y);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(y);	  nextGaussian    =    random    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	4	6	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	17	6	replace
75	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  random  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	17	6	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian  =  r  *  FastMath.sin(y);  nextGaussian  =  r  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	17	6	replace
77	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(y);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  r  *  FastMath.sin(y);  nextGaussian  =  r  *  FastMath.sin(x);	  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian    =    r    *    FastMath.sin(x);    	compilable	  [FE]  AssertionError  	17	6	replace
78	[BUG]  [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  random  =  y  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  x  *  FastMath.sin(alpha);  random  =  y  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  x  *  FastMath.sin(alpha);  random  =  y  *  FastMath.sin(alpha);	  nextGaussian    =    random    *    FastMath.sin(alpha);    random    =    random    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	12	None	replace
79	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  r  *  FastMath.sin(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  r  *  FastMath.sin(y);	  random    =    r    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	1	None	replace
80	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  random  =  random  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian  =  r  *  FastMath.sin(random);  random  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian  =  r  *  FastMath.sin(random);  random  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    random    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	replace
81	[BUG]  [BUGGY]  r  =  x  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  r  =  x  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	r  =  x  *  FastMath.sin(alpha);	  r    =    x    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	24	None	replace
82	[BUG]  [BUGGY]  random  =  FastMath.sin(y);  [CE]  variable  random  might  already  have  been  assigned  [FE]                AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  FastMath.sin(y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  FastMath.sin(y);	  r    =    FastMath.sin(y);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	25	None	replace
83	[BUG]  [BUGGY]  random  =  y  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  y  *  FastMath.sin(alpha);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  y  *  FastMath.sin(alpha);	  random    =    y    *    FastMath.sin(x);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	32	None	replace
84	[BUG]  [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.cos(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.sin(alpha);  double  nextGaussian  =  random  *  FastMath.cos(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        random        *        FastMath.sin(alpha);        double    nextGaussian    =    random    *    FastMath.sin(alpha);    double  nextGaussian  =  random  *  FastMath.cos(alpha);  double  nextGaussian  =  random  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  nextGaussian  is  already  defined  in  method  nextGaussian()	27	None	add
85	[BUG]  [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha,  y);  [CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  r  *  FastMath.sin(x,  alpha,  y);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  r  *  FastMath.sin(x,  alpha,  y);	  random    =    r    *    FastMath.sin(x,    alpha);    	non-compiled	[CE]  method  sin  in  class  FastMath  cannot  be  applied  to  given  types;	5	None	replace
86	[BUG]  [BUGGY]  Random  random  =  random  *  FastMath.sin(r);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  Random  random  =  random  *  FastMath.sin(r);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	Random  random  =  random  *  FastMath.sin(r);	  nextGaussian    =    random    *    FastMath.sin(r);    random    =    random    *    FastMath.sin(r);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  random  =  y  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]                  AssertionError      [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  random  =  y  *  FastMath.sin(r);  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	random  =  y  *  FastMath.sin(r);	  random    =    x    *    FastMath.sin(r);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	2	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  double  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    double  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	16	6	add
89	[BUG]  [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  double  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);      [BUGGY]  nextGaussian    =    r    *    FastMath.sin(x);    nextGaussian  =  r  *  FastMath.sin(x);  double  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]      }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	nextGaussian        =        r        *        FastMath.sin(x);        nextGaussian    =    r    *    FastMath.sin(x);    double  nextGaussian  =  r  *  FastMath.sin(x);  nextGaussian  =  r  *  FastMath.sin(x);	  	compilable	  [FE]  AssertionError  	16	6	add
