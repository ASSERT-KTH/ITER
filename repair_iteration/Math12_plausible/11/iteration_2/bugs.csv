bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.cos(alpha);	      nextGaussian    =    r    *    FastMath.cos(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	7	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	8	3	add
3	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.sin(nextGaussian);	  	compilable	  [FE]  AssertionError  	8	3	add
4	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  r  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    r  =  r  *  FastMath.sin(nextGaussian);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	8	None	add
5	[BUG]  [BUGGY]  nextGaussian  =  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  FastMath.sin(nextGaussian);	      	non-compiled	[CE]  variable  random  might  already  have  been  assigned	3	None	replace
6	[BUG]  [BUGGY]  nextGaussian  =  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]              AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  FastMath.sin(x);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  FastMath.sin(x);	      	non-compiled	[CE]  variable  random  might  already  have  been  assigned	3	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	6	3	add
8	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	6	3	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	6	3	add
10	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.cos(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	6	3	add
11	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.cos(alpha);    random  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	6	None	add
12	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(r);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(r);	      nextGaussian    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	9	None	replace
13	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(nextGaussian);	      nextGaussian    =    r    *    FastMath.sin(nextGaussian);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	9	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	4	3	add
15	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.sin(alpha);	  	compilable	  [FE]  AssertionError  	4	3	add
16	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(alpha);  [CE]  cannot  assign  a  value  to  final  variable  r  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  r  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(alpha);    r  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  r	4	None	add
17	[BUG]  [BUGGY]  }  else  if(nextGaussian  ==  Double.PI)  {  [CE]  cannot  find  symbol  PI  [FE]          AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  }  else  if(nextGaussian  ==  Double.PI)  {  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian  ==  Double.PI)  {	  }    else    if(nextGaussian    ==    Double.NaN)    {    	non-compiled	[CE]  cannot  find  symbol  PI	2	None	replace
18	[BUG]  [BUGGY]  }  else  if(nextGaussian  ==  null)  {  [CE]  incomparable  types:  double  and  <null>  [FE]        AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  }  else  if(nextGaussian  ==  null)  {  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian  ==  null)  {	  }    else    if(nextGaussian!=    null)    {    	non-compiled	[CE]  incomparable  types:  double  and  <null>	11	None	replace
19	[BUG]  [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  random  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  random  *  FastMath.sin(alpha);	      nextGaussian    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	replace
20	[BUG]  [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  nextGaussian  =  r  *  FastMath.sin(x);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	nextGaussian  =  r  *  FastMath.sin(x);	      nextGaussian    =    r    *    FastMath.sin(alpha);    	non-compiled	[CE]  variable  random  might  already  have  been  assigned	5	None	replace
21	[BUG]  [BUGGY]  }  else  if(Double.isNaN(x)||  Double.isNaN(nextGaussian))  {  [CE]  cannot  find  symbol  x  [FE]        AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  }  else  if(Double.isNaN(x)||  Double.isNaN(nextGaussian))  {  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(x)||  Double.isNaN(nextGaussian))  {	  }    else    if(Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  cannot  find  symbol  x	10	None	replace
22	[BUG]  [BUGGY]  }  else  if(Double.isNaN(x))  {  [CE]  cannot  find  symbol  x  [FE]          AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  }  else  if(Double.isNaN(x))  {  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(x))  {	  }    else    if(Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  cannot  find  symbol  x	10	None	replace
23	[BUG]  [BUGGY]  double  nextGaussian  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]            AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  double  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  r  *  FastMath.sin(alpha);	      	non-compiled	[CE]  variable  random  might  already  have  been  assigned	3	None	replace
24	[BUG]  [BUGGY]  double  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  double  nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  r  *  FastMath.sin(nextGaussian);	      	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	3	None	replace
25	[BUG]  [BUGGY]  }  else  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]        AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  }  else  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(nextGaussian)||  Double.isNaN(nextGaussian))  {	  }    else    if(Double.isNaN(nextGaussian))    {    	non-compiled	[CE]  variable  random  might  not  have  been  initialized	10	None	replace
26	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(alpha);    random  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	4	None	add
27	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  random  =  r  *  FastMath.sin(nextGaussian);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  random  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    random  =  r  *  FastMath.sin(nextGaussian);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	8	None	add
28	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.sin(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.cos(alpha);  random  =  r  *  FastMath.sin(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.cos(alpha);    random  =  r  *  FastMath.sin(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	6	None	add
29	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(x);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]            AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.sin(x);	      	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	3	None	replace
30	[BUG]  [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(alpha);  [CE]  variable  nextGaussian  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  double  nextGaussian  =  nextGaussian  *  FastMath.sin(alpha);  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	double  nextGaussian  =  nextGaussian  *  FastMath.sin(alpha);	      	non-compiled	[CE]  variable  nextGaussian  might  not  have  been  initialized	3	None	replace
31	[BUG]  [BUGGY]  }  else  if(nextGaussian!=  null  &&  nextGaussian.equals(r))  {  [CE]  incomparable  types:  double  and  <null>  [FE]        AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]  }  else  if(nextGaussian!=  null  &&  nextGaussian.equals(r))  {  [BUGGY]      random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian!=  null  &&  nextGaussian.equals(r))  {	  }    else    if(nextGaussian!=    null)    {    	non-compiled	[CE]  incomparable  types:  double  and  <null>	11	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	compilable	  [FE]  AssertionError  	8	6	add
33	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(nextGaussian);  nextGaussian  =  r  *  FastMath.cos(nextGaussian);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(nextGaussian);    nextGaussian  =  r  *  FastMath.cos(nextGaussian);	  	compilable	  [FE]  AssertionError  	8	6	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	4	3	add
35	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(alpha);    nextGaussian  =  r  *  FastMath.cos(alpha);	  	compilable	  [FE]  AssertionError  	4	3	add
36	[BUG]  [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.cos(alpha);  [CE]  variable  random  might  already  have  been  assigned  [FE]      AssertionError    [CONTEXT]    final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);    [BUGGY]      nextGaussian  =  r  *  FastMath.sin(alpha);  random  =  r  *  FastMath.cos(alpha);  [BUGGY]    }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	        nextGaussian    =    r    *    FastMath.sin(alpha);    random  =  r  *  FastMath.cos(alpha);	  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	4	None	add
