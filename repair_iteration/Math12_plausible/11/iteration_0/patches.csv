bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(nextGaussian!=  Double.NaN)  {  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]  }  else  if(nextGaussian!=  Double.NaN)  {  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian!=  Double.NaN)  {	}  else  {  	non-compiled	[CE]  variable  random  might  not  have  been  initialized	21	None	replace
2	[BUG]  [BUGGY]  }  else  if(nextGaussian  ==  Double.NaN)  {  [CE]  variable  random  might  not  have  been  initialized  [FE]      AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]  }  else  if(nextGaussian  ==  Double.NaN)  {  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian  ==  Double.NaN)  {	}  else  {  	non-compiled	[CE]  variable  random  might  not  have  been  initialized	21	None	replace
3	[BUG]  [BUGGY]    [CE]  variable  random  might  already  have  been  assigned  [FE]        AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	  	}  else  {  	non-compiled	[CE]  variable  random  might  already  have  been  assigned	21	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	    nextGaussian  =  r  *  FastMath.sin(alpha);		compilable	  [FE]  AssertionError  	22	3	add
5	[BUG]  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	    nextGaussian  =  r  *  FastMath.sin(alpha);		compilable	  [FE]  AssertionError  	22	3	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	    nextGaussian  =  r  *  FastMath.cos(alpha);		compilable	  [FE]  AssertionError  	22	3	add
7	[BUG]  [BUGGY]    nextGaussian  =  r  *  FastMath.cos(alpha);  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.cos(alpha);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	    nextGaussian  =  r  *  FastMath.cos(alpha);		compilable	  [FE]  AssertionError  	22	3	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	    nextGaussian  =  r  *  FastMath.sin(nextGaussian);		compilable	  [FE]  AssertionError  	22	3	add
9	[BUG]  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]    nextGaussian  =  r  *  FastMath.sin(nextGaussian);  [BUGGY]  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	    nextGaussian  =  r  *  FastMath.sin(nextGaussian);		compilable	  [FE]  AssertionError  	22	3	add
10	[BUG]  [BUGGY]  }  else  if(Double.isNaN(nextGaussian))  {  [CE]  variable  random  might  not  have  been  initialized  [FE]    AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]  }  else  if(Double.isNaN(nextGaussian))  {  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(Double.isNaN(nextGaussian))  {	}  else  {  	non-compiled	[CE]  variable  random  might  not  have  been  initialized	21	None	replace
11	[BUG]  [BUGGY]  }  else  if(nextGaussian!=  null)  {  [CE]  incomparable  types:  double  and  <null>  [FE]    AssertionError  [CONTEXT]  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  [BUGGY]  }  else  if(nextGaussian!=  null)  {  [BUGGY]    random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	}  else  if(nextGaussian!=  null)  {	}  else  {  	non-compiled	[CE]  incomparable  types:  double  and  <null>	21	None	replace
