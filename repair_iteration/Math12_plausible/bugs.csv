bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final long high = ((long) next(26)) << 26; [FE] AssertionError [CONTEXT] public double nextDouble() { [BUGGY] final long high = ((long) next(26)) << 26; [BUGGY] final intlow= next(26); return (high | low) * 0x1.0p-52d; } [CLASS] BitsStreamGenerator [METHOD] nextDouble [RETURN_TYPE] double  [VARIABLES] boolean double nextGaussian long high int low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	87	87	3	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextDouble() { [BUGGY] [BUGGY] final long high = ((long) next(26)) << 26; final intlow= next(26); return (high | low) * 0x1.0p-52d; } [CLASS] BitsStreamGenerator [METHOD] nextDouble [RETURN_TYPE] double  [VARIABLES] boolean double nextGaussian long high int low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	87	87	3	add	
3	[BUG] [BUGGY] final intlow= next(26); [FE] AssertionError [CONTEXT] public double nextDouble() { final long high = ((long) next(26)) << 26; [BUGGY] final intlow= next(26); [BUGGY] return (high | low) * 0x1.0p-52d; } [CLASS] BitsStreamGenerator [METHOD] nextDouble [RETURN_TYPE] double  [VARIABLES] boolean double nextGaussian long high int low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	88	88	3	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextDouble() { final long high = ((long) next(26)) << 26; [BUGGY] [BUGGY] final intlow= next(26); return (high | low) * 0x1.0p-52d; } [CLASS] BitsStreamGenerator [METHOD] nextDouble [RETURN_TYPE] double  [VARIABLES] boolean double nextGaussian long high int low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	88	88	3	add	
5	[BUG] [BUGGY] return (high | low) * 0x1.0p-52d; [FE] AssertionError [CONTEXT] public double nextDouble() { final long high = ((long) next(26)) << 26; final intlow= next(26); [BUGGY] return (high | low) * 0x1.0p-52d; [BUGGY] } [CLASS] BitsStreamGenerator [METHOD] nextDouble [RETURN_TYPE] double  [VARIABLES] boolean double nextGaussian long high int low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	89	89	3	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextDouble() { final long high = ((long) next(26)) << 26; final intlow= next(26); [BUGGY] [BUGGY] return (high | low) * 0x1.0p-52d; } [CLASS] BitsStreamGenerator [METHOD] nextDouble [RETURN_TYPE] double  [VARIABLES] boolean double nextGaussian long high int low  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	89	89	3	add	
7	[BUG] [BUGGY] if (Double.isNaN(nextGaussian)) { [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; [BUGGY] if (Double.isNaN(nextGaussian)) { [BUGGY]  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; [BUGGY] [BUGGY] if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	101	101	3	add	
9	[BUG] [BUGGY] final double x = nextDouble(); [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  [BUGGY] final double x = nextDouble(); [BUGGY] final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  [BUGGY] [BUGGY] final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	add	
11	[BUG] [BUGGY] final double y = nextDouble(); [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); [BUGGY] final double y = nextDouble(); [BUGGY] final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; }  [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); [BUGGY] [BUGGY] final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; }  [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	add	
13	[BUG] [BUGGY] final double alpha = 2 * FastMath.PI * x; [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); [BUGGY] final double alpha = 2 * FastMath.PI * x; [BUGGY] final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); [BUGGY] [BUGGY] final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	105	105	3	add	
15	[BUG] [BUGGY] final double r= FastMath.sqrt(-2 * FastMath.log(y)); [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; [BUGGY] final double r= FastMath.sqrt(-2 * FastMath.log(y)); [BUGGY] random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random;  [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; [BUGGY] [BUGGY] final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random;  [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	106	106	3	add	
17	[BUG] [BUGGY] random = r * FastMath.cos(alpha); [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); [BUGGY] random = r * FastMath.cos(alpha); [BUGGY] nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); [BUGGY] [BUGGY] random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	107	107	3	add	
19	[BUG] [BUGGY] nextGaussian = r * FastMath.sin(alpha); [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); [BUGGY] nextGaussian = r * FastMath.sin(alpha); [BUGGY] } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); [BUGGY] [BUGGY] nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	108	108	3	add	
21	[BUG] [BUGGY] } else { [FE] AssertionError [CONTEXT] final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); [BUGGY] } else { [BUGGY]  random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double random; if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); [BUGGY] [BUGGY] } else {  random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	109	109	3	add	
23	[BUG] [BUGGY] random = nextGaussian; [FE] AssertionError [CONTEXT] if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  [BUGGY] random = nextGaussian; [BUGGY] nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (Double.isNaN(nextGaussian)) {  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  [BUGGY] [BUGGY] random = nextGaussian; nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	
25	[BUG] [BUGGY] nextGaussian = Double.NaN; [FE] AssertionError [CONTEXT]  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; [BUGGY] nextGaussian = Double.NaN; [BUGGY] } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; [BUGGY] [BUGGY] nextGaussian = Double.NaN; } return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	112	112	3	add	
27	[BUG] [BUGGY] return random; [FE] AssertionError [CONTEXT] final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } [BUGGY] return random; [BUGGY]  } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final double alpha = 2 * FastMath.PI * x; final double r= FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else {  random = nextGaussian; nextGaussian = Double.NaN; } [BUGGY] [BUGGY] return random; } [CLASS] BitsStreamGenerator [METHOD] nextGaussian [RETURN_TYPE] double  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	115	115	3	add	
29	[BUG] [BUGGY] public BitsStreamGenerator() { [FE] AssertionError [CONTEXT] [BUGGY] public BitsStreamGenerator() { [BUGGY] nextGaussian = Double.NaN; } [CLASS] BitsStreamGenerator [METHOD] <init> [RETURN_TYPE] BitsStreamGenerator()  [VARIABLES] double nextGaussian boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	37	37	3	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] public BitsStreamGenerator() { nextGaussian = Double.NaN; } [CLASS] BitsStreamGenerator [METHOD] <init> [RETURN_TYPE] BitsStreamGenerator()  [VARIABLES] double nextGaussian boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	37	37	3	add	
31	[BUG] [BUGGY] nextGaussian = Double.NaN; [FE] AssertionError [CONTEXT] public BitsStreamGenerator() { [BUGGY] nextGaussian = Double.NaN; [BUGGY] } [CLASS] BitsStreamGenerator [METHOD] <init> [RETURN_TYPE] BitsStreamGenerator()  [VARIABLES] double nextGaussian boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	38	38	3	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BitsStreamGenerator() { [BUGGY] [BUGGY] nextGaussian = Double.NaN; } [CLASS] BitsStreamGenerator [METHOD] <init> [RETURN_TYPE] BitsStreamGenerator()  [VARIABLES] double nextGaussian boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	38	38	3	add	
33	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public BitsStreamGenerator() { nextGaussian = Double.NaN; [BUGGY] } [BUGGY]  [CLASS] BitsStreamGenerator [METHOD] <init> [RETURN_TYPE] BitsStreamGenerator()  [VARIABLES] double nextGaussian boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	39	39	3	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public BitsStreamGenerator() { nextGaussian = Double.NaN; [BUGGY] [BUGGY] } [CLASS] BitsStreamGenerator [METHOD] <init> [RETURN_TYPE] BitsStreamGenerator()  [VARIABLES] double nextGaussian boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	39	39	3	add	
35	[BUG] [BUGGY] nextGaussian = Double.NaN; [FE] AssertionError [CONTEXT] public void clear() { [BUGGY] nextGaussian = Double.NaN; [BUGGY] } [CLASS] BitsStreamGenerator [METHOD] clear [RETURN_TYPE] void  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	167	167	3	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void clear() { [BUGGY] [BUGGY] nextGaussian = Double.NaN; } [CLASS] BitsStreamGenerator [METHOD] clear [RETURN_TYPE] void  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	167	167	3	add	
37	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void clear() { nextGaussian = Double.NaN; [BUGGY] } [BUGGY]  [CLASS] BitsStreamGenerator [METHOD] clear [RETURN_TYPE] void  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	168	168	3	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void clear() { nextGaussian = Double.NaN; [BUGGY] [BUGGY] } [CLASS] BitsStreamGenerator [METHOD] clear [RETURN_TYPE] void  [VARIABLES] double alpha nextGaussian r random x y boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.22360679774997896	168	168	3	add	
