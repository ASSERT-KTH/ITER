bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  y  =  random.nextDouble();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  y  =  random.nextDouble();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  y  =  random.nextDouble();	      double    y    =    nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
2	[BUG]  [BUGGY]  final  double  y  =  nextGaussian.nextDouble();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  final  double  y  =  nextGaussian.nextDouble();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	final  double  y  =  nextGaussian.nextDouble();	  final    double    y    =    random.nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
3	[BUG]  [BUGGY]  final  double  y  =  nextGaussian.nextGaussian();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  final  double  y  =  nextGaussian.nextGaussian();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	final  double  y  =  nextGaussian.nextGaussian();	      final    double    y    =    random.nextGaussian();    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
4	[BUG]  [BUGGY]  final  double  y  =  nextGaussian();  final  double  y  =  nextGaussian();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  final  double  y  =  nextGaussian();  final  double  y  =  nextGaussian();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	final    double    y    =    nextGaussian();    final  double  y  =  nextGaussian();	  	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	2	None	add
5	[BUG]  [BUGGY]  final  double  y  =  nextGaussian();  Final  double  y  =  nextGaussian();  [CE]  not  a  statement  [FE]      StackOverflowError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  final  double  y  =  nextGaussian();  Final  double  y  =  nextGaussian();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	final    double    y    =    nextGaussian();    Final  double  y  =  nextGaussian();	  	non-compiled	[CE]  not  a  statement	2	None	add
6	[BUG]  [BUGGY]  double  x  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  x  =  nextDouble();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  x  =  nextDouble();	      x    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	6	None	replace
7	[BUG]  [BUGGY]  x  =  nextGaussian();  [CE]  cannot  assign  a  value  to  final  variable  x  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  x  =  nextGaussian();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	x  =  nextGaussian();	      x    =    nextDouble();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  x	6	None	replace
8	[BUG]  [BUGGY]  double  y  =  random.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  y  =  random.doubleValue();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  y  =  random.doubleValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
9	[BUG]  [BUGGY]  final  double  x  =  nextDouble();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  final  double  x  =  nextDouble();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	final  double  x  =  nextDouble();	      x    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	6	None	replace
10	[BUG]  [BUGGY]  double  y  =  random();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  y  =  random();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  y  =  random();	      double    y    =    nextGaussian();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
11	[BUG]  [BUGGY]  double  y  =  nextGaussian.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  y  =  nextGaussian.doubleValue();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  y  =  nextGaussian.doubleValue();	      	non-compiled	[CE]  double  cannot  be  dereferenced	4	None	replace
12	[BUG]  [BUGGY]  double  x  =  nextGaussian();  [CE]  variable  x  is  already  defined  in  method  nextGaussian()  [FE]          AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  x  =  nextGaussian();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  x  =  nextGaussian();	      x    =    nextDouble();    	non-compiled	[CE]  variable  x  is  already  defined  in  method  nextGaussian()	6	None	replace
13	[BUG]  [BUGGY]  final  double  y  =  nextGaussian();  final  double  y  =  firstGaussian();  [CE]  variable  y  is  already  defined  in  method  nextGaussian()  [FE]    StackOverflowError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  final  double  y  =  nextGaussian();  final  double  y  =  firstGaussian();  [BUGGY]    final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	final    double    y    =    nextGaussian();    final  double  y  =  firstGaussian();	  	non-compiled	[CE]  variable  y  is  already  defined  in  method  nextGaussian()	2	None	add
14	[BUG]  [BUGGY]  double  y  =  random.nextGaussian();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]    public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();    [BUGGY]  double  y  =  random.nextGaussian();  [BUGGY]    final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	104	104	3	replace	double  y  =  random.nextGaussian();	      double    y    =    nextDouble();    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
