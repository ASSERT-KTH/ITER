bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    final  double  nextDouble  =  nextDouble();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	add	    final  double  nextDouble  =  nextDouble();		compilable	  [FE]  AssertionError  	10	3	add
2	[BUG]  [BUGGY]    final  double  nextDouble  =  nextDouble();  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    final  double  nextDouble  =  nextDouble();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    final  double  nextDouble  =  nextDouble();		compilable	  [FE]  AssertionError  	10	3	add
3	[BUG]  [BUGGY]    double  nextDouble();  [CE]  ';'  expected  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    double  nextDouble();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    double  nextDouble();		non-compiled	[CE]  ';'  expected	10	None	add
4	[BUG]  [BUGGY]    final  double  nextDouble();  [CE]  ';'  expected  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    final  double  nextDouble();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    final  double  nextDouble();		non-compiled	[CE]  ';'  expected	10	None	add
5	[BUG]  [BUGGY]  final  double  x  =  random.nextDouble();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]  final  double  x  =  random.nextDouble();  [BUGGY]  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  x  =  random.nextDouble();	final  double  x  =  nextDouble();  	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
6	[BUG]  [BUGGY]  final  double  x  =  random();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]  final  double  x  =  random();  [BUGGY]  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  x  =  random();	final  double  x  =  nextDouble();  	non-compiled	[CE]  cannot  find  symbol	9	None	replace
7	[BUG]  [BUGGY]  final  double  x  =  random.nextGaussian();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]  final  double  x  =  random.nextGaussian();  [BUGGY]  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	final  double  x  =  random.nextGaussian();	final  double  x  =  nextDouble();  	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
8	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    final  double  nextDouble  =  nextGaussian();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	add	    final  double  nextDouble  =  nextGaussian();		compilable	  [FE]  StackOverflowError  	10	6	add
9	[BUG]  [BUGGY]    final  double  nextDouble  =  nextGaussian();  [FE]  StackOverflowError  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    final  double  nextDouble  =  nextGaussian();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    final  double  nextDouble  =  nextGaussian();		compilable	  [FE]  StackOverflowError  	10	6	add
10	[BUG]  [BUGGY]    double  nextGaussian  =  nextGaussian.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    double  nextGaussian  =  nextGaussian.doubleValue();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    double  nextGaussian  =  nextGaussian.doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	10	None	add
11	[BUG]  [BUGGY]    final  double  nextGaussian  =  nextGaussian();  [CE]  cannot  assign  a  value  to  final  variable  nextGaussian  [FE]        AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    final  double  nextGaussian  =  nextGaussian();  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    final  double  nextGaussian  =  nextGaussian();		non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nextGaussian	10	None	add
12	[BUG]  [BUGGY]    if(nextGaussian!=  null)  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.cos(nextGaussian);  }  [CE]  incomparable  types:  double  and  <null>  [FE]    AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    if(nextGaussian!=  null)  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.cos(nextGaussian);  }  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    if(nextGaussian!=  null)  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.cos(nextGaussian);  }		non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	add
13	[BUG]  [BUGGY]    if(nextGaussian!=  null)  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.sin(nextGaussian);  }  [CE]  incomparable  types:  double  and  <null>  [FE]      AssertionError  [CONTEXT]  public  double  nextGaussian()  {  final  double  random;  if  (Double.isNaN(nextGaussian))  {    [BUGGY]    if(nextGaussian!=  null)  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.sin(nextGaussian);  }  [BUGGY]  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	103	103	3	replace	    if(nextGaussian!=  null)  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  random  =  y  *  FastMath.sin(nextGaussian);  }		non-compiled	[CE]  incomparable  types:  double  and  <null>	10	None	add
