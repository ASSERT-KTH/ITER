bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(nextGaussian!=  null)  {  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    if(nextGaussian!=  null)  {  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    if(nextGaussian!=  null)  {  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(2  *  FastMath.PI);  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
2	[BUG]  [BUGGY]    if(nextGaussian!=  null)  {  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(0,  alpha);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    if(nextGaussian!=  null)  {  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(0,  alpha);  }  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    if(nextGaussian!=  null)  {  if(Double.isNaN(x)||  Double.isNaN(y))  {  random  =  Math.pow(0,  alpha);  }		non-compiled	[CE]  illegal  start  of  expression	24	None	add
3	[BUG]  [BUGGY]    random  =  FastMath.cos(x);  nextGaussian  =  Double.NaN;  [CE]  cannot  find  symbol  x  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    random  =  FastMath.cos(x);  nextGaussian  =  Double.NaN;  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    random  =  FastMath.cos(x);  nextGaussian  =  Double.NaN;		non-compiled	[CE]  cannot  find  symbol  x	24	None	add
4	[BUG]  [BUGGY]  random  =  x;  [CE]  cannot  find  symbol  x  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]  random  =  x;  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  x;	random  =  nextGaussian;  	non-compiled	[CE]  cannot  find  symbol  x	23	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]  random  =  Double.NaN;  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  Double.NaN;	random  =  nextGaussian;  	compilable	  [FE]  AssertionError  	23	5	replace
6	[BUG]  [BUGGY]  random  =  Double.NaN;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]  random  =  Double.NaN;  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  Double.NaN;	random  =  nextGaussian;  	compilable	  [FE]  AssertionError  	23	5	replace
7	[BUG]  [BUGGY]    double  random  =  nextGaussian  *  FastMath.cos(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    double  random  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    double  random  =  nextGaussian  *  FastMath.cos(x);		non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	24	None	add
8	[BUG]  [BUGGY]    double  random  =  nextGaussian  *  FastMath.sin(x);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    double  random  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    double  random  =  nextGaussian  *  FastMath.sin(x);		non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	24	None	add
9	[BUG]  [BUGGY]    double  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  [CE]  variable  random  is  already  defined  in  method  nextGaussian()  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    double  random  =  nextGaussian  *  FastMath.cos(nextGaussian);  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    double  random  =  nextGaussian  *  FastMath.cos(nextGaussian);		non-compiled	[CE]  variable  random  is  already  defined  in  method  nextGaussian()	24	None	add
10	[BUG]  [BUGGY]    double  nextGaussian  =  nextGaussian  *  FastMath.sin(x);  [CE]  cannot  find  symbol  x  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    double  nextGaussian  =  nextGaussian  *  FastMath.sin(x);  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    double  nextGaussian  =  nextGaussian  *  FastMath.sin(x);		non-compiled	[CE]  cannot  find  symbol  x	24	None	add
11	[BUG]  [BUGGY]    double  nextGaussian  =  nextGaussian  *  FastMath.cos(x);  [CE]  cannot  find  symbol  x  [FE]      AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    double  nextGaussian  =  nextGaussian  *  FastMath.cos(x);  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    double  nextGaussian  =  nextGaussian  *  FastMath.cos(x);		non-compiled	[CE]  cannot  find  symbol  x	24	None	add
12	[BUG]  [BUGGY]    double  nextGaussian  =  nextGaussian  *  FastMath.log(y);  [CE]  cannot  find  symbol  y  [FE]        AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]    double  nextGaussian  =  nextGaussian  *  FastMath.log(y);  [BUGGY]  random  =  nextGaussian;  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	    double  nextGaussian  =  nextGaussian  *  FastMath.log(y);		non-compiled	[CE]  cannot  find  symbol  y	24	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]  random  =  nextGaussian  +  1;  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	add	random  =  nextGaussian  +  1;	random  =  nextGaussian;  	compilable	  [FE]  AssertionError  	23	6	replace
14	[BUG]  [BUGGY]  random  =  nextGaussian  +  1;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  if  (Double.isNaN(nextGaussian))  {  final  double  x  =  nextDouble();  final  double  y  =  nextDouble();  final  double  alpha  =  2  *  FastMath.PI  *  x;  final  double  r=  FastMath.sqrt(-2  *  FastMath.log(y));  random  =  r  *  FastMath.cos(alpha);  nextGaussian  =  r  *  FastMath.sin(alpha);  }  else  {    [BUGGY]  random  =  nextGaussian  +  1;  [BUGGY]  nextGaussian  =  Double.NaN;  }  return  random;  }  [CLASS]  BitsStreamGenerator  [METHOD]  nextGaussian  [RETURN_TYPE]  double  [VARIABLES]  double  alpha  nextGaussian  r  random  x  y  boolean  	projects/Math12/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java	0.7071067811865476	111	111	3	replace	random  =  nextGaussian  +  1;	random  =  nextGaussian;  	compilable	  [FE]  AssertionError  	23	6	replace
