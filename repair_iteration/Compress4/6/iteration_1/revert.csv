projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryEnd(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectory(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdOffset>0){writeCentralDirectoryEnd();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileHeader();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileHeaderEnd();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344WriteCentralDirectoryEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<=0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileHeader();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdOffset>0){writeCentralDirectoryEnd();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileHeader();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdOffset>0){writeCentralDirectoryEnd();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectory(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectory(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectory(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectory(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeFileHeader(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectory(cdLength);}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectory(cdLength);}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryEnd(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{in.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryStart(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>dataStart){writeCentralDirectoryStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdOffset>0){writeCentralDirectoryEnd();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd();}else{writeCentralFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryFileHeader();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdOffset>0){writeCentralDirectoryEnd();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==0){writeCentralDirectoryEnd();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileHeader();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<=0){writeCentralDirectoryEnd();}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryStart(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength==dataStart){writeCentralDirectoryStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectory(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344_writeCentralDirectory(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectory(cdLength);}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralFileHeader(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength!=0){writeCentralDirectoryEnd();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}else{writeCentralDirectoryHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344cdLength=writeCentralDirectoryEnd(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectoryEnd(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>=0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryHeader();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<2){writeCentralDirectoryEnd();}else{writeCentralDirectoryFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<=0){writeCentralDirectoryEnd();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryStart();}else{writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeLong(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344writeCentralDirectory(cdLength,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<0){writeCentralDirectoryEnd();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralFileHeader();}else{out.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344cdOffset=writeCentralDirectoryEnd(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){writeCentralDirectoryEnd(cdLength);}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<=0){writeCentralDirectoryEnd();}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java344if(cdLength<2){writeCentralDirectoryEnd();}else{writeCentralDirectoryHeader(cdLength);}
