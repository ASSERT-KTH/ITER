projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()+dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373raf.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()-dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getImmediateParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()/1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getRawSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getLength();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written/=def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getCompressedSize()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=realCrc.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=realCrc.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATED){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATED){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getCompressedSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(def.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(def
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(entry.getLowerCrc());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(entry.getSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getImplicitReturn();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRawValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRawClass();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getRawValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getValue()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()*dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()+2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written-=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373wrote-=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getDataStart()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373write(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getImmediateParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getImmediateParent()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataEnd()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()/1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=dataStart){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==DEFLATED){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName()!=DEFLATED){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getSize()!=DEFLATED){written-=entry.getSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()>=DEFLATED){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getSize()!=DEFLATED){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=realCrc.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=def.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getLength();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=def.getCompressedSize()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getCompressedSize()*1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getDataStart()!=dataStart){written-=entry.getDataStart();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getDataStart()!=dataStart){written-=entry.getDataStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getDataStart()!=dataStart){written-=entry.getDataStart();}else{def.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getDataStart()!=dataStart){written-=entry.getDataStart();}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRawEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRawParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getImmediateParent());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getRaw());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getName()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getName()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getName(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getName()+"n");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getRawValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(def.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(def.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(def.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=def.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getCompressedSize()/1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373||!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373||!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373raf.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373raf.flush();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373raf.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373_raf.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373raf.release();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written/=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=BYTE_MASK){written/=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=DEFLATED){written/=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()==BYTE_MASK){written/=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()==DEFLATED){written/=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()>0){written/=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getRaw()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=def.getSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getRaw()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()*1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()/2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()/1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=BUFFER_SIZE){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getSize()!=DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==BUFFER_SIZE){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=dataStart){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==DEFLATED){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getSize()!=DEFLATED){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()>=DEFLATED){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==dataStart){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=def.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getDataEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getDataStart()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataEnd()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()*1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getSize()!=DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=BUFFER_SIZE){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()>=DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==def.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=entry.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize()-2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize()+2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(def
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(def
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(def
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){if(entry.getName().endsWith(".java")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()/dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()*dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()-2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getRawSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getSize()+dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getSize()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=def.getCompressedSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getSize()!=def.getSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()==def.getCompressedSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=entry.getCompressedSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getLength();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getLength()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getDataEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373||!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=BYTE_MASK){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()==BYTE_MASK){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=dataStart){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=DEFLATED){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=realCrc.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written/=realCrc.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()+DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=def.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getName(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=def.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATED||entry.getCompressedSize()!=DEFLATED){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setCompressedSize(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATED){written-=def.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATED){written-=Entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373raf.close(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373_raf.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATER_BLOCK_SIZE){written-=def.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=realCrc){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=realCrc.getCompressedSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=def.getCompressedSize()){written-=def.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getCompressedSize()){written-=DEFLATED;}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=def.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=def.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=crc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getDataStart()-dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getDataStart()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=def.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith(".java")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(!def.finished()){if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=def.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getReference();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373-=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATER_BLOCK_SIZE){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=realCrc.getLength();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(def.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getCharset());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith("/")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373def.setCompressedSize(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=DEFLATED){written-=def.getCompressedSize();}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=BYTE_MASK){written-=def.getCompressedSize();}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getDataStart()!=dataEnd){written-=entry.getDataStart();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373wrote+=def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setSize(ZipUtil.adjustToLong(def.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getCompressedSize()-2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getRawSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=crc.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=def.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def!=null){if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()-2;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373write+=def.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=def.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written/=def.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=DEFLATED){written/=def.getCompressedSize();}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getChars();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def!=null){if(!def.finished()){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=def.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=realCrc.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=realCrc){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=def.getCompressedSize()){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getEncoding();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=realCrc.getDataStart()-dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()-DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=realCrc.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=DEFLATED.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373write+=def.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=def.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=dataEnd){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=DEFLATED){written-=def.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=realCrc.getDataStart()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373wrote+=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getImmediateParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.toString();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getDataStart()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getCompressedSize()-dataStart;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=written){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=defLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=deflated){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=deflate){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()-def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=entry.getDataStart()-def.getLength();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getRawParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize()-DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Written+=entry.getCompressedSize()*DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Entry<K,V>realCrc=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getName().endsWith(".java")){entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=written){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=deflated){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=deflate){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373WrittenSize-=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(entry.getEncoding());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373wrote+=entry.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=def.getDataLength();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written+=dataStart.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(def.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getAssignedValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=deflate(entry.getEncoding());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.getCompressedSize()!=entry.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.setCompressedSize(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getCompressedSize()){written-=entry.getDataStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=written-entry.getCompressedSize()){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373entry.getCompressedSize()!=DEFLATER_BLOCK_SIZE){written-=entry.getCompressedSize();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373write(entry.getDataStart());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373writer.write(entry.getDataStart());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373write(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373writer.write(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written*=def.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflater<K,V>realCrc=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373written-=entry.getCompressedSize()+comment;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(def.finished()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=entry.getCompressedSize()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getCompressedSize()){written-=entry.getTotalIn();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getDataStart()){written-=entry.getCompressedSize();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373if(entry.getCompressedSize()!=def.getCompressedSize()){written-=entry.getDataStart();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newRandomAccessFile(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java373Deflaterraf=newDeflater(Deflater.DEFAULT_ENCODING);
