projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.finish();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closePathEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUnsupportedOperation();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflateDestination();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflateDesc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflatedEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(def.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getConstructor();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.closeEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.close(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=def.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.close(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.close(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closePath();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_ENCODING,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.releaseEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotclosedeflatedentry:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotfound:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.close(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotfound:"+entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotfound:"+entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotfound:"+entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotfound:"+entry.getClass());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getDeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getDeclaredMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getSimpleName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getDelta());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getDelimiter());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,realCrc,SHORT);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getDelta());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.closePath();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+".:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+",DEFLATED:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+",realCrc:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+",");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+",:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entry.getMethod()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUnsupportedOperation();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUnsupportedOperation(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362reportUnsupportedOperation(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeArchiveEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(entry,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()/DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()*DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeArchiveEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeArchiveEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getValue(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entry.getValue()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),def,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getValue(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getMethod()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getMethod()-DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflater(),DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getDeflater(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getSimpleDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.closePathEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closePathEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeArchiveEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closePathEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(entry,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(entry,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(entry,_raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED.closeEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deFLATED.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362if(_raf!=null){_raf.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362if(_raf!=null){_raf.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362if(_raf!=null){_raf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362if(_raf!=null){_raf.close();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362if(_raf!=null){_raf.close();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,0,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.close(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.close(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.close(entry,_raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=raf.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.closeArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(getMethod(),EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,def,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(getMethod(),entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getDelta();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,BUFFER_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATER_BLOCK_SIZE,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(getDeflate());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(getMethod()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.closeEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.closeEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.closeEntry(entry,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.closeEntry(entry,_raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()/DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()*DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.closeEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.close(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entries.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getCompressedSize(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFAULT_COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFAULT_ENCODING,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFAULT_ENCODING,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("CannotcloseDEFLATEDentry:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotclosedeflatedentry:"+entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotclosedeflatedentry:"+entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotcloseentry:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotclosedeflatedentry:"+entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotclosedeflatedentry:"+entry.getReturnType());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getClass());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getRawClass());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getDeclaration());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getValue(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+".:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+",DEFLATED:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+",");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+",:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+".");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+",in:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry.getMethod(),entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Undeflatedmethod:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()/1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getDelta());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,null);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflate(entry.getMethod(),DEFLATED,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,FALSE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362reportUndeflate(entry.getMethod(),DEFLATED,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflate(entry.getMethod(),DEFLATED,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getRealCrc());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,realCrc,entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry,DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry,DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,0,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entries.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DeflaterdeflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_ENCODING,DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_ENCODING,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_ENCODING,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_ENCODING,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Entry.DEFAULT_ENCODING,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Entry.DEFAULT_COMPRESSION,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION,DEFLATED,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getCompressedSize()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATER_BLOCK_SIZE,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,true,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,null);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflate(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflate(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATED,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.releaseEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.releaseEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateDeflater(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(def.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED|DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(DEFLATED,DEFAULT_COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION,DEFLATED,BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(defLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_report("Unexpectedmethod:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.openDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.getDeflater(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+".");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(def.getMethod()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+":"+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATER_BLOCK_SIZE,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED,_raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+":"+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=createUnicodeExtraFields(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=createUnicodeExtraField(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=createUnicodeExtraFields(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,realCrc,def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=def.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.clone());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED.closeArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED.setMethod(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,0,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getValue(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,LZERO);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getCompressedSize(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entry.getMethod()+":"+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflated(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflated(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=def.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=DEFLATED.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=_entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=getEntry(def.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),DEFLATED,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()).reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Cannotclosedeflateentry:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwInternal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflateEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unsupportedentry:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unsupportedentrymethod:"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.append(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getDelta();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotfound:n"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED=deflateEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_report(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeArchiveEntry(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),def,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=createUnicodeExtraFields(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362DEFLATED=createUnicodeExtraFields(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_entries.get(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entries.get(entry.getMethod()+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.append(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,0,false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(DEFLATED,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(DEFLATER_BLOCK_SIZE,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getEntry());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getValue(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unexpectedmethod:"+entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflate(entry.getDelimiter());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_raf.closeEntry(entry,DEFLATER_BLOCK_SIG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflatedEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_releaseEntry(entry.getSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod(),DEFLATED||entry.getCompressedSize()==DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362createUnicodeExtraFields(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater<String>def=entry.getDelimiter();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,def.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=entries.get(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.getMethod(DEFLATED)+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=entry.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Unsupportedentry:"+entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE,true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportError("Currententrynotanobjectbut"+entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeEntry(def,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.closeArchiveEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(entries.get(entry.getMethod()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(Deflater.DEFAULT_COMPRESSION,DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getDelimiter());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry.getSimpleName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362deflateEntry(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362raf.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.setMethod(def.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entries.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.appendCompressedSize(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod(),DEFLATED||entry.getCompressedSize()==DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflated(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362((RandomAccessFile)entry.getValue()).closeArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362((RandomAccessFile)entry).closeArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry,DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,DEFLATER_BLOCK_SIZE,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(getMethod()+":"+DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.releaseEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.releaseEntry(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_throwUndeflate(entry.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_flushUndeflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+"..");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+".prototype:");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE,DEFLATER_COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_deflateEntry(entry,DEFLATED,DEFLATER_BLOCK_SIZE,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_closeEntry(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(def.getMethod()+":");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(entry.getMethod()+":".equals(comment));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entrydef=entry.getDecodedEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(entry.getMethod(),DEFLATED,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflateEntry(entry.getSimpleName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.deflate(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflater.inflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Entryentry=_raf.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362def.setMethod(entry.getMethod()+comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=_deflateEntry(entry.getDelimiter());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef=newDeflater(def.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),DEFLATED,comment,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362_reportUndeflate(entry.getMethod(),comment,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362if(_raf!=null){_raf.close();}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(def.getMethod(),DEFLATED,comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java362Deflaterdef.setMethod(def.getMethod(),DEFLATER_BLOCK_SIZE);
