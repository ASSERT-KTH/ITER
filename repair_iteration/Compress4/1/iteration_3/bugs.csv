bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
2	[BUG]  [BUGGY]  if(entry!=  null  ||!entries.isEmpty())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
3	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
4	[BUG]  [BUGGY]  if(entry  ==  null  ||!entries.isEmpty())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
5	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
6	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.isEmpty())  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
7	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
8	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  ';'  expected	77	None	add
9	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
10	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
11	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
12	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
13	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getName()  ==  DEFLATED  ||  entry.getName()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entry.getName()  ==  DEFLATED  ||  entry.getName()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entry.getName()  ==  DEFLATED  ||  entry.getName()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
14	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.size()  ==  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	86	10	replace
15	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  1)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  ==  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	86	10	replace
16	[BUG]  [BUGGY]  if(entryTypes!=  null  ||  entries.size()  ==  1)  {  [CE]  cannot  find  symbol  entryTypes  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entryTypes!=  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entryTypes!=  null  ||  entries.size()  ==  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	non-compiled	[CE]  cannot  find  symbol  entryTypes	86	None	replace
17	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  >  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  IOException  	86	11	replace
18	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  1)  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  >  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  IOException  	86	11	replace
19	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  ==  2)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  IOException  	86	11	replace
20	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  2)  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  ==  2)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  IOException  	86	11	replace
21	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
22	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
23	[BUG]  [BUGGY]  [FE]  IOException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  IOException  	82	11	replace
24	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  IOException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  IOException  	82	11	replace
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
26	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
28	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
29	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
30	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
31	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
32	[BUG]  [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
33	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    if(entry!=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
34	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry  ==  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry  ==  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    if(entry  ==  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
35	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  If(entry!=  null  &&  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]        java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  If(entry!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    If(entry!=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	151	None	add
36	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entry.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entry.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    if(entry!=  null  &&  entry.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
37	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry  >=  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry  >=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    if(entry  >=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
38	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    if(entry!=  null  &&  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
39	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    ==    0)    {    if(entry!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	151	None	add
40	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
41	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
42	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
43	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
44	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
45	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
46	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getName()  ==  DEFLATED  ||  entry.getName()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getName()  ==  DEFLATED  ||  entry.getName()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getName()  ==  DEFLATED  ||  entry.getName()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
47	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getValue()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getValue()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getValue()  ==  0)  {	  if(entry!=    null    ||    entry.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
48	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getValue()  ==  0)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getValue()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getValue()  ==  0)  {	  if(entry!=    null    ||    entry.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
49	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.length()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.length()  ==  0)  {	  if(entry!=    null    ||    entry.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
50	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.isDirectory())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  NullPointerException  	69	11	replace
51	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.isDirectory())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  NullPointerException  	69	11	replace
52	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass().isAssignableFrom(entry.getClass()))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getClass().isAssignableFrom(entry.getClass()))  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	69	11	replace
53	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass().isAssignableFrom(entry.getClass()))  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass().isAssignableFrom(entry.getClass()))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass().isAssignableFrom(entry.getClass()))  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	69	11	replace
54	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isFile())  {  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isFile())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.isFile())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
55	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass().isArray())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getClass().isArray())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	69	11	replace
56	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass().isArray())  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass().isArray())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass().isArray())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	69	11	replace
57	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isArchive())  {  [CE]  cannot  find  symbol  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isArchive())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.isArchive())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
58	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	69	11	replace
59	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	69	11	replace
60	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getKey();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getKey();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getKey();	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
61	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getValue()  +  1;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getValue()  +  1;  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getValue()  +  1;	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
62	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.getValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.getValue();	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
63	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.get(entry.getValue());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.get(entry.getValue());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.get(entry.getValue());	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
64	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.get(entry.getKey());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.get(entry.getKey());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entries.get(entry.getKey());	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
65	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getKey();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getKey();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getKey();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
66	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.getDeflater();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.getDeflater();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entries.getDeflater();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
67	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAs();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAs();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAs();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
68	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getRaw();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getRaw();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getRaw();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
69	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getRawDeflater();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getRawDeflater();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getRawDeflater();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
70	[BUG]  [BUGGY]  if(entrys  ==  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  entrys  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys  ==  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  entrys	36	None	replace
71	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
72	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||!entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	1	11	replace
73	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||!entries.isEmpty())  {  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||!entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	1	11	replace
74	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED)  {  if(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
75	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||  entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	1	11	replace
76	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.isEmpty())  {  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	1	11	replace
77	[BUG]  [BUGGY]  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  >=  0)  {	  if(entries    ==    null)    {    if(entries    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	172	11	replace
78	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >=  0)  {  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  >=  0)  {	  if(entries    ==    null)    {    if(entries    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	172	11	replace
79	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    >=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	30	11	replace
80	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    >=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	30	11	replace
81	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    >=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	30	11	replace
82	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  >=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    >=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	30	11	replace
83	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
84	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
85	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
86	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
87	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
88	[BUG]  [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
89	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!offsets.isEmpty())  {  if(!offsets.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!offsets.isEmpty())  {  if(!offsets.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
90	[BUG]  [BUGGY]  if(!offsets.isEmpty())  {  if(!offsets.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!offsets.isEmpty())  {  if(!offsets.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!offsets.isEmpty())  {  if(!offsets.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
91	[BUG]  [BUGGY]  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
92	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	142	11	replace
93	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    if(entry!=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
94	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry  ==  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry  ==  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    if(entry  ==  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
95	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  &&  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]        java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    If(entry!=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	170	None	add
96	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry  >=  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry  >=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    if(entry  >=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
97	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  &&  entry.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  &&  entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    if(entry!=  null  &&  entry.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
98	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    if(entry!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
99	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getKey()!=  null)  {  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getKey()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getKey()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
100	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.getValue()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
101	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getValue()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
102	[BUG]  [BUGGY]  if(entries  ==  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entry.getValue()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
103	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getKey()!=  null)  {  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getKey()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getKey()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
104	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.next()!=  null)  {  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.next()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.next()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
105	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries!=  null  &&!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries!=  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    if(entries!=  null  &&!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
106	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries  ==  null  &&!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries  ==  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    if(entries  ==  null  &&!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
107	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  If(entries!=  null  &&!entries.isEmpty())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  If(entries!=  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    If(entries!=  null  &&!entries.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	125	None	add
108	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries  >=  null  &&!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries  >=  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    if(entries  >=  null  &&!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
109	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries  >>  null  &&!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries  >>  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    if(entries  >>  null  &&!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
110	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries!=  null  |&!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries!=  null  |&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    if(entries!=  null  |&!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
111	[BUG]  [BUGGY]  If(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
112	[BUG]  [BUGGY]  If(entry  ==  null  ||  entry.size()  ==  0)  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entry.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entry.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
113	[BUG]  [BUGGY]  If(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry!=  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
114	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
115	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
116	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    If(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	109	None	add
117	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
118	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  >=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  >=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  >=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
119	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry!=  null  ||  entries.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
120	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    If(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	109	None	add
121	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.size()  >  0)  {	  if(entry!=    null    ||    entry.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
122	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getValue()  >  0)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getValue()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getValue()  >  0)  {	  if(entry!=    null    ||    entry.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
123	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.length()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.length()  >  0)  {	  if(entry!=    null    ||    entry.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
124	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry!=  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
125	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry  ==  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
126	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
127	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
128	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  >>  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry!=  null  ||  entries.size()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
129	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entry.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entry.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry!=  null  ||  entry.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
130	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  If(entry!=  null  ||  entries.size()  >=  0)  {  [CE]  ';'  expected  [FE]                IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  If(entry!=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    If(entry!=  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
131	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  If(entry  ==  null  ||  entries.size()  >=  0)  {  [CE]  ';'  expected  [FE]                  IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  If(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    If(entry  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
132	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.isDirectory())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  NullPointerException  	94	11	replace
133	[BUG]  [BUGGY]  if(entry.isDirectory())  {  [FE]  NullPointerException  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.isDirectory())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  NullPointerException  	94	11	replace
134	[BUG]  [BUGGY]  [FE]  IOException  [FE]                        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entry.isDirectory())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	94	11	replace
135	[BUG]  [BUGGY]  if(entries!=  null  ||  entry.isDirectory())  {  [FE]  IOException  [FE]                        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entry.isDirectory())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  IOException  	94	11	replace
136	[BUG]  [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [CE]  <identifier>  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  <identifier>  expected	165	None	replace
137	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [CE]  cannot  find  symbol  entrys  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  cannot  find  symbol  entrys	165	None	replace
138	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu  [CE]  ')'  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	165	None	replace
139	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue  [CE]  ')'  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	165	None	replace
140	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [CE]  cannot  find  symbol  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
141	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu  [CE]  ')'  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	165	None	replace
142	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    if(entry  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
143	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    if(entry!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
144	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    If(entry  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
145	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entry.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    if(entry  ==  null  ||  entry.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
146	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  >=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  >=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    if(entry  >=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
147	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    if(entries  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
148	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
149	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
150	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
151	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
152	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
153	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
154	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
155	[BUG]  [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
156	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getKey()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getKey()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getKey()  ==  null)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
157	[BUG]  [BUGGY]  If(entry!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
158	[BUG]  [BUGGY]  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
159	[BUG]  [BUGGY]  If(entry!=  null  ||  entries.size()  <  0)  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry!=  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry!=  null  ||  entries.size()  <  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
160	[BUG]  [BUGGY]  If(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entries  ==  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	35	None	replace
161	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_ENCODING);  [CE]  <identifier>  expected  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_ENCODING);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_ENCODING);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
162	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATED);  [CE]  <identifier>  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATED);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATED);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
163	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding.getBytes());  [CE]  <identifier>  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding.getBytes());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding.getBytes());	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
164	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  offsets.length);  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  offsets.length);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  offsets.length);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
165	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  cdOffset);  [CE]  <identifier>  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  cdOffset);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  cdOffset);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
166	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  cdLength);  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  cdLength);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  cdLength);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
167	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entry  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
168	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entry  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
169	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entry.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entry.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entry  ==  null  ||  entry.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
170	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  If(entry  ==  null  ||  entries.size()!=  0)  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  If(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    If(entry  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
171	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry!=  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry!=  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entry!=  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
172	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()  >>  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entry  ==  null  ||  entries.size()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
173	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()!=  1)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entry  ==  null  ||  entries.size()!=  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entry  ==  null  ||  entries.size()!=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
174	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.hasCompressionLevelChanged())  {  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.hasCompressionLevelChanged())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.hasCompressionLevelChanged())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.hasCompressionLevelChanged())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
175	[BUG]  [BUGGY]  if(entry.hasCompressionLevelChanged())  {  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.hasCompressionLevelChanged())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.hasCompressionLevelChanged())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.hasCompressionLevelChanged())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
176	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.hasCompressionLevelChanged())  {  [CE]  cannot  find  symbol  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.hasCompressionLevelChanged())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.hasCompressionLevelChanged())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.hasCompressionLevelChanged())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
177	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.hasCompressionLevelChanged())  {  [CE]  cannot  find  symbol  [FE]                        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.hasCompressionLevelChanged())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.hasCompressionLevelChanged())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.hasCompressionLevelChanged())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
178	[BUG]  [BUGGY]  if(entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
179	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
180	[BUG]  [BUGGY]  if(entries.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
181	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
182	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	140	11	replace
183	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getClass()!=  getClass())  {  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	140	11	replace
184	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getClass()  ==  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getClass()  ==  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	140	11	replace
185	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getClass()  ==  getClass())  {  [FE]  NullPointerException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getClass()  ==  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getClass()  ==  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	140	11	replace
186	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()  >=  getClass())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()  >=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass()  >=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	140	None	replace
187	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
188	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.getClass()!=  getClass())  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
189	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getRawClass())  {  [CE]  cannot  find  symbol  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getRawClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass()!=  getRawClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
190	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
191	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.getClass()!=  getClass())  {  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
192	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries!=  null  ||  entries.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries!=  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    1)    {    if(entries!=  null  ||  entries.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
193	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries  ==  null  ||  entries.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries  ==  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    1)    {    if(entries  ==  null  ||  entries.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
194	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  If(entries!=  null  ||  entries.size()  ==  1)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  If(entries!=  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    1)    {    If(entries!=  null  ||  entries.size()  ==  1)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
195	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries  >=  null  ||  entries.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries  >=  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    1)    {    if(entries  >=  null  ||  entries.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
196	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries!=  null  ||  entries.size()  >=  1)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries!=  null  ||  entries.size()  >=  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    1)    {    if(entries!=  null  ||  entries.size()  >=  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
197	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries!=  null  ||  entries.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  if(entries!=  null  ||  entries.size()  ==  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    1)    {    if(entries!=  null  ||  entries.size()  ==  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
198	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	84	11	replace
199	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	84	11	replace
200	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	84	11	replace
201	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	84	11	replace
202	[BUG]  [BUGGY]  if(entry.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
203	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.size()  >=  0)  {	  if(entry    ==    null    ||    entries.size()!=    0)    {    	compilable	  [FE]  IOException  	24	11	replace
204	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >=  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()  >=  0)  {	  if(entry    ==    null    ||    entries.size()!=    0)    {    	compilable	  [FE]  IOException  	24	11	replace
205	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.size()!=  0)  {  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.size()!=  0)  {	  if(entry    ==    null    ||    entries.size()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
206	[BUG]  [BUGGY]  OutputStream  out  =  entry.getErrorStream();  [CE]  <identifier>  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getErrorStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getErrorStream();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
207	[BUG]  [BUGGY]  OutputStream  out  =  entry.getEncoding();  [CE]  <identifier>  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getEncoding();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getEncoding();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
208	[BUG]  [BUGGY]  OutputStream  out  =  entry.getAsIOFile();  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getAsIOFile();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getAsIOFile();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
209	[BUG]  [BUGGY]  OutputStream  out  =  entry.getAsIOException();  [CE]  <identifier>  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getAsIOException();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getAsIOException();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
210	[BUG]  [BUGGY]  OutputStream  out  =  entry.getInputStream();  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getInputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getInputStream();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
211	[BUG]  [BUGGY]  OutputStream  out  =  entries.getOutputStream();  [CE]  <identifier>  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entries.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entries.getOutputStream();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
212	[BUG]  [BUGGY]  if(writeCentralFileHeader  ==  null)  {  [CE]  cannot  find  symbol  writeCentralFileHeader  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(writeCentralFileHeader  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(writeCentralFileHeader  ==  null)  {	  if(entry    ==    null)    {    if(entry    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  writeCentralFileHeader	87	None	replace
213	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [CE]  ')'  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  ')'  expected	168	None	replace
214	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [CE]  ')'  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  ')'  expected	168	None	replace
215	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  ')'  expected	168	None	replace
216	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMeth  [CE]  ')'  expected  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMeth  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMeth	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  ')'  expected	168	None	replace
217	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMet  [CE]  ')'  expected  [FE]                                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMet  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMet	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  ')'  expected	168	None	replace
218	[BUG]  [BUGGY]  if(!b.isEnabled())  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!b.isEnabled())  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!b.isEnabled())  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  ')'  expected	168	None	replace
219	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
220	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
221	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    If(entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
222	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  >=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  >=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  >=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
223	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  >>  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  >>  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  >>  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
224	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    If(entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
225	[BUG]  [BUGGY]  if(entries.getValue()  ==  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getValue()  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getValue()  ==  null  ||  entries.size()  ==  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
226	[BUG]  [BUGGY]  if(entry.getValue()!=  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()!=  null  ||  entries.size()  ==  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
227	[BUG]  [BUGGY]  if(entry.getKey()  ==  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()  ==  null  ||  entries.size()  ==  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
228	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()!=  0)  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entries.size()!=  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
229	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()  ==  1)  {  [CE]  cannot  find  symbol  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entries.size()  ==  1)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
230	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entries.size()  >=  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
231	[BUG]  [BUGGY]  if(entry.getValue()!=  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()!=  null  ||  entry.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()!=  null  ||  entry.getValue()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
232	[BUG]  [BUGGY]  if(entry.getKey()  ==  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()  ==  null  ||  entry.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()  ==  null  ||  entry.getValue()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
233	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getKey()!=  null)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getKey()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entry.getKey()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
234	[BUG]  [BUGGY]  if(entry.getName()  ==  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getName()  ==  null  ||  entry.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getName()  ==  null  ||  entry.getValue()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
235	[BUG]  [BUGGY]  if(entry.getValue()!=  null  ||  entry.getKey()!=  null)  {  [CE]  cannot  find  symbol  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()!=  null  ||  entry.getKey()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()!=  null  ||  entry.getKey()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
236	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  &&  entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED    ||    entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
237	[BUG]  [BUGGY]  [FE]  IOException  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  [BUGGY]    null)  {  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(offsets!=  null)  {	  if(entries    ==    null)    {    if(entries    	compilable	  [FE]  IOException  	10	11	replace
238	[BUG]  [BUGGY]  if(offsets!=  null)  {  [FE]  IOException  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  [BUGGY]    null)  {  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {	  if(entries    ==    null)    {    if(entries    	compilable	  [FE]  IOException  	10	11	replace
239	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getKey()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getKey()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getKey()  ==  null)  {	  if(entry!=    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
240	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entries.getValue()  ==  null)  {	  if(entry!=    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
241	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.getValue()  ==  null)  {	  if(entry!=    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
242	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	66	None	replace
243	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATED))  {  [CE]  cannot  find  symbol  Feature  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATED))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATED))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	66	None	replace
244	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_COMPRESSION))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	66	None	replace
245	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.UNQUOTED_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.UNQUOTED_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.UNQUOTED_ENCODING))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	66	None	replace
246	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATER_BLOCK_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]                        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATER_BLOCK_SIZE))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATER_BLOCK_SIZE))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	66	None	replace
247	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasCompressionLevelChanged)  {  [CE]  cannot  find  symbol  Feature  [FE]                          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasCompressionLevelChanged)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasCompressionLevelChanged)  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	66	None	replace
248	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATED))  {  [CE]  cannot  find  symbol  Feature  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATED))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATED))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
249	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.UNQUOTED_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.UNQUOTED_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.UNQUOTED_ENCODING))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
250	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
251	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()    ||    entries.size()    >    0)    {    if(!entries.isEmpty()  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	161	None	add
252	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  If(!entries.isEmpty()  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  If(!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()    ||    entries.size()    >    0)    {    If(!entries.isEmpty()  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
253	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  if(!entries.isEmpty()  ||  entries.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  if(!entries.isEmpty()  ||  entries.size()  >  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()    ||    entries.size()    >    0)    {    if(!entries.isEmpty()  ||  entries.size()  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	161	None	add
254	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  if(!entries.isEmpty()  ||  entries.size()  >  2)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  if(!entries.isEmpty()  ||  entries.size()  >  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()    ||    entries.size()    >    0)    {    if(!entries.isEmpty()  ||  entries.size()  >  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	161	None	add
255	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  &&  entry.getMethod()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	110	10	replace
256	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getMethod()  ==  DEFLATED)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entry.getMethod()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	110	10	replace
257	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getParent()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getParent()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getParent()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
258	[BUG]  [BUGGY]  [FE]  IOException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getSize()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getSize()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	110	11	replace
259	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getSize()  ==  DEFLATED)  {  [FE]  IOException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getSize()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getSize()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	110	11	replace
260	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getName()  ==  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getName()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getName()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	110	None	replace
261	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry  ==  null  ||  entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
262	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry!=  null  ||  entry.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry!=  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry!=  null  ||  entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
263	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  If(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  If(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    If(entry  ==  null  ||  entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  ';'  expected	139	None	add
264	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entry.getClass()  >=  getClass())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entry.getClass()  >=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry  ==  null  ||  entry.getClass()  >=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
265	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entries.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry  ==  null  ||  entries.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
266	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  >=  null  ||  entry.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  >=  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry  >=  null  ||  entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
267	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entry.getClass()  >>  getClass())  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  entry.getClass()  >>  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry  ==  null  ||  entry.getClass()  >>  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
268	[BUG]  [BUGGY]  if(!entries.getValue().equals( "   "))  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().equals( "   "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().equals( "   "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
269	[BUG]  [BUGGY]  if(!entry.getKey().equals( "   "))  {  [CE]  cannot  find  symbol  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entry.getKey().equals( "   "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getKey().equals( "   "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
270	[BUG]  [BUGGY]  if(!entry.getValue().equals( "/ "))  {  [CE]  cannot  find  symbol  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entry.getValue().equals( "/ "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getValue().equals( "/ "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
271	[BUG]  [BUGGY]  if(!entry.getValue().equals( "n "))  {  [CE]  cannot  find  symbol  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entry.getValue().equals( "n "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getValue().equals( "n "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
272	[BUG]  [BUGGY]  if(!entry.getValue().equals( "* "))  {  [CE]  cannot  find  symbol  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entry.getValue().equals( "* "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getValue().equals( "* "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
273	[BUG]  [BUGGY]  if(!entry.getValue().equals( "_ "))  {  [CE]  cannot  find  symbol  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entry.getValue().equals( "_ "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getValue().equals( "_ "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
274	[BUG]  [BUGGY]  if(entry  <  null  ||  entries.size()  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  <  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  <  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry    ==    null    ||    entries.size()!=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	37	None	replace
275	[BUG]  [BUGGY]  if(entry  <  null  ||  entries.size()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  <  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  <  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    if(entry    >=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	104	None	replace
276	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getKey();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getKey();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.getKey();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
277	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry!=  null?  entry.getValue()  :  DEFLATED;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry!=  null?  entry.getValue()  :  DEFLATED;  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry!=  null?  entry.getValue()  :  DEFLATED;	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
278	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entries.get(entry.getValue());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entries.get(entry.getValue());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entries.get(entry.getValue());	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
279	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entries.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entries.getValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entries.getValue();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
280	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getValue()  +  1;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getValue()  +  1;  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.getValue()  +  1;	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
281	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getDeflate();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getDeflate();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.getDeflate();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
282	[BUG]  [BUGGY]  when(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  when(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	when(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    when(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
283	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  when(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  when(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())  {  when(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    when(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
284	[BUG]  [BUGGY]  if(entries!=  null)  {  when(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  when(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  when(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    when(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
285	[BUG]  [BUGGY]  When(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  When(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	When(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    when(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
286	[BUG]  [BUGGY]  if(entry.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    if(entry    ==    null    ||    entry.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
287	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [CE]  ')'  expected  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  ')'  expected	164	None	replace
288	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMetho  [CE]  ')'  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMetho	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  ')'  expected	164	None	replace
289	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  =  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  =  0)  {	  if(entry    ==    null    ||    entries.size()    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
290	[BUG]  [BUGGY]  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
291	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
292	[BUG]  [BUGGY]  [FE]  IOException  [FE]          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
293	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
294	[BUG]  [BUGGY]  [FE]  IOException  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
295	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
296	[BUG]  [BUGGY]  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
297	[BUG]  [BUGGY]  if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
298	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	131	10	replace
299	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  java.io.IOException:  central  directory  is  empty  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	131	10	replace
300	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
301	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
302	[BUG]  [BUGGY]  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
303	[BUG]  [BUGGY]  if(entries  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
304	[BUG]  [BUGGY]  if(entry  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
305	[BUG]  [BUGGY]  if(entry!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
306	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.getValue()  ==  null)  {	  if(entries.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
307	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.getValue()  ==  null)  {	  if(entries.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
308	[BUG]  [BUGGY]  if(entries.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getValue()!=  null)  {	  if(entries.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
309	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries!=  null  ||  entries.size()  <  2)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries!=  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    if(entries!=  null  ||  entries.size()  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
310	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  ==  null  ||  entries.size()  <  2)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  ==  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    if(entries  ==  null  ||  entries.size()  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
311	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  If(entries!=  null  ||  entries.size()  <  2)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  If(entries!=  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    If(entries!=  null  ||  entries.size()  <  2)  {	  	non-compiled	[CE]  ';'  expected	158	None	add
312	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  >=  null  ||  entries.size()  <  2)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  >=  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    if(entries  >=  null  ||  entries.size()  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
313	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  >>  null  ||  entries.size()  <  2)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  >>  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    if(entries  >>  null  ||  entries.size()  <  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
314	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  [BUGGY]  null  ||  entries.size()  <  2)  {  [CE]  ')'  expected  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries  [BUGGY]  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    if(entries  [BUGGY]  null  ||  entries.size()  <  2)  {	  	non-compiled	[CE]  ')'  expected	158	None	add
315	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  &&  entry.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	138	None	replace
316	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  &&  entry.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	138	None	replace
317	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	138	None	replace
318	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	138	None	replace
319	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	138	None	replace
320	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATER_BLOCK_SIZE)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                  NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	138	None	replace
321	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())  {  while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
322	[BUG]  [BUGGY]  if(entries!=  null)  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
323	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||!entries.isEmpty())  {  while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
324	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	111	11	replace
325	[BUG]  [BUGGY]  while(!entries.isEmpty())  {  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	111	11	replace
326	[BUG]  [BUGGY]  if(!unclosed.isEmpty())  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!unclosed.isEmpty())  {  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!unclosed.isEmpty())  {  while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
327	[BUG]  [BUGGY]  if(cdOffset!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset!=  null)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	70	None	replace
328	[BUG]  [BUGGY]  if(cdOffset  ==  null  ||!cdOffset.isEmpty())  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  ==  null  ||!cdOffset.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null  ||!cdOffset.isEmpty())  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	70	None	replace
329	[BUG]  [BUGGY]  if(cdOffset!=  null  ||!cdOffset.isEmpty())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset!=  null  ||!cdOffset.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset!=  null  ||!cdOffset.isEmpty())  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	70	None	replace
330	[BUG]  [BUGGY]  if(cdOffset!=  null  ||  cdOffset.length()  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset!=  null  ||  cdOffset.length()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset!=  null  ||  cdOffset.length()  ==  0)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	70	None	replace
331	[BUG]  [BUGGY]  if(cdOffset  ==  null  ||  cdOffset.length()  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  ==  null  ||  cdOffset.length()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null  ||  cdOffset.length()  ==  0)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	70	None	replace
332	[BUG]  [BUGGY]  if(cdOffset  ==  null  ||  cdLength  <  entries.length)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  ==  null  ||  cdLength  <  entries.length)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null  ||  cdLength  <  entries.length)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	70	None	replace
333	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
334	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  	non-compiled	[CE]  ';'  expected	81	None	add
335	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  EFS_FLAG)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
336	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
337	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  EFS_FLAG  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  EFS_FLAG  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getMethod()  ==  EFS_FLAG  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
338	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  EFS_FLAG)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  EFS_FLAG)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
339	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >    0)    {    if(entries  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
340	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >    0)    {    if(entries!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
341	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  If(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  If(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >    0)    {    If(entries  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
342	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  >=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  >=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >    0)    {    if(entries  >=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
343	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entry.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >    0)    {    if(entries  ==  null  ||  entry.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
344	[BUG]  [BUGGY]  if(entryTypes!=  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  entryTypes  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entryTypes!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entryTypes!=  null  ||  entries.size()  ==  0)  {	  if(entries!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  entryTypes	21	None	replace
345	[BUG]  [BUGGY]  if(entrys!=  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  entrys  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null  ||  entries.size()  ==  0)  {	  if(entries!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  entrys	21	None	replace
346	[BUG]  [BUGGY]  If(entry  ==  null  ||  entries.size()  <  0)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entries.size()  <  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
347	[BUG]  [BUGGY]  If(entry  ==  null  ||  entries.size()!=  0)  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entries.size()!=  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
348	[BUG]  [BUGGY]  If(entry  ==  null  ||  entries.size()  >=  0)  {  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entries.size()  >=  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
349	[BUG]  [BUGGY]  if(cdOffset  ==  null)  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  ==  null)  {  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null)  {  If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
350	[BUG]  [BUGGY]  if(entry  ==  null)  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
351	[BUG]  [BUGGY]  if(entry!=  null)  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
352	[BUG]  [BUGGY]  If(entries!=  null)  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
353	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.length()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.length()  ==  0)  {	  if(entry    ==    null    ||    entry.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
354	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getKey()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getKey()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getKey()  ==  0)  {	  if(entry    ==    null    ||    entry.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
355	[BUG]  [BUGGY]  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  &&  entries.size()  >  0)  {	  if(entry!=    null    &&    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	171	11	replace
356	[BUG]  [BUGGY]  if(entry  ==  null  &&  entries.size()  >  0)  {  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  &&  entries.size()  >  0)  {	  if(entry!=    null    &&    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	171	11	replace
357	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()!=    0)    {    if(entries  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
358	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries!=  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries!=  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()!=    0)    {    if(entries!=  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
359	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()!=    0)    {    if(entries  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
360	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  If(entries  ==  null  ||  entries.size()!=  0)  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  If(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()!=    0)    {    If(entries  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  ';'  expected	145	None	add
361	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()  >>  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()!=    0)    {    if(entries  ==  null  ||  entries.size()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
362	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()!=    0)    {    if(entries!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
363	[BUG]  [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!etries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
364	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||!etries.isEmpty())  {  [CE]  cannot  find  symbol  etries  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||!etries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||!etries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!etries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  etries	4	None	replace
365	[BUG]  [BUGGY]  if(!unclosed.isEmpty())  {  [CE]  cannot  find  symbol  unclosed  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!unclosed.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!unclosed.isEmpty())  {	  if(!entries.isEmpty())    {    if(!etries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  unclosed	4	None	replace
366	[BUG]  [BUGGY]  if(entries!=  null)  {  if(!etries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!etries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(!etries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!etries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
367	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.isDirectory())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry  ==  null  ||  entry.isDirectory())  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
368	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry!=  null  ||  entry.isDirectory())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry!=  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry!=  null  ||  entry.isDirectory())  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
369	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  If(entry  ==  null  ||  entry.isDirectory())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  If(entry  ==  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    If(entry  ==  null  ||  entry.isDirectory())  {	  	non-compiled	[CE]  ';'  expected	68	None	add
370	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.getDirectory())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.getDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry  ==  null  ||  entry.getDirectory())  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
371	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.getName().equals( "Directory "))  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.getName().equals( "Directory "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry  ==  null  ||  entry.getName().equals( "Directory "))  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
372	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entries.isDirectory())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entries.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry  ==  null  ||  entries.isDirectory())  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
373	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.getName().equals( "directory "))  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.getName().equals( "directory "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry  ==  null  ||  entry.getName().equals( "directory "))  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
374	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.hasDirectory())  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  if(entry  ==  null  ||  entry.hasDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.isDirectory())    {    if(entry  ==  null  ||  entry.hasDirectory())  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
375	[BUG]  [BUGGY]  If(entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
376	[BUG]  [BUGGY]  If(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
377	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    if(entries  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
378	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    if(entries  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
379	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries!=  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries!=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    if(entries!=  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
380	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  >>  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    if(entries  ==  null  ||  entries.size()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
381	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  If(entries  ==  null  ||  entries.size()  >=  0)  {  [CE]  ';'  expected  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  If(entries  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    If(entries  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
382	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  [Delete]  0)  {  [CE]  ')'  expected  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  [Delete]  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    if(entries  ==  null  ||  entries.size()  [Delete]  0)  {	  	non-compiled	[CE]  ')'  expected	148	None	add
383	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.get(entry.getKey());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.get(entry.getKey());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entries.get(entry.getKey());	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
384	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.get(0);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.get(0);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entries.get(0);	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
385	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAncestor();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAncestor();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getAncestor();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
386	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.deflate();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.deflate();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.deflate();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
387	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAs();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAs();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getAs();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
388	[BUG]  [BUGGY]  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
389	[BUG]  [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
390	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
391	[BUG]  [BUGGY]  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.n ");	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
392	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getValue()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getValue()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getValue()  ==  DEFLATED)  {	  if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
393	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	80	None	replace
394	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getClass()!=  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	155	None	replace
395	[BUG]  [BUGGY]  if(entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getClass()!=  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	155	None	replace
396	[BUG]  [BUGGY]  if(entry.getClass()  ==  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getClass()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getClass()  ==  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	155	None	replace
397	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getClass()  ==  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getClass()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getClass()  ==  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	155	None	replace
398	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getKey()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getKey()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getKey()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
399	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.getValue()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.getValue()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.getValue()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
400	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getValue()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getValue()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getValue()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
401	[BUG]  [BUGGY]  if(entries  ==  null  ||  entry.getValue()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.getValue()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entry.getValue()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
402	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getKey()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getKey()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getKey()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
403	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.getValue()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.getValue()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.getValue()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
404	[BUG]  [BUGGY]  if(!entries.getKey().isEmpty())  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getKey().isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getKey().isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
405	[BUG]  [BUGGY]  if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
406	[BUG]  [BUGGY]  if(!entries.getValue().isEmpty()  ||!entries.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().isEmpty()  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().isEmpty()  ||!entries.isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
407	[BUG]  [BUGGY]  if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
408	[BUG]  [BUGGY]  if(!entries.getValue().isEmpty()  ||!offsets.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().isEmpty()  ||!offsets.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().isEmpty()  ||!offsets.isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
409	[BUG]  [BUGGY]  if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
410	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getValue()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getValue()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getValue()  ==  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
411	[BUG]  [BUGGY]  if(entry.getValue()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
412	[BUG]  [BUGGY]  if(entry.getKey()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()  ==  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
413	[BUG]  [BUGGY]  if(entry.getKey()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()!=  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getKey()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
414	[BUG]  [BUGGY]  for(!entries.isEmpty())  {  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  for(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	for(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
415	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  for(!entries.isEmpty())  {  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  for(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())  {  for(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
416	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
417	[BUG]  [BUGGY]  if(entries.isEmpty())  {  for(!entries.isEmpty())  {  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.isEmpty())  {  for(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.isEmpty())  {  for(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
418	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(int  i  =  0;  i  <  entries.size();  i++)  {  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  for(int  i  =  0;  i  <  entries.size();  i++)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  for(int  i  =  0;  i  <  entries.size();  i++)  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
419	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  <  0)  {	  if(entries!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	96	11	replace
420	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  0)  {	  if(entries!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	96	11	replace
421	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.isEmpty())  {	  if(entries    ==    null    ||!entries.isEmpty())    {    	compilable	  [FE]  IOException  	64	1	replace
422	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.isEmpty())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.isEmpty())  {	  if(entries    ==    null    ||!entries.isEmpty())    {    	compilable	  [FE]  IOException  	64	1	replace
423	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  <  1)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	11	replace
424	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  1)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  1)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	11	replace
425	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  =  2)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  =  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  =  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
426	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.size()  <  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	1	replace
427	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  <  2)  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  <  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	1	replace
428	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  2  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	159	None	replace
429	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  2  ||  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	159	None	replace
430	[BUG]  [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.get  [CE]  ')'  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.get  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  for(Iterator  i  =  offsets.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.get	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
431	[BUG]  [BUGGY]  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
432	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
433	[BUG]  [BUGGY]  [FE]  IOException  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
434	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
435	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
436	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
437	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
438	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(entries  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
439	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	134	10	replace
440	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  java.io.IOException:  central  directory  is  empty  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	134	10	replace
441	[BUG]  [BUGGY]  [FE]  IOException  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
442	[BUG]  [BUGGY]  if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  if(offsets  ==  null)  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
443	[BUG]  [BUGGY]  if(entries  ==  null  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entry.getValue()  ==  null)  {	  if(entry    ==    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
444	[BUG]  [BUGGY]  If(entry!=  null  ||  entry.size()  ==  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry!=  null  ||  entry.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry!=  null  ||  entry.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
445	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
446	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
447	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	75	None	add
448	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  >=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  >=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  >=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
449	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
450	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getParent()!=  DEFLATED  ||  entry.getParent()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getParent()!=  DEFLATED  ||  entry.getParent()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getParent()!=  DEFLATED  ||  entry.getParent()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
451	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getName()!=  DEFLATED  ||  entry.getName()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getName()!=  DEFLATED  ||  entry.getName()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getName()!=  DEFLATED  ||  entry.getName()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
452	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATED))  {  [CE]  cannot  find  symbol  Feature  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATED))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATED))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
453	[BUG]  [BUGGY]  if(!offsets.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!offsets.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!offsets.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
454	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_COMPRESSION))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
455	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  &&  entries.size()  >  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
456	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  entries.size()  >  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  entries.size()  >  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
457	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||  entries.size()  ==  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
458	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  ==  0)  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  entries.size()  ==  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
459	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||  entries.size()  >  1)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
460	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  1)  {  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  entries.size()  >  1)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
461	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
462	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
463	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||  entries.size()!=  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
464	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()!=  0)  {  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  entries.size()!=  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
465	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||  entries.size()  >=  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
466	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >=  0)  {  [FE]  IOException  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  entries.size()  >=  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
467	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.getValue()!=  null)  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
468	[BUG]  [BUGGY]  if(entries  ==  null.getValue())  {  [CE]  <null>  cannot  be  dereferenced  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null.getValue())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null.getValue())  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	117	None	replace
469	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.getValue()!=  null)  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
470	[BUG]  [BUGGY]  if(entries!=  null.getKey())  {  [CE]  <null>  cannot  be  dereferenced  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null.getKey())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null.getKey())  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	117	None	replace
471	[BUG]  [BUGGY]  if(entryTypes!=  null  &&  entries.size()  >  0)  {  [CE]  cannot  find  symbol  entryTypes  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entryTypes!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entryTypes!=  null  &&  entries.size()  >  0)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  entryTypes	157	None	replace
472	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	76	11	replace
473	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	76	11	replace
474	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	76	11	replace
475	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	76	11	replace
476	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getCompressedSize()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	76	11	replace
477	[BUG]  [BUGGY]  if(entry.getCompressedSize()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getCompressedSize()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	76	11	replace
478	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
479	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
480	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
481	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    If(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	79	None	add
482	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  ==  null  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  ==  null  ||  entries.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
483	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  >=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  >=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  >=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
484	[BUG]  [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  <identifier>  expected	169	None	replace
485	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }  [CE]  cannot  find  symbol  entrys  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  cannot  find  symbol  entrys	169	None	replace
486	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu  [CE]  ')'  expected  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
487	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu  [CE]  ')'  expected  [FE]                                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
488	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue  [CE]  ')'  expected  [FE]                                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
489	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue  [CE]  ')'  expected  [FE]                                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
490	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream().getOutputStream();  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream().getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream().getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
491	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(false);  [CE]  <identifier>  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(false);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream(false);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
492	[BUG]  [BUGGY]  OutputStream  out  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  this.getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
493	[BUG]  [BUGGY]  OutputStream  out  =  o.getOutputStream();  [CE]  <identifier>  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  o.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  o.getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
494	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(true);  [CE]  <identifier>  expected  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(true);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream(true);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
495	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  offsets.length);  [CE]  ';'  expected  [FE]                                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(),  offsets.length);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream(),  offsets.length);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  ';'  expected	49	None	replace
496	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries!=  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries!=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    if(entries!=  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
497	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries  ==  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    if(entries  ==  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
498	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  If(entries!=  null  ||!entries.isEmpty())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  If(entries!=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    If(entries!=  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	60	None	add
499	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries  >=  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries  >=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    if(entries  >=  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
500	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries  >>  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entries  >>  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    if(entries  >>  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
501	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  If(entries  ==  null  ||!entries.isEmpty())  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  If(entries  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    If(entries  ==  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	60	None	add
502	[BUG]  [BUGGY]  if(entry.getValue()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()!=  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
503	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  cannot  find  symbol  entrys  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  cannot  find  symbol  entrys	163	None	replace
504	[BUG]  [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  <identifier>  expected  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  <identifier>  expected	163	None	replace
505	[BUG]  [BUGGY]  if(entries  ==  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  method  writeCentralFileHeader  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  method  writeCentralFileHeader  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;	163	None	replace
506	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.entrySet().iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  cannot  find  symbol  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.entrySet().iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entry.entrySet().iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
507	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  cannot  find  symbol  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entry.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
508	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.getValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entries.getValue();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
509	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getValue()  +  1;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getValue()  +  1;  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getValue()  +  1;	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
510	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.get(entry.getValue());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.get(entry.getValue());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entries.get(entry.getValue());	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
511	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.get(entry.getKey());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entries.get(entry.getKey());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entries.get(entry.getKey());	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
512	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAncestor();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAncestor();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAncestor();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
513	[BUG]  [BUGGY]  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entries  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
514	[BUG]  [BUGGY]  if(offsets!=  null)  {  If(offsets  ==  null)  {  [CE]  ';'  expected  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  If(offsets  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  If(offsets  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
515	[BUG]  [BUGGY]  if(entry  ==  null)  {  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  If(entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  If(entries  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
516	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    deFLATED)    {    	compilable	  [FE]  NullPointerException  	160	11	replace
517	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATER_BLOCK_SIZE  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    deFLATED)    {    	compilable	  [FE]  NullPointerException  	160	11	replace
518	[BUG]  [BUGGY]  if(entry  >=  null  ||  entries.size()  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  >=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  >=  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    &&    entries.size()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	152	None	replace
519	[BUG]  [BUGGY]  OutputStream  out  =  _out.readLine();  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  _out.readLine();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  _out.readLine();	  OutputStream    out    =    _out.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
520	[BUG]  [BUGGY]  OutputStream  out  =  _out.writeOutputStream();  [CE]  <identifier>  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  _out.writeOutputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  _out.writeOutputStream();	  OutputStream    out    =    _out.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
521	[BUG]  [BUGGY]  OutputStream  out  =  _out.openStream();  [CE]  <identifier>  expected  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  _out.openStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  _out.openStream();	  OutputStream    out    =    _out.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
522	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
523	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
524	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries. ");	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
525	[BUG]  [BUGGY]  if(entry.isEnabled())  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.isEnabled())  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.isEnabled())  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
526	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.n ");	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
527	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    >    0)    {    if(entries!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
528	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    >    0)    {    if(entries  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
529	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  If(entries!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  If(entries!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    >    0)    {    If(entries!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	95	None	add
530	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries  >=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries  >=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    >    0)    {    if(entries  >=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
531	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries  >>  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  if(entries  >>  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    >    0)    {    if(entries  >>  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	95	None	add
532	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  If(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  If(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    >    0)    {    If(entries  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	95	None	add
533	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.getValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entries.getValue();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	45	None	replace
534	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.get(entry.getValue());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entries.get(entry.getValue());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entries.get(entry.getValue());	  Deflater    <    ZipArchiveEntry>    b    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	45	None	replace
535	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getValue()  +  1;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getValue()  +  1;  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getValue()  +  1;	  Deflater    <    ZipArchiveEntry>    b    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	45	None	replace
536	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getClass()!=  getClass())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	112	11	replace
537	[BUG]  [BUGGY]  if(entry.getClass()!=  getClass())  {  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getClass()!=  getClass())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	112	11	replace
538	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getClass()  ==  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getClass()  ==  getClass())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	112	11	replace
539	[BUG]  [BUGGY]  if(entry.getClass()  ==  getClass())  {  [FE]  NullPointerException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getClass()  ==  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getClass()  ==  getClass())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	112	11	replace
540	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	72	11	replace
541	[BUG]  [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	72	11	replace
542	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    ==    0)    {    if(entries  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
543	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    ==    0)    {    if(entries!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
544	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    ==    0)    {    If(entries  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
545	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    ==    0)    {    if(entries  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
546	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    ==    0)    {    if(entries  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
547	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    ==    0)    {    if(entries  ==  null  ||  entries.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
548	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries!=  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    if(entries!=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
549	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  ==  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  ==  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    if(entries  ==  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
550	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entries!=  null  &&  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entries!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    If(entries!=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	156	None	add
551	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  >=  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  >=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    if(entries  >=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
552	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  >>  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  >>  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    if(entries  >>  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
553	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  [BUGGY]  null  &&  entries.size()  >  0)  {  [CE]  ')'  expected  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entries  [BUGGY]  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    if(entries  [BUGGY]  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  ')'  expected	156	None	add
554	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	144	None	replace
555	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(offsets!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	144	11	replace
556	[BUG]  [BUGGY]  if(offsets!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(offsets!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(offsets!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	144	11	replace
557	[BUG]  [BUGGY]  if(entryTypes!=  null  &&  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  entryTypes  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entryTypes!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entryTypes!=  null  &&  entries.size()  ==  0)  {	  if(entries!=    null    &&    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  entryTypes	154	None	replace
558	[BUG]  [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  <identifier>  expected	167	None	replace
559	[BUG]  [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  cannot  find  symbol  entrys  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entrys!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  cannot  find  symbol  entrys	167	None	replace
560	[BUG]  [BUGGY]  if(entries  ==  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  method  writeCentralDirectoryEnd  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  method  writeCentralDirectoryEnd  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;	167	None	replace
561	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.entrySet().iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  cannot  find  symbol  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.entrySet().iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entry.entrySet().iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
562	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  cannot  find  symbol  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entry.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entry.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
563	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    0)    {    if(entries!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
564	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    0)    {    if(entries  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
565	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  If(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  If(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    0)    {    If(entries!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
566	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries  >=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries  >=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    0)    {    if(entries  >=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
567	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    0)    {    if(entries!=  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
568	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    ==    0)    {    if(entries!=  null  ||  entries.size()  ==  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
569	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries!=  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    if(entries!=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
570	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries  ==  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries  ==  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    if(entries  ==  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
571	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  If(entries!=  null  &&  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  If(entries!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    If(entries!=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	153	None	add
572	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries  >=  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries  >=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    if(entries  >=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
573	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries!=  null  &&  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries!=  null  &&  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    if(entries!=  null  &&  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
574	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    if(entries!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
575	[BUG]  [BUGGY]  [FE]  IOException  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries!=  null)  {	  if(entries    ==    null)    {    if(entries    ==    null    ||    entries    ==    null)    {    	compilable	  [FE]  IOException  	133	11	replace
576	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries!=  null)  {  [FE]  IOException  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries!=  null)  {	  if(entries    ==    null)    {    if(entries    ==    null    ||    entries    ==    null)    {    	compilable	  [FE]  IOException  	133	11	replace
577	[BUG]  [BUGGY]  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries  ==  null)  {	  if(entries    ==    null)    {    if(entries    ==    null    ||    entries    ==    null)    {    	compilable	  [FE]  IOException  	133	11	replace
578	[BUG]  [BUGGY]  if(entries!=  null  ||  entries  ==  null)  {  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries  ==  null)  {	  if(entries    ==    null)    {    if(entries    ==    null    ||    entries    ==    null)    {    	compilable	  [FE]  IOException  	133	11	replace
579	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
580	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(true);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(true);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(true);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
581	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(false);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(false);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(false);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
582	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(offsets);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(offsets);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(offsets);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
583	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry.getKey());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry.getKey());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry.getKey());	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
584	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry.getValue());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry.getValue());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entry.getValue());	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
585	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()!=  0)  {	  if(entries    ==    null    ||    entries.size()!=    0)    {    	compilable	  [FE]  IOException  	146	11	replace
586	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()!=  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()!=  0)  {	  if(entries    ==    null    ||    entries.size()!=    0)    {    	compilable	  [FE]  IOException  	146	11	replace
587	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  If(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())  {  If(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    If(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
588	[BUG]  [BUGGY]  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    If(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
589	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  If(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||!entries.isEmpty())  {  If(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    If(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
590	[BUG]  [BUGGY]  if(!unclosed.isEmpty())  {  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!unclosed.isEmpty())  {  If(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!unclosed.isEmpty())  {  If(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    If(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
591	[BUG]  [BUGGY]  if(entries!=  null)  {  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    If(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
592	[BUG]  [BUGGY]  if(entries.getKey()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getKey()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getKey()  ==  null)  {	  if(entry.getKey()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
593	[BUG]  [BUGGY]  if(entry.getKey()!=  null)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()!=  null)  {	  if(entry.getKey()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
594	[BUG]  [BUGGY]  if(entry.getKey()  ==  null  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()  ==  null  ||  entry.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()  ==  null  ||  entry.getValue()  ==  null)  {	  if(entry.getKey()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
595	[BUG]  [BUGGY]  if(entry.getKey()!=  null  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getKey()!=  null  ||  entry.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()!=  null  ||  entry.getValue()  ==  null)  {	  if(entry.getKey()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
596	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATED))  {  [CE]  cannot  find  symbol  Feature  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATED))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATED))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
597	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATER_BLOCK_SIZE))  {  [CE]  cannot  find  symbol  Feature  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATER_BLOCK_SIZE))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATER_BLOCK_SIZE))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
598	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  isEnabled(Feature.AUTO_CLOSE_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  isEnabled(Feature.AUTO_CLOSE_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  isEnabled(Feature.AUTO_CLOSE_COMPRESSION))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
599	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  isEnabled(Feature.DEFAULT_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  isEnabled(Feature.DEFAULT_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  isEnabled(Feature.DEFAULT_COMPRESSION))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
600	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFAULT_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFAULT_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFAULT_COMPRESSION))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
601	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
602	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
603	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
604	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
605	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
606	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
607	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getName()  ==  DEFLATED  ||  entry.getName()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getName()  ==  DEFLATED  ||  entry.getName()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getName()  ==  DEFLATED  ||  entry.getName()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
608	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries  ==  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||!entries.isEmpty())    {    if(entries  ==  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
609	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries!=  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries!=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||!entries.isEmpty())    {    if(entries!=  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
610	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  If(entries  ==  null  ||!entries.isEmpty())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  If(entries  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||!entries.isEmpty())    {    If(entries  ==  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	63	None	add
611	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries  >=  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries  >=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||!entries.isEmpty())    {    if(entries  >=  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
612	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entry  ==  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entry  ==  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||!entries.isEmpty())    {    if(entry  ==  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
613	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
614	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
615	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
616	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  &&  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
617	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
618	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
619	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
620	[BUG]  [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getCompressedSize()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
621	[BUG]  [BUGGY]  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
622	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getEntryCount()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getEntryCount()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entry.getEntryCount()  ==  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
623	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entry.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entry.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entry.size()  ==  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
624	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&  entries.size()  <  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	1	replace
625	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  <  2)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  <  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	1	replace
626	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  >  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	11	replace
627	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  2)  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  >  2)  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	compilable	  [FE]  IOException  	159	11	replace
628	[BUG]  [BUGGY]  if(cdOffset!=  null  ||!cdOffset.equals( " "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset!=  null  ||!cdOffset.equals( " "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset!=  null  ||!cdOffset.equals( " "))  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	70	None	replace
629	[BUG]  [BUGGY]  if(cdOffset!=  null  ||  cdLength  ==  0)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset!=  null  ||  cdLength  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset!=  null  ||  cdLength  ==  0)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	70	None	replace
630	[BUG]  [BUGGY]  if(cdOffset  ==  null  ||!cdOffset.equals( " "))  {  [CE]  bad  operand  types  for  binary  operator  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  ==  null  ||!cdOffset.equals( " "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null  ||!cdOffset.equals( " "))  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	70	None	replace
631	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries!=  null)throw  new  IOException( " ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
632	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(entries  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(entries  ==  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
633	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
634	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getDeflater();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getDeflater();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.getDeflater();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
635	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  _entry.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  _entry.getValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  _entry.getValue();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
636	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getAnchor();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getAnchor();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.getAnchor();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
637	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getValue()  ==  null)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
638	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  if(entry!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    ==    0)    {    if(entry!=  null  &&  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
639	[BUG]  [BUGGY]  if(entryTypes!=  null  ||  entries.size()  >  0)  {  [CE]  cannot  find  symbol  entryTypes  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entryTypes!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entryTypes!=  null  ||  entries.size()  >  0)  {	  if(entries!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  entryTypes	96	None	replace
640	[BUG]  [BUGGY]  if(entries!=  null)  {  for(!entries.isEmpty())  {  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
641	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  for(!entries.isEmpty())  {  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  for(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||!entries.isEmpty())  {  for(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  not  a  statement	5	None	replace
642	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entry!=  null  ||!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  if(entry!=  null  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||!entries.isEmpty())    {    if(entry!=  null  ||!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
643	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries!=  null)  {  [CE]  illegal  start  of  expression  [FE]          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(entries!=  null)  {	  if(entries    ==    null)    {    if(entries!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
644	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entries!=  null)  {  [CE]  illegal  start  of  expression  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED)  {  if(entries!=  null)  {	  if(entries    ==    null)    {    if(entries!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
645	[BUG]  [BUGGY]  if(entries  ==  null)  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
646	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  while(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  while(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    while(!entries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
647	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entry.isDirectory())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  NullPointerException  	69	11	replace
648	[BUG]  [BUGGY]  if(entries  ==  null  ||  entry.isDirectory())  {  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entry.isDirectory())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	compilable	  [FE]  NullPointerException  	69	11	replace
649	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.isDirectory())  {  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.isDirectory())  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
650	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  getClass())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	112	11	replace
651	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  getClass())  {  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  getClass())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  NullPointerException  	112	11	replace
652	[BUG]  [BUGGY]  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  IOException  	74	11	replace
653	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  IOException  	74	11	replace
654	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
655	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	74	11	replace
656	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  if(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    if(!etries.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
657	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
658	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    	compilable	  [FE]  NullPointerException  	82	11	replace
659	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  NullPointerException  	144	11	replace
660	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  NullPointerException  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  NullPointerException  	144	11	replace
661	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	144	10	replace
662	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [FE]  java.io.IOException:  central  directory  is  empty  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    ==    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	144	10	replace
663	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( " ");  }	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
664	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]              NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( " ");  }	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
665	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]                NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
666	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]                  NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)throw  new  IOException( " ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)throw  new  IOException( " ");  }	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
667	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entry.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entry.getValue()  ==  null)  {	  if(entry!=    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
668	[BUG]  [BUGGY]  if(entries!=  null  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entry.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entry.getValue()  ==  null)  {	  if(entry!=    null    ||    entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
669	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
670	[BUG]  [BUGGY]  if(entry  ==  null)  {  If(entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  If(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  If(entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
671	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  EFS_FLAG)  {  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
672	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAnchor();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAnchor();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAnchor();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
673	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getData();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getData();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getData();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
674	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAttributes();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAttributes();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAttributes();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
675	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getValue()!=  EFS_FLAG)  {  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getValue()!=  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getValue()!=  EFS_FLAG)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
676	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()  ==  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getClass()  ==  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
677	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()  ==  getClass())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()  ==  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass()  ==  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
678	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
679	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.getClass()!=  getClass())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.getClass()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	compilable	  [FE]  IOException  	140	11	replace
680	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  [BUGGY]  0)  {  [CE]  ')'  expected  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  if(entries  ==  null  ||  entries.size()  [BUGGY]  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >=    0)    {    if(entries  ==  null  ||  entries.size()  [BUGGY]  0)  {	  	non-compiled	[CE]  ')'  expected	148	None	add
681	[BUG]  [BUGGY]  if(entries  ==  null)  {  when(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  when(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  when(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    when(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
682	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||!entries.hasNext())  {  [CE]  cannot  find  symbol  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||!entries.hasNext())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||!entries.hasNext())  {	  if(!entries.isEmpty())    {    when(!entries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
683	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entry!=  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
684	[BUG]  [BUGGY]  If(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entries!=  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
685	[BUG]  [BUGGY]  If(entry!=  null  &&  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry!=  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
686	[BUG]  [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(!entries.isEmpty())  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	142	None	replace
687	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.hasNext())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  cannot  find  symbol  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(!entries.hasNext())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(!entries.hasNext())  {  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
688	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries  ==  null  ||! "entries.isEmpty())  {  [CE]  unclosed  string  literal  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  if(entries  ==  null  ||! "entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||!entries.isEmpty())    {    if(entries  ==  null  ||! "entries.isEmpty())  {	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
689	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
690	[BUG]  [BUGGY]  if(!bragged)  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!bragged)  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!bragged)  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
691	[BUG]  [BUGGY]  if(!b)  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!b)  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!b)  {  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
692	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMetho  [CE]  ')'  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMetho  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMetho	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
693	[BUG]  [BUGGY]  if(entries.getValue()  ==  null  ||  entries.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getValue()  ==  null  ||  entries.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getValue()  ==  null  ||  entries.getValue()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
694	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getName()!=  null)  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getName()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entry.getName()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
695	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  if(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  if(entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(Entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
696	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  if(entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(Entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
697	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  files.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  cannot  find  symbol  files  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  files.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  files.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  cannot  find  symbol  files	163	None	replace
698	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(entry.next());  }  [CE]  cannot  find  symbol  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(entry.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(entry.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
699	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(out);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(out);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(out);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
700	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entries);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entries);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(entries);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
701	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(def);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(def);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields(def);	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	48	None	replace
702	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  deFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  deFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()!=  deFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
703	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
704	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getEntry()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getEntry()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getEntry()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
705	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries!=  null  &&.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  if(entries!=  null  &&.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&!entries.isEmpty())    {    if(entries!=  null  &&.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
706	[BUG]  [BUGGY]  if(entries  ==  null)  {  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  If(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  If(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    If(!entries.isEmpty())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
707	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED    ||    entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
708	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
709	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getEntry()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getEntry()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getEntry()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
710	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entries    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
711	[BUG]  [BUGGY]  if(!entries.getValue().trim().isEmpty())  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getValue().trim().isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().trim().isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
712	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
713	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
714	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  If(entries!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED)  {  If(entries!=  null)  {	  if(entries!=    null)    {    If(entries!=    null)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
715	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  [Delete]  null  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry  [Delete]  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry  [Delete]  null  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ')'  expected	109	None	add
716	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  if(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()!=    0)    {    if(entries  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
717	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  if(entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()!=    DEFLATED)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
718	[BUG]  [BUGGY]  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	76	11	replace
719	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	76	11	replace
720	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  files.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  cannot  find  symbol  files  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  files.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  files.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  cannot  find  symbol  files	167	None	replace
721	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
722	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  If(entry  ==  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
723	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
724	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getDirectory();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getDirectory();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getDirectory();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
725	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getDataStart();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getDataStart();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getDataStart();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
726	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAstRoot();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAstRoot();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAstRoot();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
727	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
728	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasCompressionLevelChanged)  {  [CE]  cannot  find  symbol  Feature  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasCompressionLevelChanged)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasCompressionLevelChanged)  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
729	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  &&!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	126	10	replace
730	[BUG]  [BUGGY]  if(entries  ==  null  &&!entries.isEmpty())  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  &&!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  &&!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	126	10	replace
731	[BUG]  [BUGGY]  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	110	11	replace
732	[BUG]  [BUGGY]  if(entries!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	110	11	replace
733	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	110	11	replace
734	[BUG]  [BUGGY]  if(entries  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	110	11	replace
735	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAnchor();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAnchor();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getAnchor();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
736	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getDeflater();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getDeflater();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getDeflater();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
737	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAstRoot();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAstRoot();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getAstRoot();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
738	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  &&  entries.size()  ==  0)  {	  if(entries!=    null    &&    entries.size()    ==    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	154	10	replace
739	[BUG]  [BUGGY]  if(entries  ==  null  &&  entries.size()  ==  0)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  &&  entries.size()  ==  0)  {	  if(entries!=    null    &&    entries.size()    ==    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	154	10	replace
740	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!hasCompressionLevelChanged)  {  [BUGGY]    null)  {  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!hasCompressionLevelChanged)  {	  if(entries!=    null)    {    if(entries    	compilable	  [FE]  IOException  	17	11	replace
741	[BUG]  [BUGGY]  if(!hasCompressionLevelChanged)  {  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!hasCompressionLevelChanged)  {  [BUGGY]    null)  {  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!hasCompressionLevelChanged)  {	  if(entries!=    null)    {    if(entries    	compilable	  [FE]  IOException  	17	11	replace
742	[BUG]  [BUGGY]  if(!bragged)  {  [CE]  cannot  find  symbol  bragged  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!bragged)  {  [BUGGY]    null)  {  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!bragged)  {	  if(entries!=    null)    {    if(entries    	non-compiled	[CE]  cannot  find  symbol  bragged	17	None	replace
743	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  ==  0)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  NullPointerException  	90	11	replace
744	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  ==  0)  {  [FE]  NullPointerException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  ==  0)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  NullPointerException  	90	11	replace
745	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  &&  entries.size()  >  0)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	157	10	replace
746	[BUG]  [BUGGY]  if(entries  ==  null  &&  entries.size()  >  0)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  &&  entries.size()  >  0)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	157	10	replace
747	[BUG]  [BUGGY]  if(entry.getEntryType()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getEntryType()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getEntryType()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
748	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&  entries.size()  ==  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	86	10	replace
749	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  1)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  ==  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  ==  1)  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	86	10	replace
750	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  ==  1  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(entries!=    null    ||    entries.size()    ==    1)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	86	None	replace
751	[BUG]  [BUGGY]  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unknown  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unknown  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
752	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unknown  entries.   ");  }  [FE]  IOException  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unknown  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contain  unknown  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
753	[BUG]  [BUGGY]  [FE]  IOException  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
754	[BUG]  [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [FE]  IOException  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	compilable	  [FE]  IOException  	134	11	replace
755	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [CE]  ')'  expected  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  ')'  expected	164	None	replace
756	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [CE]  ')'  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod())    	non-compiled	[CE]  ')'  expected	164	None	replace
757	[BUG]  [BUGGY]  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
758	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  }  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries!=  null)  {  throw  new  IOException( "This  archives  contains  unclosed  entries.n ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
759	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  hasCompressionLevelChanged)  {  [CE]  cannot  find  symbol  Feature  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  hasCompressionLevelChanged)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING)||  hasCompressionLevelChanged)  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
760	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_ENCODING))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
761	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_COMPRESSION))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
762	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getBytes();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getBytes();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getBytes();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	45	None	replace
763	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
764	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
765	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
766	[BUG]  [BUGGY]  OutputStream  out  =  entry.openStream();  [CE]  <identifier>  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.openStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.openStream();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
767	[BUG]  [BUGGY]  OutputStream  out  =  entry.getAsIOF();  [CE]  <identifier>  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getAsIOF();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getAsIOF();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	123	None	replace
768	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entries  ==  null  ||  entry.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entries  ==  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entries  ==  null  ||  entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
769	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
770	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  If(entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  If(entries  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
771	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entries  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
772	[BUG]  [BUGGY]  if(!bragged)  {  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!bragged)  {  If(entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!bragged)  {  If(entries  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
773	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  encoding);  [CE]  <identifier>  expected  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  encoding);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  encoding);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
774	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_BLOCK_SIZE);  [CE]  <identifier>  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_BLOCK_SIZE);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_BLOCK_SIZE);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
775	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_BLOCK_SIG);  [CE]  <identifier>  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_BLOCK_SIG);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFLATER_BLOCK_SIG);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
776	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  _raf);  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  _raf);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  _raf);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  <identifier>  expected	122	None	replace
777	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
778	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
779	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries!=  null  ||  entries.size()  >=  2)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  if(entries!=  null  ||  entries.size()  >=  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    ||    entries.size()    <    2)    {    if(entries!=  null  ||  entries.size()  >=  2)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
780	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getVal  [CE]  ')'  expected  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getVal  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getVal	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	165	None	replace
781	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entries.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  if(entries.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    if(entries.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
782	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null)  {  if(entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null)  {  if(entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
783	[BUG]  [BUGGY]  if(entry!=  null)  {  if(entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  if(entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  if(entries.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
784	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  if(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null    &&    entries.size()    >    0)    {    if(entry!=  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	156	None	add
785	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getAttributeValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getAttributeValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getAttributeValue();	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
786	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getDataStart();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getDataStart();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getDataStart();	  Deflater    <    ZipArchiveEntry>    cdOffset    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	121	None	replace
787	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(offsets);  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(offsets);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream(offsets);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
788	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(out);  [CE]  <identifier>  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(out);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream(out);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
789	[BUG]  [BUGGY]  OutputStream  out  =  createOutputStream();  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  createOutputStream();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  createOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
790	[BUG]  [BUGGY]  OutputStream  out  =  _out.writeEndObject();  [CE]  <identifier>  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  _out.writeEndObject();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  _out.writeEndObject();	  OutputStream    out    =    _out.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
791	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  for(!entries.isEmpty()  ||  entries.size()  >  0)  {  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  for(!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()    ||    entries.size()    >    0)    {    for(!entries.isEmpty()  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  not  a  statement	161	None	add
792	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  when(!entries.isEmpty()  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  when(!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()    ||    entries.size()    >    0)    {    when(!entries.isEmpty()  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	161	None	add
793	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getVal  [CE]  ')'  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getVal  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getVal	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
794	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  this.entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu  [CE]  ')'  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  this.entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  this.entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValu	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
795	[BUG]  [BUGGY]  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    &&    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	152	1	replace
796	[BUG]  [BUGGY]  if(entry  ==  null  &&  entries.size()  ==  0)  {  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    &&    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	152	1	replace
797	[BUG]  [BUGGY]  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	72	11	replace
798	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	72	11	replace
799	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	72	11	replace
800	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	72	11	replace
801	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getName()  ==  null)  {	  if(entry    ==    null    ||    entry.getValue()    ==    null)    {    	compilable	  [FE]  IOException  	42	11	replace
802	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName()  ==  null)  {  [FE]  IOException  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getName()  ==  null)  {	  if(entry    ==    null    ||    entry.getValue()    ==    null)    {    	compilable	  [FE]  IOException  	42	11	replace
803	[BUG]  [BUGGY]  if(!entries.getKey().equals(entry.getKey()))  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.getKey().equals(entry.getKey()))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getKey().equals(entry.getKey()))  {	  if(entry.getKey()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
804	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entry!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
805	[BUG]  [BUGGY]  if(entries  ==  null)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null)  {  If(entry!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
806	[BUG]  [BUGGY]  If(entry!=  null  &&  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry!=  null  &&  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
807	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
808	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||!entries.isEmpty()  ||  entries.size()  >  0)  {	  if(!entries.isEmpty()    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	162	11	replace
809	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.getMethod()  ==  DEFLATED)  {	  if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
810	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getAccessor()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getAccessor()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getAccessor()  ==  DEFLATED)  {	  if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
811	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.getValue())  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getValue())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.getValue())  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
812	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.getValue()  >=  null)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.getValue()  >=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.getValue()  >=  null)  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
813	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
814	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_ENCODING))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_ENCODING))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
815	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
816	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
817	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  If(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  If(entries  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
818	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
819	[BUG]  [BUGGY]  If(entries  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entries  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
820	[BUG]  [BUGGY]  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  IOException  	78	11	replace
821	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  IOException  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  IOException  	78	11	replace
822	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
823	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATER_BLOCK_SIZE)    {    	compilable	  [FE]  NullPointerException  	78	11	replace
824	[BUG]  [BUGGY]  if(!entries.iterator().next().isEmpty())  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.iterator().next().isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.iterator().next().isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
825	[BUG]  [BUGGY]  if(!entries.keySet().isEmpty())  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.keySet().isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.keySet().isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
826	[BUG]  [BUGGY]  if(!entries.size()  >  0  ||  entries.isEmpty())  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.size()  >  0  ||  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.size()  >  0  ||  entries.isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	116	None	replace
827	[BUG]  [BUGGY]  if(!entries.list().isEmpty())  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.list().isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.list().isEmpty())  {	  if(!entries.getValue().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
828	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entries.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entries.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entries.getValue()!=  null)  {	  if(entry.getValue()    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
829	[BUG]  [BUGGY]  if(cdOffset!=  null  ||  cdLength  <  entries.length)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset!=  null  ||  cdLength  <  entries.length)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset!=  null  ||  cdLength  <  entries.length)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	70	None	replace
830	[BUG]  [BUGGY]  if(cdOffset  <  null)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  <  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  <  null)  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	70	None	replace
831	[BUG]  [BUGGY]  if(cdOffset  ==  null  ||!cdLength.equals(written))  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cdOffset  ==  null  ||!cdLength.equals(written))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null  ||!cdLength.equals(written))  {	  if(cdOffset    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	70	None	replace
832	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&  entries.size()!=  0)  {	  if(entries    ==    null    ||    entries.size()!=    0)    {    	compilable	  [FE]  IOException  	146	11	replace
833	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()!=  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()!=  0)  {	  if(entries    ==    null    ||    entries.size()!=    0)    {    	compilable	  [FE]  IOException  	146	11	replace
834	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    if(entries!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  NullPointerException  	115	11	replace
835	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  >  0)  {  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    if(entries!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  NullPointerException  	115	11	replace
836	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entry.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entry.size()  ==  0)  {	  if(entry!=    null    ||    entry.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
837	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAssignedValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getAssignedValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getAssignedValue();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getKey();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	50	None	replace
838	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
839	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  &&  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  &&  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
840	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  If(entry!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
841	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	103	None	replace
842	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getName()!=  null)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()!=    null)    {    	compilable	  [FE]  IOException  	114	11	replace
843	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  null)  {  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getName()!=  null)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()!=    null)    {    	compilable	  [FE]  IOException  	114	11	replace
844	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
845	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [CE]  ')'  expected  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
846	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [CE]  ')'  expected  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
847	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [CE]  ')'  expected  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod    	non-compiled	[CE]  ')'  expected	166	None	replace
848	[BUG]  [BUGGY]  if(entry!=  null  &&  entry.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entry.size()  >  0)  {	  if(entry!=    null    ||    entry.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
849	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  getClass())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	140	None	replace
850	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  getClass())  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()!=  getClass())  {	  if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	140	None	replace
851	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.hasCompressionLevelChanged())  {  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.hasCompressionLevelChanged())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.hasCompressionLevelChanged())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.hasCompressionLevelChanged())    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
852	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  if(entry.getMethod()  ==  DEFLATED)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	130	None	replace
853	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry  >>  null  &&  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  if(entry  >>  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    &&    entries.size()    >    0)    {    if(entry  >>  null  &&  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
854	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getName()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getName()!=  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getKey()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	113	None	replace
855	[BUG]  [BUGGY]  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.size()  <  0)  {	  if(entry    ==    null    ||    entries.size()    <    =    0)    {    	compilable	  [FE]  IOException  	100	11	replace
856	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  <  0)  {  [FE]  IOException  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()  <  0)  {	  if(entry    ==    null    ||    entries.size()    <    =    0)    {    	compilable	  [FE]  IOException  	100	11	replace
857	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
858	[BUG]  [BUGGY]  if(entry!=  null)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  If(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
859	[BUG]  [BUGGY]  If(entry  ==  null  ||  entry.size()  >  0)  {  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry  ==  null  ||  entry.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry  ==  null  ||  entry.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    If(entry    ==    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  ';'  expected	106	None	replace
860	[BUG]  [BUGGY]  if(!entry.getValue().equals( "- "))  {  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entry.getValue().equals( "- "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getValue().equals( "- "))  {	  if(!entry.getValue().equals(   "   "))    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
861	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.AUTO_COMPRESSION))  {  [CE]  cannot  find  symbol  Feature  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.AUTO_COMPRESSION))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.AUTO_COMPRESSION))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
862	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.WRITE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.WRITE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.WRITE_FIELD_NAMES))  {	  if(!entries.isEmpty()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	67	None	replace
863	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [CE]  <identifier>  expected  [FE]          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  if(entries!=  null)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
864	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  <  2)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  [CE]  <identifier>  expected  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  <  2)throw  new  IOException( "This  archives  contains  unclosed  entries. ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  <  2)throw  new  IOException( "This  archives  contains  unclosed  entries. ");	  if(entries    ==    null)    {    if(entries    ==    null)    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	132	None	replace
865	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries. ");  [CE]  <identifier>  expected  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries. ");  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||!entries.isEmpty())throw  new  IOException( "This  archives  contains  unclosed  entries. ");	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  <identifier>  expected	143	None	replace
866	[BUG]  [BUGGY]  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
867	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	compilable	  [FE]  IOException  	131	11	replace
868	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.WRITE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.WRITE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.WRITE_FIELD_NAMES))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
869	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENTRYS))  {  [CE]  cannot  find  symbol  Feature  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENTRYS))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENTRYS))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	65	None	replace
870	[BUG]  [BUGGY]  If(entry.getMethod()!=  DEFLATED)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  If(entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	If(entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
871	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry  >=  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  if(entry  >=  null  ||  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >=    0)    {    if(entry  >=  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
872	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entries  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entries  ==  null)  {	  if(entries    ==    null)    {    If(entries    ==    null)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
873	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getAccess()  ==  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getAccess()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getAccess()  ==  DEFLATED)  {	  if(entry    ==    null    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
874	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  Entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry!=  null  ||  Entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry!=  null  ||  Entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	109	None	add
875	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED    ||    entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
876	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED    ||    entries.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
877	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
878	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  EFS_FLAG)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  EFS_FLAG)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    EFS_FLAG)    {    if(entry.getParent()  ==  DEFLATED  ||  entry.getParent()  ==  EFS_FLAG)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
879	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty()  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&!entries.isEmpty()  ||!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
880	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty()  ||!entries.isEmpty())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&!entries.isEmpty()  ||!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&!entries.isEmpty()  ||!entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	11	replace
881	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&  entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	1	replace
882	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.isEmpty())  {  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.isEmpty())  {	  if(entries!=    null    &&!entries.isEmpty())    {    	compilable	  [FE]  IOException  	126	1	replace
883	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	138	None	replace
884	[BUG]  [BUGGY]  if(entries.getMethod()  ==  DEFLATED  ||  entries.getClass()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.getMethod()  ==  DEFLATED  ||  entries.getClass()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getMethod()  ==  DEFLATED  ||  entries.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
885	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  Entry.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  if(entry  ==  null  ||  Entry.getClass()!=  getClass())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    if(entry  ==  null  ||  Entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
886	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.getValue()  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.getValue()  ==  null)  {	  if(entries.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
887	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.deflate();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.deflate();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.deflate();	  Deflater    <    ZipArchiveEntry>    def    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
888	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  deFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()!=  deFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()!=  deFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
889	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entries.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  if(entries.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED)    {    if(entries.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
890	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  DEFLATED);  [CE]  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(),  DEFLATED);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream(),  DEFLATED);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  	49	None	replace
891	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  {  null  ||  entries.size()  >  0)  {  [CE]  ')'  expected  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  if(entries  {  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null    ||    entries.size()    >    0)    {    if(entries  {  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ')'  expected	119	None	add
892	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.deflate();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.deflate();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.deflate();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
893	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAssignedValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAssignedValue();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAssignedValue();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getValue();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	46	None	replace
894	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.size()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	compilable	  [FE]  IOException  	141	11	replace
895	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  DEFLATED)  {  [FE]  IOException  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()!=  DEFLATED)  {	  if(entry    ==    null    ||    entry.getValue()!=    DEFLATED)    {    	compilable	  [FE]  IOException  	141	11	replace
896	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.getValue())  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.getValue())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.getValue())  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
897	[BUG]  [BUGGY]  if(entries!=  null.getValue()  ||  entries.size()  >  0)  {  [CE]  <null>  cannot  be  dereferenced  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null.getValue()  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null.getValue()  ||  entries.size()  >  0)  {	  if(entries!=    null.getValue())    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	117	None	replace
898	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getClass().isArray()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getClass().isArray()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entry.getClass().isArray()  ==  0)  {	  if(entry.getValue()    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
899	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAssignedFile();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getAssignedFile();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getAssignedFile();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
900	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getInfo();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getInfo();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getInfo();	  Deflater    <    ZipArchiveEntry>    d    =    entry.getDeflater();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	124	None	replace
901	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entry!=  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  ';'  expected	54	None	replace
902	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.size()  <  2)  {	  if(entry    ==    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	26	11	replace
903	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  <  2)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  <  2)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()  <  2)  {	  if(entry    ==    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	26	11	replace
904	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader  [CE]  not  a  statement  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  not  a  statement	169	None	replace
905	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue()  [CE]  ')'  expected  [FE]                                      java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue()  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue()	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralFileHeader(entry.getValue());    }    	non-compiled	[CE]  ')'  expected	169	None	replace
906	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  >  0)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	compilable	  [FE]  NullPointerException  	157	11	replace
907	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  >  0)  {  [FE]  NullPointerException  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  >  0)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	compilable	  [FE]  NullPointerException  	157	11	replace
908	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  1)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  1)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  1)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	157	None	replace
909	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0  ||  entries.size()  >  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0  ||  entries.size()  >  0)  {	  if(entries!=    null    &&    entries.size()    >    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	157	None	replace
910	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  {  null  ||  entries.size()  >  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  if(entry  {  null  ||  entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    >    0)    {    if(entry  {  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	add
911	[BUG]  [BUGGY]  if(entries.size()  >  0)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.size()  >  0)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.size()  >  0)  {  if(!entries.isEmpty())  {  throw  new  IOException( "This  archives  contains  unclosed  entries. ");  }	  if(!entries.isEmpty())    {    if(!entries.isEmpty())    <    throw    new    IOException(   "This    archives    contains    unclosed    entries.       ");    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	142	None	replace
912	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  <  =  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  <  =  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entries.size()  <  =  0)  {	  if(entry!=    null    ||    entries.size()    <    =    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
913	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  <  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()  <  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entries.size()  <  0)  {	  if(entry!=    null    ||    entries.size()    <    =    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
914	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  <  =  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  <  =  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  <  =  0)  {	  if(entry!=    null    ||    entries.size()    <    =    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
915	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  null)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()!=  null)  {	  if(entry    ==    null    ||    entry.getValue()!=    null)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	108	None	replace
916	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  getLength())  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entries.size()!=  getLength())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()!=  getLength())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    getClass())    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
917	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	add
918	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  deFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  deFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  deFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	add
919	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getEntry()  ==  DEFLATED  ||  entry.getEntry()!=  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  if(entry.getEntry()  ==  DEFLATED  ||  entry.getEntry()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()!=    DEFLATED)    {    if(entry.getEntry()  ==  DEFLATED  ||  entry.getEntry()!=  DEFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	add
920	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	163	None	replace
921	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  --i.hasNext();)  {  writeCentralFileHeader(i.next());  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  --i.hasNext();)  {  writeCentralFileHeader(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  --i.hasNext();)  {  writeCentralFileHeader(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralFileHeader(i.next());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	163	None	replace
922	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  deFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	71	None	add
923	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getClass()  ==  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getClass()  ==  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getClass()  ==  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	71	None	add
924	[BUG]  [BUGGY]  OutputStream  out  =  _out.toByteArray();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  _out.toByteArray();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  _out.toByteArray();	  OutputStream    out    =    _out.getOutputStream();    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	51	None	replace
925	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	57	None	replace
926	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED)  {  If(entries  ==  null  ||  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	57	None	replace
927	[BUG]  [BUGGY]  if(entry.getEntry()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        NullPointerException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getEntry()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getEntry()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()    ==    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	128	None	replace
928	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.isDirectory())  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.isDirectory())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.isDirectory())  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
929	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getUnicodeExtraFields();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getUnicodeExtraFields();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getUnicodeExtraFields();	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	48	None	replace
930	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields().clone();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields().clone();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields().clone();	  Deflater    <    ZipArchiveEntry>    d    =    getUnicodeExtraFields();    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	48	None	replace
931	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  DEFLATER_BLOCK_SIZE)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]        IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  DEFLATER_BLOCK_SIZE)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass()!=  DEFLATER_BLOCK_SIZE)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getClass()!=    DEFLATED)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	155	None	replace
932	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getName().endsWith( "/ "))  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getName().endsWith( "/ "))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getName().endsWith( "/ "))  {	  if(entry    ==    null    ||    entry.isDirectory())    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	69	None	replace
933	[BUG]  [BUGGY]  if(entries.size()  >  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.size()  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.size()  >  0)  {	  if(!entries.isEmpty())    {    if(!etries.isEmpty())    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	4	None	replace
934	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >=  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  &&  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entries.size()  >=  0)  {	  if(entry!=    null    ||    entries.size()    >=    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
935	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >=  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >=  0)  {	  if(entry!=    null    ||    entries.size()    >=    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
936	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	167	None	replace
937	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryStart(i.next());  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryStart(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryStart(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	167	None	replace
938	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirEnd(i.next());  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirEnd(i.next());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirEnd(i.next());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    writeCentralDirectoryEnd(i.next());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	167	None	replace
939	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contain  unclosed  entries. ");  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contain  unclosed  entries. ");  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  if(entries.size()  >  0)  {  throw  new  IOException( "This  archives  contain  unclosed  entries. ");  }	  if(entries    ==    null)    {    if(entries    ==    null)    <    throw    new    IOException(   "This    archives    contain    unclosed    entries.       ");    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	134	None	replace
940	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValu	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	165	None	replace
941	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	165	None	replace
942	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEn  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEn  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEn	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    writeCentralDirectoryEnd(entry.getValue());    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	165	None	replace
943	[BUG]  [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	168	None	replace
944	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()	  if(entries!=    null)    {    for(Iterator    i    =    entries.iterator();    i.hasNext();    )    {    ZipArchiveEntry    entry    =(ZipArchiveEntry)i.next();    if(entry.getMethod().equals(entry.getMethod()    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	168	None	replace
945	[BUG]  [BUGGY]  if(entry.getCompressedState()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getCompressedState()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getCompressedState()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	76	None	replace
946	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  ==  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entries!=  null  &&  entries.size()  ==  0)  {	  if(entries!=    null    &&    entries.size()    ==    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	154	None	replace
947	[BUG]  [BUGGY]  if(entries.size()  >  0)  {  for(!entries.isEmpty())  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries.size()  >  0)  {  for(!entries.isEmpty())  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.size()  >  0)  {  for(!entries.isEmpty())  {	  if(!entries.isEmpty())    {    for(!entries.isEmpty())    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	5	None	replace
948	[BUG]  [BUGGY]  if(this.entry.getValue()!=  null)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.entry.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(this.entry.getValue()!=  null)  {	  if(entry.getValue()!=    null)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
949	[BUG]  [BUGGY]  if(list.getValue()!=  null)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(list.getValue()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(list.getValue()!=  null)  {	  if(entry.getValue()!=    null)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
950	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATER_BLOCK_SIG))  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATER_BLOCK_SIG))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING,  DEFLATER_BLOCK_SIG))  {	  if(!entries.isEmpty()    &&    isEnabled(Feature.AUTO_CLOSE_ENCODING))    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
951	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(entries.size());  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(entries.size());  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(entries.size());	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	122	None	replace
952	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(comment);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(comment);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(comment);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	122	None	replace
953	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFAULT_ENCODING);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFAULT_ENCODING);  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding,  DEFAULT_ENCODING);	  OutputStream    out    =    new    FileOutputStream(zipEncoding);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	122	None	replace
954	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getData();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getData();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getData();	  Deflater    <    ZipArchiveEntry>    b    =    entry.getValue();    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	45	None	replace
955	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()!=  0)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry!=  null  ||  entries.size()!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entries.size()!=  0)  {	  if(entry    ==    null    ||    entries.size()!=    0)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
956	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getKey()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]          IOException      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry  ==  null  ||  entry.getKey()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getKey()  ==  DEFLATED)  {	  if(entry    ==    null)    {    if(entry    ==    null    ||    entry.getValue()    ==    DEFLATED)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	88	None	replace
957	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  DEFLATED.equals(entry.getKey()))  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  DEFLATED.equals(entry.getKey()))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  2  ||  DEFLATED.equals(entry.getKey()))  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	159	None	replace
958	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  DEFLATED.equals(entry.getValue()))  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]      IOException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entries!=  null  ||  entries.size()  <  2  ||  DEFLATED.equals(entry.getValue()))  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  2  ||  DEFLATED.equals(entry.getValue()))  {	  if(entries!=    null    ||    entries.size()    <    2)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	159	None	replace
959	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getClass()!=  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getClass()!=  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getClass()!=  DEFLATED  ||  entry.getClass()  ==  DEFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	75	None	add
960	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getEntry()!=  DEFLATED  ||  entry.getEntry()  ==  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]      NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  if(entry.getEntry()!=  DEFLATED  ||  entry.getEntry()  ==  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=    DEFLATED    ||    entry.getMethod()    ==    DEFLATED)    {    if(entry.getEntry()!=  DEFLATED  ||  entry.getEntry()  ==  DEFLATED)  {	  	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	75	None	add
961	[BUG]  [BUGGY]  OutputStream  out  =  entry.getEntry();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getEntry();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getEntry();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	123	None	replace
962	[BUG]  [BUGGY]  OutputStream  out  =  entry.getAscii();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  entry.getAscii();  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getAscii();	  OutputStream    out    =    entry.getOutputStream();    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	123	None	replace
963	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getValue()!=  DEFLATED)  {  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]    NullPointerException    [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(entry.getMethod()!=  DEFLATED  &&  entry.getValue()!=  DEFLATED)  {  [BUGGY]      throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  &&  entry.getValue()!=  DEFLATED)  {	  if(entry.getMethod()!=    DEFLATED)    {    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	84	None	replace
