projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){when(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!etries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries>=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries[BUGGY]null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries>>null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries>=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries>>null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries[BUGGY]null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(Entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){If(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry!=null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry>=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry>=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry!=null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry==null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getKey()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null.getValue()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null)<thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null||entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null)<thrownewIOException("Thisarchivescontainunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry>>null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty())<thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty())==thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==deFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){If(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entry.getMethod()==DEFLATED||entries.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entry.getParent()==DEFLATED||entry.getParent()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entry.getName()==DEFLATED||entry.getName()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entryTypes!=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED&&entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED&&entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getCompressedSize()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){if(entry!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){if(entry==null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){If(entry!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){if(entry!=null&&entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){if(entry>=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){if(entry!=null&&entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){If(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getParent()==DEFLATED||entry.getParent()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getName()==DEFLATED||entry.getName()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.length()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass().isAssignableFrom(entry.getClass())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isFile()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass().isArray()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isArchive()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entries.get(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entries.get(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entries.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAs();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getRawDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!offsets.isEmpty()){if(!offsets.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){if(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){if(entry==null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){If(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){if(entry>=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){if(entry!=null&&entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getKey()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getKey()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.next()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){if(entries!=null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){if(entries==null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){If(entries!=null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){if(entries>=null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){if(entries>>null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){if(entries!=null|&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry!=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){If(entry!=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry==null||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry>=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry!=null||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){If(entry==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.length()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry!=null||entries.size()>>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry!=null||entry.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){If(entry!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){If(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){if(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){if(entry==null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){if(entry>=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){if(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getCompressedSize()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getKey()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry!=null||entries.size()<0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,DEFLATER_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding.getBytes());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,offsets.length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entry==null||entry.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){If(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entry!=null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entry==null||entries.size()>>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entry==null||entries.size()!=1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getMethod()==DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getClass()==getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()>=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getRawClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){if(entries!=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){if(entries==null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){If(entries!=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){if(entries>=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){if(entries!=null||entries.size()>=1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){if(entries!=null||entries.size()==2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getErrorStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getEncoding();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getAsIOFile();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getAsIOException();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getInputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entries.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(writeCentralFileHeader==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!b.isEnabled()){if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){If(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()>>DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){If(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getValue()==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()!=null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.getKey()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getName()==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()!=null||entry.getKey()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED&&entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getKey()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAME,DEFLATED)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAME)||isEnabled(Feature.QUOTE_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.UNQUOTED_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAME,DEFLATER_BLOCK_SIZE)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAME)||hasCompressionLevelChanged){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAMES,DEFLATED)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.UNQUOTED_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.AUTO_CLOSE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){if(!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){If(!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){if(!entries.isEmpty()||entries.size()>1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){if(!entries.isEmpty()||entries.size()>2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getParent()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getName()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry!=null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){If(entry==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry==null||entry.getClass()>=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry==null||entries.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry>=null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry==null||entry.getClass()>>getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().equals("")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getKey().equals("")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("/")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("n")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("*")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("_")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry<null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry<null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry!=null?entry.getValue():DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entries.get(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335when(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){when(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){when(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335When(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entries!=null){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries==null){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){if(offsets==null){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries!=null){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(entries==null){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){if(entries!=null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){if(entries==null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){If(entries!=null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){if(entries>=null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){if(entries>>null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){if(entries[BUGGY]null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED&&entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED&&entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getClass()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!unclosed.isEmpty()){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null||!cdOffset.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset!=null||!cdOffset.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset!=null||cdOffset.length()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null||cdOffset.length()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null||cdLength<entries.length){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){If(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getMethod()==DEFLATED||entry.getMethod()!=EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getMethod()!=DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getMethod()==EFS_FLAG||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getMethod()==DEFLATED||entries.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){if(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){if(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){If(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){if(entries>=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){if(entries==null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entryTypes!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entries.size()<0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.length()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getKey()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){if(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){if(entries!=null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){if(entries==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){If(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){if(entries==null||entries.size()>>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||!etries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!unclosed.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(!etries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry!=null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){If(entry==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry==null||entry.getDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry==null||entry.getName().equals("Directory")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry==null||entries.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry==null||entry.getName().equals("directory")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){if(entry==null||entry.hasDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){if(entries==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){if(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){if(entries!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){if(entries==null||entries.size()>>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){If(entries==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){if(entries==null||entries.size()[Delete]0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entries.get(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entries.get(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getAncestor();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getAs();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.n");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getClass()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getClass()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getKey()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getKey()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getKey().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()||isEnabled(Feature.AUTO_CLOSE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()||!offsets.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(inti=0;i<entries.size();++i){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.isEmpty()){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(inti=0;i<entries.size();i++){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<=2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2||isEnabled(Feature.AUTO_CLOSE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries==null){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entries!=null){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(entries==null){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries!=null){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){if(offsets==null){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry!=null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){If(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()>=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getParent()!=DEFLATED||entry.getParent()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getName()!=DEFLATED||entry.getName()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAMES,DEFLATED)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!offsets.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null.getValue()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null.getKey()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entryTypes!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getCompressedSize()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){if(entry==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){if(entry!=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){if(entry==null||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){If(entry==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){if(entry==null||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){if(entry>=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream().getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream(false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=this.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=o.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream(),offsets.length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){if(entries!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){if(entries==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){If(entries!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){if(entries>=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){if(entries>>null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){If(entries==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entries.get(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entries.get(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAncestor();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){If(offsets==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATER_BLOCK_SIZE||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry>=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.readLine();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.writeOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.openStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.isEnabled()){if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.n");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){if(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){if(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){If(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){if(entries>=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){if(entries>>null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){If(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entries.get(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getClass()==getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getCompressedSize()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){If(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){if(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){if(entries==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){if(entries==null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){if(entries!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){if(entries==null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){If(entries!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){if(entries>=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){if(entries>>null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){if(entries[BUGGY]null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(offsets!=null){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entryTypes!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entrys!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){If(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){if(entries>=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){if(entries!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){if(entries!=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){if(entries!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){if(entries==null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){If(entries!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){if(entries>=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){if(entries!=null&&entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(offsets);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!unclosed.isEmpty()){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getKey()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()==null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()!=null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING,DEFLATED)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING,DEFLATER_BLOCK_SIZE)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING)||isEnabled(Feature.AUTO_CLOSE_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING)||isEnabled(Feature.DEFAULT_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING,DEFAULT_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){If(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getParent()==DEFLATED||entry.getParent()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getName()==DEFLATED||entry.getName()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){if(entries==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){if(entries!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){If(entries==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){if(entries>=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){if(entry==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED&&entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED&&entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getCompressedSize()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getParent()==DEFLATED||entry.getParent()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.getEntryCount()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset!=null||!cdOffset.equals("")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset!=null||cdLength==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null||!cdOffset.equals("")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null)thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(entries==null)thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null)thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=_entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getAnchor();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){if(entry!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entryTypes!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){if(entry!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED)thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED)thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()!=DEFLATED)thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){If(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAnchor();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAttributes();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()!=EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()==getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){if(entries==null||entries.size()[BUGGY]0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){when(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||!entries.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(!entries.isEmpty())<thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.hasNext()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){if(entries==null||!"entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!bragged){if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!b){if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getValue()==null||entries.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.getName()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(out);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(entries);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()!=deFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()!=DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getEntry()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){if(entries!=null&&.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED||entries.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getEntry()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().trim().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry[Delete]null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){if(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=files.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getDirectory();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAstRoot();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAMES)||hasCompressionLevelChanged){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getAnchor();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getAstRoot();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!hasCompressionLevelChanged){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!bragged){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getEntryType()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null){thrownewIOException("Thisarchivescontainunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null){thrownewIOException("Thisarchivescontainsunclosedentries.n");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING)||hasCompressionLevelChanged){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getBytes();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()!=DEFLATED||entries.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.openStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getAsIOF();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entries==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!bragged){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,encoding);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,DEFLATER_BLOCK_SIG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,_raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){if(entries!=null||entries.size()>=2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){if(entries.getMethod()==DEFLATED||entries.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){if(entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){if(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entry.getAttributeValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream(offsets);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream(out);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=createOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.writeEndObject();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){for(!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){when(!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=this.entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getName()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getKey().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getAccessor()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.getValue()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.getValue()>=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.QUOTE_FIELD_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.iterator().next().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.keySet().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.size()>0||entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.list().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entries.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset!=null||cdLength<entries.length){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset<null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null||!cdLength.equals(written)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){If(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getName()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){if(entry>>null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getName()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()<0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry==null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("-")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.AUTO_COMPRESSION)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.WRITE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entries!=null)thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()<2)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.WRITE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENTRYS)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335If(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){if(entry>=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getAccess()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){if(entry!=null||Entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getMethod()==deFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){if(entry.getParent()==DEFLATED||entry.getParent()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getClass()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getMethod()==DEFLATED||entries.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){if(entry==null||Entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entry.getMethod()!=deFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){if(entries.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){if(entries{null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.getValue()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null.getValue()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.getClass().isArray()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getAssignedFile();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getInfo();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){if(entry{null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.size()>0){if(!entries.isEmpty()){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()<0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=getLength()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()==deFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()!=deFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){if(entry.getEntry()==DEFLATED||entry.getEntry()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();--i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getMethod()==deFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){if(entry.getClass()==DEFLATED||entry.getClass()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.toByteArray();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getEntry()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getUnicodeExtraFields();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields().clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getName().endsWith("/")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryStart(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries.size()>0){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getCompressedState()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entries!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.size()>0){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(this.entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(list.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING,DEFLATER_BLOCK_SIG)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(entries.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getKey()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2||DEFLATED.equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2||DEFLATED.equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getClass()!=DEFLATED||entry.getClass()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){if(entry.getEntry()!=DEFLATED||entry.getEntry()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getAscii();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED&&entry.getValue()!=DEFLATED){
