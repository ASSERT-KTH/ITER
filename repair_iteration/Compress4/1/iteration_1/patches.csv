bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    if(!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
2	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  If(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  If(!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    If(!entries.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	14	None	add
3	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  when(!entries.isEmpty())  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  when(!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    when(!entries.isEmpty())  {	  	non-compiled	[CE]  ';'  expected	14	None	add
4	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!etries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  if(!etries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    if(!etries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
5	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  for(!entries.isEmpty())  {  [CE]  not  a  statement  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  for(!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    for(!entries.isEmpty())  {	  	non-compiled	[CE]  not  a  statement	14	None	add
6	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
7	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  [CE]  illegal  start  of  expression  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
8	[BUG]  [BUGGY]  if(entries  ==  null)  {  If(entries  ==  null)  {  [CE]  ';'  expected  [FE]        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  If(entries  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    If(entries  ==  null)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
9	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  >=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
10	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  [BUGGY]  null)  {  [CE]  ')'  expected  [FE]            java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  [BUGGY]  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  [BUGGY]  null)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
11	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  >>  null)  {  [CE]  illegal  start  of  expression  [FE]              java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  >>  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
12	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  if(entries!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null)    {    if(entries!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
13	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  if(entries  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null)    {    if(entries  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
14	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  if(entries  >=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null)    {    if(entries  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
15	[BUG]  [BUGGY]  if(entries!=  null)  {  If(entries!=  null)  {  [CE]  ';'  expected  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  If(entries!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null)    {    If(entries!=  null)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
16	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries  >>  null)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  if(entries  >>  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null)    {    if(entries  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
17	[BUG]  [BUGGY]  if(entries!=  null)  {  if(entries  [BUGGY]  null)  {  [CE]  ')'  expected  [FE]              IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  if(entries  [BUGGY]  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=    null)    {    if(entries  [BUGGY]  null)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
18	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	1	replace
19	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	1	replace
20	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	11	replace
21	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	11	replace
22	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.size()  ==  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
23	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.size()!=  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	11	replace
24	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  [FE]  IOException  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()!=  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	11	replace
25	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	11	replace
26	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  [FE]  IOException  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()  >  0)  {	  if(entry    ==    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	10	11	replace
27	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
28	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED)  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  If(entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    If(entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
29	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
30	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  >=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  >=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  >=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
31	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(Entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(Entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(Entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
32	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entries.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entries.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
33	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
34	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entry.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entry.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry  ==  null  ||  entry.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
35	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    If(entry  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
36	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
37	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()!=  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()!=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry  ==  null  ||  entries.size()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
38	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entry  ==  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
39	[BUG]  [BUGGY]  if(entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getValue()!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()!=  null)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
40	[BUG]  [BUGGY]  if(entries.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]            java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries.getValue()  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries.getValue()  ==  null)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
41	[BUG]  [BUGGY]  if(entry.getKey()  ==  null)  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getKey()  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getKey()  ==  null)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
42	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getValue()  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getValue()  ==  null)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
43	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getValue()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                  java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entry.getValue()  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getValue()  ==  null)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
44	[BUG]  [BUGGY]  if(!entry.getValue().equals( " "))  {  [CE]  cannot  find  symbol  [FE]                    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entry.getValue().equals( " "))  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entry.getValue().equals( " "))  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
45	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getValue();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getValue();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
46	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getValue();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getValue();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
47	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  def  =  entry.getValue();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  def  =  entry.getValue();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
48	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  getUnicodeExtraFields();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
49	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                            java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
50	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getKey();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                              java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  b  =  entry.getKey();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  b  =  entry.getKey();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
51	[BUG]  [BUGGY]  OutputStream  out  =  _out.getOutputStream();  [CE]  <identifier>  expected  [FE]                                java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  _out.getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  _out.getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
52	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entry!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
53	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entry  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
54	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  If(entry!=  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  If(entry!=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
55	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entry.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entry.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entry!=  null  ||  entry.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
56	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry  >=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry  >=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entry  >=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
57	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  If(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    If(entry  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
58	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entry.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry  ==  null  ||  entry.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entry  ==  null  ||  entry.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
59	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entry.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
60	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||!entries.isEmpty())  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
61	[BUG]  [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||!entries.isEmpty())  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
62	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [CE]  cannot  find  symbol  Feature  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.AUTO_CLOSE_ENCODING))  {	  if(!entries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	15	None	replace
63	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||!entries.isEmpty())  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
64	[BUG]  [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||!entries.isEmpty())  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
65	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!entries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	15	None	replace
66	[BUG]  [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!entries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	15	None	replace
67	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]              IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!entries.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	15	None	replace
68	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.isDirectory())  {	  if(entry    ==    null)    {    	compilable	  [FE]  IOException  	2	11	replace
69	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.isDirectory())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.isDirectory())  {	  if(entry    ==    null)    {    	compilable	  [FE]  IOException  	2	11	replace
70	[BUG]  [BUGGY]  if(cdOffset  ==  null)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(cdOffset  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(cdOffset  ==  null)  {	  if(entry    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	2	None	replace
71	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
72	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
73	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
74	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
75	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
76	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
77	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
78	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATER_BLOCK_SIZE)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
79	[BUG]  [BUGGY]  [FE]  IOException  [FE]            NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	8	11	replace
80	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  IOException  [FE]            NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  IOException  	8	11	replace
81	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
82	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [FE]  NullPointerException  [FE]              NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  EFS_FLAG)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
83	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry.getMethod()!=  DEFLATED)  {	  if(entries    ==    null)    {    	compilable	  [FE]  NullPointerException  	6	11	replace
84	[BUG]  [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  [FE]  NullPointerException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()!=  DEFLATED)  {	  if(entries    ==    null)    {    	compilable	  [FE]  NullPointerException  	6	11	replace
85	[BUG]  [BUGGY]  [FE]  IOException  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  ==  1)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
86	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  [FE]  IOException  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  ==  1)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  ==  1)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
87	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
88	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getValue()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
89	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry!=  null)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
90	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
91	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getValue()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
92	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.hasCompressionLevelChanged())  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.hasCompressionLevelChanged())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.hasCompressionLevelChanged())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
93	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getValue()  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
94	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.isDirectory())  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.isDirectory())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.isDirectory())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
95	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	18	11	replace
96	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	18	11	replace
97	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  <  =  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entries.size()  <  =  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entries.size()  >=  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	18	11	replace
99	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  [FE]  IOException  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entries.size()  >=  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  IOException  	18	11	replace
100	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  <  =  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entries.size()  <  =  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entry!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
102	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entry  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
103	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  If(entry!=  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    If(entry!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
104	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  >=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  >=  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entry  >=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
105	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry!=  null  ||  entry.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry!=  null  ||  entry.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entry!=  null  ||  entry.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
106	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [CE]  ';'  expected  [FE]              IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  If(entry  ==  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    If(entry  ==  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
107	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entry.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  ==  null  ||  entry.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entry  ==  null  ||  entry.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
108	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getValue()!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getValue()!=  null)  {	  if(entry    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
109	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
110	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.getMethod()  ==  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	compilable	  [FE]  NullPointerException  	8	11	replace
111	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  while(!entries.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  while(!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    while(!entries.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
112	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getClass()!=  getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
113	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getKey()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getKey()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getKey()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
114	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getValue()!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getValue()!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
115	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entries!=  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entries!=  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entries!=  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
116	[BUG]  [BUGGY]  if(!entries.getValue().isEmpty())  {  [CE]  cannot  find  symbol  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.getValue().isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.getValue().isEmpty())  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
117	[BUG]  [BUGGY]  if(entries!=  null.getValue())  {  [CE]  <null>  cannot  be  dereferenced  [FE]            java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null.getValue())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null.getValue())  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  <null>  cannot  be  dereferenced	16	None	replace
118	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getValue()  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entries.size()  ==  0)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
119	[BUG]  [BUGGY]  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.size()  >  0)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
120	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  >  0)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
121	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getValue();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  cdOffset  =  entry.getValue();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
122	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding);  [CE]  <identifier>  expected  [FE]                      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  new  FileOutputStream(zipEncoding);  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  new  FileOutputStream(zipEncoding);	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
123	[BUG]  [BUGGY]  OutputStream  out  =  entry.getOutputStream();  [CE]  <identifier>  expected  [FE]                        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  entry.getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	OutputStream  out  =  entry.getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	13	None	replace
124	[BUG]  [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getDeflater();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  Deflater  <  ZipArchiveEntry>  d  =  entry.getDeflater();  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	Deflater  <  ZipArchiveEntry>  d  =  entry.getDeflater();	      	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	13	None	replace
125	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&!entries.isEmpty())  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
126	[BUG]  [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  &&!entries.isEmpty())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&!entries.isEmpty())  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
127	[BUG]  [BUGGY]  if(entry!=  null  ||  entry.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entry.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  ||  entry.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
128	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entry.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
129	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED  ||  entries.getMethod()  ==  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
130	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  DEFLATED)  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  DEFLATED)  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
131	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  ==  null)  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	add
132	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  illegal  start  of  expression  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  ==  null)  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
133	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null  ||  entries  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null  ||  entries  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  ==  null  ||  entries  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
134	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  <  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null)  <  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  ==  null)  <  throw  new  IOException( "This  archives  contain  unclosed  entries.   ");	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	5	None	add
135	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entries!=  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entries!=  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
136	[BUG]  [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entries.size()  ==  0)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null    ||    entries.size()    ==    0)    {    if(entries  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
137	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  >>  null  ||  entries.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  >  0)  {  if(entry  >>  null  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    >    0)    {    if(entry  >>  null  ||  entries.size()  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
138	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()  ==  DEFLATED  ||  entry.getClass()!=  DEFLATED)  {	  if(entry.getMethod()    ==    DEFLATED)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	8	None	replace
139	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry  ==  null  ||  entry.getClass()!=  getClass())  {	  if(entry    ==    null)    {    	compilable	  [FE]  IOException  	2	11	replace
140	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getClass()!=  getClass())  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getClass()!=  getClass())  {	  if(entry    ==    null)    {    	compilable	  [FE]  IOException  	2	11	replace
141	[BUG]  [BUGGY]  if(entry  ==  null  ||  entry.getValue()!=  DEFLATED)  {  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null  ||  entry.getValue()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry  ==  null  ||  entry.getValue()!=  DEFLATED)  {	  if(entry    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
142	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    if(!entries.isEmpty())  <  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	14	None	add
143	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    if(!entries.isEmpty())  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
144	[BUG]  [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  ==  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty())  {  if(!entries.isEmpty())  ==  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty())    {    if(!entries.isEmpty())  ==  throw  new  IOException( "This  archives  contains  unclosed  entries.   ");	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
145	[BUG]  [BUGGY]  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.size()!=  0)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
146	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  [FE]  IOException  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()!=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()!=  0)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
147	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  <  =  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  <  =  0)  {	  if(entries    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
148	[BUG]  [BUGGY]  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries  ==  null  ||  entries.size()  >=  0)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
149	[BUG]  [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  [FE]  IOException  [FE]        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null  ||  entries.size()  >=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries  ==  null  ||  entries.size()  >=  0)  {	  if(entries    ==    null)    {    	compilable	  [FE]  IOException  	6	11	replace
150	[BUG]  [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getValue()!=  null)  {  [CE]  cannot  find  symbol  [FE]          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getValue()  ==  null  ||  entry.getValue()!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getValue()  ==  null  ||  entry.getValue()!=  null)  {	  if(entry.getValue()    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
151	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	12	10	replace
152	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  &&  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	12	10	replace
153	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	12	1	replace
154	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  &&  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  ==  0)  {	  if(entry!=    null    ||    entries.size()    ==    0)    {    	compilable	  [FE]  IOException  	12	1	replace
155	[BUG]  [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getClass()!=  DEFLATED)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry  ==  null)  {  if(entry  ==  null  ||  entry.getClass()!=  DEFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry    ==    null)    {    if(entry  ==  null  ||  entry.getClass()!=  DEFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
156	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  &&  entries.size()  >  0)  {	  if(entries!=    null)    {    	compilable	  [FE]  IOException  	4	11	replace
157	[BUG]  [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  &&  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  &&  entries.size()  >  0)  {	  if(entries!=    null)    {    	compilable	  [FE]  IOException  	4	11	replace
158	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entries!=  null  ||  entries.size()  <  2)  {	  if(entries!=    null)    {    	compilable	  [FE]  IOException  	4	11	replace
159	[BUG]  [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  [FE]  IOException  [FE]      IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null  ||  entries.size()  <  2)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null  ||  entries.size()  <  2)  {	  if(entries!=    null)    {    	compilable	  [FE]  IOException  	4	11	replace
160	[BUG]  [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  deFLATED)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry.getMethod()  ==  DEFLATED)  {  if(entry.getMethod()  ==  deFLATED)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry.getMethod()    ==    DEFLATED)    {    if(entry.getMethod()  ==  deFLATED)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
161	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(!entries.isEmpty()  ||  entries.size()  >  0)  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
162	[BUG]  [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  [FE]  IOException  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!entries.isEmpty()  ||  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(!entries.isEmpty()  ||  entries.size()  >  0)  {	  if(!entries.isEmpty())    {    	compilable	  [FE]  IOException  	15	11	replace
163	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [CE]  method  writeCentralFileHeader  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;  [FE]                    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader(i.next());  }	      	non-compiled	[CE]  method  writeCentralFileHeader  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;	13	None	replace
164	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [CE]  ')'  expected  [FE]                      java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod())	      	non-compiled	[CE]  ')'  expected	13	None	replace
165	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [CE]  cannot  find  symbol  [FE]                        java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralDirectoryEnd(entry.getValue());  }	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
166	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [CE]  ')'  expected  [FE]                          java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod	      	non-compiled	[CE]  ')'  expected	13	None	replace
167	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [CE]  method  writeCentralDirectoryEnd  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;  [FE]                            java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralDirectoryEnd(i.next());  }	      	non-compiled	[CE]  method  writeCentralDirectoryEnd  in  class  ZipArchiveOutputStream  cannot  be  applied  to  given  types;	13	None	replace
168	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [CE]  ')'  expected  [FE]                              java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  if(entry.getMethod().equals(entry.getMethod()	      	non-compiled	[CE]  ')'  expected	13	None	replace
169	[BUG]  [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }  [CE]  cannot  find  symbol  [FE]                                java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries!=  null)  {  for(Iterator  i  =  entries.iterator();  i.hasNext();  )  {  ZipArchiveEntry  entry  =(ZipArchiveEntry)i.next();  writeCentralFileHeader(entry.getValue());  }	      	non-compiled	[CE]  cannot  find  symbol	13	None	replace
170	[BUG]  [BUGGY]  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	add	if(entry!=  null  &&  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	18	10	replace
171	[BUG]  [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  [FE]  java.io.IOException:  central  directory  is  empty  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  &&  entries.size()  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=  null  &&  entries.size()  >  0)  {	  if(entry!=    null    ||    entries.size()    >    0)    {    	compilable	  [FE]  java.io.IOException:  central  directory  is  empty  	18	10	replace
172	[BUG]  [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    java.io.IOException:  central  directory  is  empty    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entries  ==  null)  {  if(entries  ==  null  ||  entries.size()  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entries    ==    null)    {    if(entries  ==  null  ||  entries.size()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
173	[BUG]  [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(entry!=  null  ||  entries.size()  ==  0)  {  if(entry!=  null  ||  entries.size()  >=  0)  {  [BUGGY]    throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  cdOffset  =  written;  for  (Iterator  i  =  entries.iterator();  i.hasNext();  )  {  writeCentralFileHeader((ZipArchiveEntry)  i.next());  }  cdLength  =  written  -  cdOffset;  writeCentralDirectoryEnd();  offsets.clear();  [CLASS]  ZipArchiveOutputStream  UnicodeExtraFieldPolicy  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  zipEncoding  UnicodeExtraFieldPolicy  ALWAYS  NEVER  NOT_ENCODEABLE  b  createUnicodeExtraFields  CRC32  crc  OutputStream  o  out  String  DEFAULT_ENCODING  comment  encoding  n  name  int  BUFFER_SIZE  BYTE_MASK  DEFAULT_COMPRESSION  DEFLATED  DEFLATER_BLOCK_SIZE  EFS_FLAG  SHORT  STORED  WORD  level  method  long  cdLength  cdOffset  dataStart  localDataStart  written  byte[]  CFH_SIG  DD_SIG  EOCD_SIG  LFH_SIG  LZERO  ZERO  buf  boolean  b  fallbackToUTF8  hasCompressionLevelChanged  useEFS  Deflater  def  RandomAccessFile  _raf  raf  Iterator  i  ZipArchiveEntry  entry  List  entries  Map  offsets  	projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java	0.9534625892455924	335	335	10	replace	if(entry!=    null    ||    entries.size()    ==    0)    {    if(entry!=  null  ||  entries.size()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
