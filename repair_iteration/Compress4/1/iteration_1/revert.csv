projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){If(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){when(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!etries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){for(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){If(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries>=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries[BUGGY]null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries>>null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries>=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){If(entries!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries>>null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){if(entries[BUGGY]null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){If(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(Entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entry==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getKey()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entry.getValue().equals("")){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=getUnicodeExtraFields();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>b=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=_out.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){If(entry!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry!=null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry>=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){If(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry==null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.AUTO_CLOSE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()&&isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(cdOffset==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()==1){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.hasCompressionLevelChanged()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.isDirectory()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){If(entry!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry>=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry!=null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){If(entry==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry==null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){while(!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getKey()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entries!=null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.getValue().isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null.getValue()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>cdOffset=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=newFileOutputStream(zipEncoding);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335OutputStreamout=entry.getOutputStream();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335Deflater<ZipArchiveEntry>d=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&!entries.isEmpty()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entry.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED||entries.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==DEFLATED)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null)<thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null)thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null||entries==null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null)<thrownewIOException("Thisarchivescontainunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entries!=null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entries.size()==0){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()>0){if(entry>>null||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getClass()!=getClass()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null||entry.getValue()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty())<thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty())thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()){if(!entries.isEmpty())==thrownewIOException("Thisarchivescontainsunclosedentries.");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()!=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()<=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null||entries.size()>=0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getValue()==null||entry.getValue()!=null){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry==null){if(entry==null||entry.getClass()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null||entries.size()<2){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry.getMethod()==DEFLATED){if(entry.getMethod()==deFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(!entries.isEmpty()||entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null&&entries.size()>0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entries==null){if(entries==null||entries.size()==0){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java335if(entry!=null||entries.size()==0){if(entry!=null||entries.size()>=0){
