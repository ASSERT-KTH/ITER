projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359crc.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359crc.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.setValue(Long.parseLong(realCrc));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359longrealCrc=crc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359crc.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.close();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.next()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc!=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length<2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getRealCrc()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(intcrc=0;crc<realCrc;crc++){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(intcrc=0;crc<realCrc.size();){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>deflate=deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>deflate=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>crc=createUnicodeExtraField(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>crc=createUnicodeExtraField(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>crc=createUnicodeExtraField(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=crc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=realCrc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entry.getValue()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>=DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.set();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.set();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.set();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.setValue(Long.MAX_VALUE);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359crc.finish();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>=0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc,crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=crc.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entries.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=entry.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.setValue(Long.MAX_VALUE);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=raf.getDeflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getDeflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc!=null||realCrc.length()==0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_deflater.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater().deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=createDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_deflater.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0||realCrc==DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<CRC32>crc=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.openArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getDeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getDeflatedEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>deflate=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,dataStart);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED&&realCrc!=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc!=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED&&realCrc!=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc!=DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc==DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getContent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<DEFLATED||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Constructor<DEFLATED||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<DEFLATED||realCrc>=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<DEFLATED||realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<DEFLATED||realCrc>DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc,crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(crc,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Constructor<DEFLATED||realCrc<DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.set();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.set();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.set();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()<=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()>=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()!=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(realCrc,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(realCrc,entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>crc=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc,DEFLATED,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(crc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc,DEFLATED,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(deflate,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(creator,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359longrealCrc=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359intrealCrc=crc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359longrealCrc=crc.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359longrealCrc=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359shortrealCrc=crc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359longrealCrc=crc.getValue()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359def.finish();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.finish();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.finish();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.finish();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc==DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>=DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc!=DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc<0||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIG){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.closeEntry();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.closeEntry();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.closeEntry();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.closeEntry();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.closeEntry();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.closeEntry();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null){crc.closeEntry();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<0L||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<0||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<0L||realCrc>DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(realCrc,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(realCrc,crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>=0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length<2){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length<1){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length>2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length<2){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==def){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>crc=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc>0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<0L||realCrc>0L){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc!=DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.close();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.close();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359crc.setValue(Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.setValue(Long.parseLong(realCrc));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.setValue(long.parseLong(realCrc));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.setValue(Long.parseLong(realCrc));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<L>crc=createUnicodeExtraFields(Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>crc=createUnicodeExtraFields(Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(realCrc+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=getUnicodeExtraFields().get(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(creator);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc==DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED&&realCrc==DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc!=DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getDeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getDeflatedEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc!=null||realCrc.length()<0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED&&realCrc!=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc!=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc!=DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc!=DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<1){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null&&realCrc.length<2){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2||realCrc.length>0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2||realCrc.length>4){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){crc.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>crc=crc.delete();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==def.next()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.next()){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.next()){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==def.next()){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==def.next()){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraField(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=raf.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(entry,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.set();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>crc=createUnicodeExtraField(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getMethod(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getMethod(),realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getValue(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getRealCrc(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getKey(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359DEFLATED=realCrc!=DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359DEFLATED=realCrc>>DEFLATED;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=createUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>def=def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<=crc.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<=realCrc||crc.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFAULT_COMPRESSION){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){def.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){def.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.set();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==def.getRealCrc()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>crc=def.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>crc=def.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>crc=def.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>crc=def.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getRealCrc()){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getRaw();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getAstRoot();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc!=null||realCrc.length()>=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED&&realCrc==DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED&&realCrc==DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.setValue(Long.MAX_VALUE);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc==DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>=DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIZE||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Context.checkState(realCrc<0||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc!=DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<DEFLATED||realCrc<DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()==0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()>0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359DEFLATED=realCrc!=null?DEFLATED:realCrc;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359DEFLATED=realCrc!=null?DEFLATED:realCrc.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.set();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc>=DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO!=DEFLATED){crc.setValue(Long.parseLong(realCrc));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>crc=crc.parseLong(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO!=DEFLATED&&crc.setValue(Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO!=DEFLATED?crc.getValue():Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO!=DEFLATED?crc.setValue(Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=getUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>def=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<DEFLATED||crc.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED||realCrc>DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.init();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){def.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>def=crc.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,DEFLATER_BLOCK_SIG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getReference();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIZE){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=getUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATED){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()>=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(def,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(deFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(deserialCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.close();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0||realCrc>0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc>DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc>0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc>0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc<0){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=def.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=_raf.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=_entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.init();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){def.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields.get(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=def.get(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED){def.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIG||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=0||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0){def.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null||realCrc.length<2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc.length<2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length<2){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359longrealCrc=def.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null||realCrc.length()==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){crc.closeEntry();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_deflateEntry(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(_raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATER_BLOCK_SIZE){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length==2){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length>=2){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=def.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=_entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=_raf.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=def.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getRealCrc()){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getRealCrc()){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Object>entry=def.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_deflater.deserialize(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc>=DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc>=DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==0){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATER_BLOCK_SIZE){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()<0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<Long>crc=crc.get();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null){crc.clear();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=def.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359deflate(realCrc,def.next()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.next()){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=DEFLATED){def.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getAccess();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED&&realCrc!=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc>=DEFLATER_BLOCK_SIZE){crc.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc>=DEFLATED){crc.finish();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getReference();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc>=DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getCompressedSize(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getAccess();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getReference();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATER_BLOCK_SIZE){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc!=DEFLATED){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=_raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<K,V>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc<DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc>=DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(entry.getMethod()==DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<DEFLATED){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<0){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(def.getRealCrc()!=realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getRealCrc()||realCrc!=def.getRealCrc()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(def.getRealCrc()==realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getRealCrc()||realCrc==DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null&&realCrc.length()==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){def.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null&&realCrc.length()==0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()==0){crc.getEntry();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,DEFLATER_BLOCK_SIG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359RectangleEdgecrc=createUnicodeExtraFields(realCrc,DEFAULT_ENCODEABLE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIZE||realCrc>DEFLATER_CONSTRUCTOR_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIZE||realCrc>DEFLATER_LAST_COMPRESSION){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIZE){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(def.next()!=realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(def.next()==realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=def.getValue()){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=entries.get(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>def=_raf.getMethod();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LongrealCrc=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc<DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entryentry=getEntry(realCrc,DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflate(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(def!=realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){crc.finish();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(inti=0;i<crc.size();++i){if(realCrc!=null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(inti=0;i<crc.size();i++){if(realCrc!=null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length>0){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>0){crc.delete();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIG){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=realCrc){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<T>entry=getEntry(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){crc.setValue(Long.parseLong(realCrc));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO<=DEFLATED||realCrc>=DEFLATED){crc.setValue(Long.parseLong(realCrc));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO<=DEFLATED?crc.getValue():Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359LZERO<=DEFLATED||realCrc>=DEFLATED?crc.getValue():Long.parseLong(realCrc));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()>0){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIG||realCrc>DEFLATER_CONSTRUCTOR_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATER_BLOCK_SIG||realCrc>DEFLATER_CREATOR_SIG){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=getDeflater(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=createDeflater(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length<2){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){crc.delete();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){crc.getEntry();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null&&realCrc.length()>=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc==DEFLATED){crc.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<?>entry=createUnicodeExtraFields(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIZE){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>DEFLATER_BLOCK_SIG){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED){deflate();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIZE){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIG){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIZE){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()!=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()<=0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>DEFLATER_BLOCK_SIG){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc>def.length){def.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){crc.close();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc.length()<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc.length()<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc.length()<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null||realCrc.length()<=0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>=null||realCrc.length()<0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc<DEFLATER_BLOCK_SIZE){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc>=DEFLATER_BLOCK_SIZE){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0||realCrc.length()==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc.length()==0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>0){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=0||realCrc<DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getReal(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(def.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraField(entry.getKey(),entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=createUnicodeExtraFields(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflatercrc=getUnicodeExtraFields(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate(realCrc,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<=0||realCrc.length<2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc.length<2){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==null||realCrc.length()<0){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflaterdef=_raf.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc<DEFLATER_BLOCK_SIZE){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length<2){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Entry<K,V>entry=realCrc.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null&&realCrc.length()>0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc<def.length){def.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(inti=0;i<crc.size();++i){if(realCrc==null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(inti=0;i<crc.size();i++){if(realCrc==null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359for(inti=0;i<realCrc.size();++i){if(realCrc!=null){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){crc.reset();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<DEFLATED||realCrc>=DEFLATED){crc.reset();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc==DEFLATED||realCrc<DEFLATER_BLOCK_SIZE){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){crc.close();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIZE){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED&&crc!=null){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATER_BLOCK_SIG){crc.set();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null&&realCrc.length()<0){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=null||realCrc.length()<2){crc.reset();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=_raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359Deflater<String>def=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc>DEFLATED){crc.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc<0){crc.closeEntry();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java359if(realCrc!=DEFLATED||realCrc==DEFLATED){crc.finish();}else{def.close();}
