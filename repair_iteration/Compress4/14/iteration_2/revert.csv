projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getCompressedSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getCompressedSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getCompressedSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getSize()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()==DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED&&def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED&&def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED||def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()==DEFLATED||def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()==DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()!=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getCompressedSize()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getCompressedSize()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getCompressedSize()>=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED&&def.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()!=EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==EFS_FLAG||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED||def.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED&&def.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=raf.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(entry,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()==DEFLATED||entry.getSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()==DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getSize()==DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getName()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getSize()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getAssignedEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getConfig();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()>DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()==DEFLATED||entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getCompressedSize()>DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getCompressedSize()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getCompressedSize()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()==BUFFER_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()>DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getSize()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=raf.getDeflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflate(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflate(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getDeflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()!=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getRealCrc();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED&&def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED||def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()==DEFLATED||def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED&&def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getEnd()==DEFLATED||def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getEntry(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=raf.getEntry(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(entry,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(realCrc,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getName()!=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()==DEFLATED||def.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()==DEFLATED||def.getMethod()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()!=DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED||def.getMethod()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED||def.getMethod()==DEFLATED||def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getEnd()==DEFLATED||def.getMethod()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getName()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED&&entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()==DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=getDeflater(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_deflater.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=getDeflater().deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=createDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=getDeflater(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()==DEFLATED&&def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED&&def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()!=DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getType()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getEnd()==DEFLATED||def.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()==DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=raf.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.openArchiveEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getReal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getContent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getSimpleName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getKey()+"n";
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getName();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()==DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()!=DEFLATED&&entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()!=DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCrc()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getAssignedDefinitions();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getImplicitDependency();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()==DEFLATED||entry.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getName()==DEFLATED||entry.getMethod()!=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflate(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflate(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getName()==DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getDeprecated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=getDeflater(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_deflater.createDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()==DEFLATED||def.getMethod()==EFS_FLAG){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()>=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<?>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()>=DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getCompressedSize()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCrc()==DEFLATED||def.getCrc()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.getCompressedSize();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.closeEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getType()==DEFLATED||entry.getCompressedSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getSize()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getName()!=DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()>DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getClass()==DEFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()!=DEFLATED||entry.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=entry.getContent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCompressedSize()>DEFLATED||entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getCompressedSize()==BYTE_MASK||def.getMethod()==DEFLATED||def.getMethod()==DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()==deFLATED||entry.getMethod()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()!=DEFLATED&&entry.getMethod()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getEntry(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=_raf.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.clone();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<T>def=_raf.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=_raf.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<String>def=entry.getDelimiter();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=entry.deflate(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflaterdef=_raf.deflate(realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED&&entry.getCompressedSize()>DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED||def.getCompressedSize()!=DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(def.getMethod()!=DEFLATED&&def.getCompressedSize()==DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()!=DEFLATED||entry.getCompressedSize()>DEFLATED){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getMethod()==DEFLATED||entry.getCompressedSize()<DEFLATER_BLOCK_SIZE){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361Deflater<Object>def=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java361if(entry.getCrc()!=DEFLATED||entry.getCompressedSize()==DEFLATED){
