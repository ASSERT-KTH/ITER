projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdLength);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException("
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownewIOException("
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength==entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.remove();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=Collections.emptyList();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!cdLength.equals(entry.getValue())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<2){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset==0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(cdLength>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets.size()>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null||offsets.size()>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(cdLength>0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(code)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(dOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(entries!=null){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(entries==null){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(entries!=null){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)||!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0){if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(code)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=Collections.EMPTY_LIST;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=Lists.newArrayList();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=Collections.binarySearch(cdLength,offsets.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==2){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdOffset);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){if(offsets!=null){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)||!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)||!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset==0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdOffset-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength,offsets.length-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength,offsets.size()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(offsets.size()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.remove(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){offsets.add(cdLength);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346intcdLength=entries.size();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries=newArrayList<ZipArchiveEntry>();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.contains(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.contains(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.remove();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()||entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||entries.size()>1){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdOffset,cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(offsets,cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,entries,cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdOffset,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdLength,entries,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdOffset,entries,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entry,cdLength,writeCentralDirectoryEnd,offsets);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets.size()>0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null||offsets.size()>0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)||!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(cdLength)||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)&&!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.containsKey(cdLength)||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(cdOffset)||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!cdLength.equals(entry.getKey())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){if(!entries.isEmpty()&&!cdLength.equals(entry.getValue())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=entry.getValue()){if(!entries.isEmpty()&&!cdLength.equals(entry.getValue())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||!cdLength.equals(entry.getValue())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=entry.getValue()){if(!entries.isEmpty()&&!cdLength.equals(entry.getKey())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!cdOffset.equals(entry.getValue())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdLength+1)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&cdLength==entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength!=entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdOffset==entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength>=entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength<entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.containsKey(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.containsKey(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdOffset,cdLength,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdOffset,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(offsets,cdLength,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdOffset,entries,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entry,cdLength,writeCentralFileHeader(cdOffset));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,entries,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdLength,entries,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>1){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.entrySet().iterator().next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset==0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets==null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)||entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets.containsKey(cdLength)||offsets.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdLength)&&entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.containsKey(cdOffset)||entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newLinkedList<ZipArchiveEntry>();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(offsets.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(offsets);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.contains(cdLength)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>=0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(cdLength)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(cdLength)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(cdOffset)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(cdLength>0){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.remove(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){offsets.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdOffset,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(offsets,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,entries,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdOffset,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(cdLength,entries,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,offsets,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(!entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||!entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(offsets!=null){offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdOffset+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength,offsets.length+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength/1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength,offsets.size()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()||entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength!=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength>1){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=cdLength.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.values().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.entrySet();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){if(entries!=null&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){if(entries!=null&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<2){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=offsets.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=cdOffset.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=cdOffsets.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)||entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)&&entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)&&entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0||!entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)||entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdLength)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0||!entries.contains(cdLength)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.contains(cdOffset)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=offsets.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=cdOffset.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=cdOffsets.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.remove();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.remove();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()){entries.remove();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()){entries.remove();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.remove();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(entries!=null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null&&offsets.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null||offsets.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null&&entries.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&offsets.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownewIOException(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownewIOException(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>2){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346cdOffset<2){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<1){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>2){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||offsets.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries!=null||entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entrys!=null||entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entry.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException("
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets.size()>0){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(cdLength>0){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdOffset);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.contains(cdLength)||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets.contains(cdLength)||offsets.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdOffset)||entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)&&entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>=0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entry.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries=newArrayList();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thearchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null||entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||entries.size()>=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==2){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()||cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength>=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.remove();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.add(0,cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()){entries.add(cdLength+1);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList(offsets.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,offsets);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||!entries.hasNext()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets==null){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){offsets.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!cdLength.equals(entry.getString())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!cdLength.equals(entry.getName())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!cdLength.equals(entry.getRawValue())){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)&&entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thearchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()||!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,offsets.length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,writeCentralDirectoryEnd,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(zipEncoding,cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!entries.hasNext()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346DeserializeZipArchiveEntryentry=entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets==null){entries.add(cdLength);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){if(offsets!=null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){if(cdLength>0){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=2){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets==null){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)&&!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)&&!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(offsets.length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(4);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!offsets.contains(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!offsets.isEmpty()){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||entries.contains(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&entries.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entry.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength+1)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=_entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(offsets.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thesearchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.add(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength*1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength+3);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,cdLength,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(zipEncoding,cdLength,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,writeCentralFileHeader(entries));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entry,cdLength,writeCentralFileHeader(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thearchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null||!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(dOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(n)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.containsKey(code)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(n)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)&&entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)&&!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){entries.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(out,cdOffset,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entry,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==1){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.hasNext()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)||!entries.containsKey(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)&&!entries.containsKey(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("ThisArchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entry.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=_entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.clear();}else{thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.remove();}else{thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("ThisArchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.clear();}else{thrownewIOException("Thearchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)||entries.contains(cdOffset+1)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)||entries.contains(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(dOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdLength)&&!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){if(!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()||cdLength==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()||!entries.hasNext()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.isEmpty()||cdLength>=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivecontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}else{thrownewIOException("ThisArchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}else{thrownewIOException("Thearchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength-1,offsets);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(comment)||!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)||!entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(entry);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=_entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(offsets.length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.get(offsets.size()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(offset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)&&entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||offsets.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||entries.contains(offset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346DeserializeZipArchiveEntryentry=entries.get(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346DeserializeZipArchiveEntryentry=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(0,cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,DEFLATER_BLOCK_SIG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null||!entries.isEmpty()||cdLength==entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&cdLength!=entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.contains(cdLength)){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&offsets.size()>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.contains(cdLength)){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<=2){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<=0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()||offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null&&offsets.size()>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries==null||entries.size()>0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.contains(cdLength)){entries.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.length>0){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entry.getMethod()==DEFLATED){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries!=null&&entries.size()==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdOffset)&&!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>=0){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entry.size()>0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>1){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdOffset,cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets.size()>0){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdOffset);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<2){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)||!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdLength)&&!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){if(!entries.contains(cdLength)||!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&cdLength>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdOffset>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.size()<0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<String,ZipArchiveEntry>entry=entries.values().get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdOffset,written);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entry.getMethod()==DEFLATED){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()||cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=cdLength){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)||!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdLength)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(cdLength+1)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=cdOffset){if(!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){if(entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(comment)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(comment)){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.remove();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()){entries.remove();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.size()>0){entries.remove();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.remove();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,offsets.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.contains(cdOffset)){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){thrownew
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdOffset)||!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()||!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||!entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()||entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=Collections.unmodifiableList(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=Collections.binarySearch(cdLength,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){entries.add(cdOffset);}else{offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength*cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength/2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.containsKey(cdOffset)){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdLength)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset>0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset<0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=cdOffset){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength==0){if(!entries.contains(cdLength)){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.add(entry);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(cdLength);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength>0){entries.add(cdLength);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=0){entries.add(cdLength);}else{offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(zipEncoding,cdLength,writeCentralDirectoryEnd());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.values().get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346Entry<K,V>entry=entries.get(cdLength-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdOffset)){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){thrownewIOException
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.containsKey(cdLength)&&!entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)&&!entries.containsKey(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength<2){entries.add(cdLength);}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength-1,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries.add(cdLength*2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){entries.clear();}else{thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.size()>0){thrownewIOException("Thisarchivescontainsunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entry.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=cdLength){if(!entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(comment)||entries.containsKey(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdLength)||entries.containsKey(cdOffset)){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdOffset)&&entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.size()>0||entries.contains(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)||entries.add(cdOffset)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||cdLength>entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entry.isEmpty()||cdLength==entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entry.isEmpty()&&cdLength==entries.length){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets==null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdLength!=null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(cdOffset!=null){entries.add(cdLength);}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.isEmpty()){entries.clear();}else{thrownewIOException("Thisarchivescontainunknownentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()||entries.contains(cdLength)){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.isEmpty()||entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entries,cdLength,writeCentralDirectoryEnd(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346EncoderUtil.writeEncoded(entry,cdLength,writeCentralDirectoryEnd(entry));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)&&entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.containsKey(cdOffset)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()||entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(!entries.isEmpty()&&!entries.isEmpty()){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries!=null&&!entries.contains(cdLength)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)&&!entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.contains(cdLength)||entries.isEmpty()){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346entries=newArrayList<ZipArchiveEntry>(entries.size());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java346if(entries.size()>0){entries.clear();}
