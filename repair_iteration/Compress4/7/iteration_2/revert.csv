projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdOffset,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader((ZipArchiveEntry)cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,cdLength+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size()+1;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345For(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdLengths.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==null){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=this.offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345IntegercdLength=writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345||cdLength==0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345entries.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null||offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Entry<K,V>entry=entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>1){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdLength.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345DescendantIteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,written+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==null){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345writeCentralDirectoryEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345WriteCentralDirectoryEnd();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength==1){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,cdOffset+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength/2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength*2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){if(cdLength<2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-1,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,written-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,0,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,0L);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry.class.getSimpleName());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<files.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345IntegercdOffset=writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-writtenLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(written-cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=this.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0L,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,cdLength-cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdLengths.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345DescendantIteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdOffset!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=cdLengths.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345DescendantIteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(cdLength,(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdOffset-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=this.offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdOffset);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.add(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdOffset);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdOffset);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=this.offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=files.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entry.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345||cdLength!=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdOffset==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdOffset,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdLength,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdOffset,cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdOffset,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(0,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=this.entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.add(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){cdOffset.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){cdOffset.remove(cdLength);}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdOffset+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-1,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-4);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=this.offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=files.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null||offsets.size()>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null&&offsets.size()>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>1){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=cdOffset.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entry.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,written-cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,writtenLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,written+cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=this.offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entry.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){if(cdLength<2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(0);}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdOffset);}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+cdLength,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength+cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345WriteCentralFileHeader((ZipArchiveEntry)cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345writeCentralFileHeader((ZipArchiveEntry)cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){writeCentralFileHeader((ZipArchiveEntry)cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345readCentralFileHeader((ZipArchiveEntry)cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader((ZipArchiveEntry)cdOffset,written);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345intcdLength=writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<cdLen;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<len;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,written-cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,written+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,written+cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entry!=null){if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entry!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength<0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=cdOffset.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=cdLengths.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength/1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength*1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength+3);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=files.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdOffset){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdLength){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdLength,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(0,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(offsets!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(offsets!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(offsets!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdLength<2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset<2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){if(cdLength<2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entry.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345For(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.getSource());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.add(i);}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset!=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(cdLength+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){writeCentralFileHeader((ZipArchiveEntry)cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-i);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Entry<String,ZipArchiveEntry>entry=entries.get(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratorit=files.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEnt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=entry.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength==1){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdOffset!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-1,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=cdOffsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset=offsets.remove(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offs.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<entries.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratorit=files.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=cdOffsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=2){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<3){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEnt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entry.getValue();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdOffset){if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entry.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+0.5);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,writeCentralFileHeader(cdOffset));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,writeCentralFileHeader(cdLength));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>-1){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=2){offsets.add(i);}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,writeCentralFileHeader(cdLength));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdOffset>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=cdOffsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEnt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,i);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove(0);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=libraries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength!=null){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEnt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entry.entrySet().iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offs.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=files.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Deserializer<ZipArchiveEntry>i=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets==null){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){offsets.remove(0);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null&&offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){entry.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){if(cdOffset!=null){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-1,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345For(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(dataStart,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,writeCentralDirectoryEnd);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-1,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,writeCentralFileHeader(cdLength));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdLength){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset<0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){thrownewIOException("Thisarchivescontainsunclosedentries.");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=null){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=null){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.delete(cdLength,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdLength){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();--){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){input.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(offset!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength!=1){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset!=null){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=cdLength){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdEnd){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.clone());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){offsets.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset!=null){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entries!=null&&entries.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entries!=null&&offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdOffset,cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(0,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){writeCentralDirectoryEnd();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(0,cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(1,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345longcdLength=writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset!=null){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entry!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==2){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<1){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){entries.add(cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){entries.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryStart(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){entries.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){entries.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=entries.length){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){offsets.add(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(entry.size()>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=1;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){writeCentralFileHeader((ZipArchiveEntry)cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null&&cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==cdOffset){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null&&cdLength<2){offsets.clear();}
