projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=entries.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.put(cdOffset,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.remove(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){offsets.remove();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){if(cdOffset>0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset,0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){if(cdLength>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdLength+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=null){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.n
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(0,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null){for(inti=0;i<offsets.size();i++){ZipArchiveEntryentry=(ZipArchiveEntry)offsets.get(i);if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset==0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.clear();}else{for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.remove();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<=0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=0){if(cdLength>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.set(cdOffset,cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345cdOffset.remove(cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryEnd(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader(cdOffset);}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralFileHeader((ZipArchiveEntry)cdOffset);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(inti=0;i<entries.size();++i){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength==0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdLength);}else{for(inti=0;i<cdOffset;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){offsets.remove(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345offsets.add(cdOffset-written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratorit=offsets.iterator();it.hasNext();){writeCentralDirectoryEnd(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(offsets!=null&&offsets.size()>0){entries.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset>0){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength<2){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength>0){for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdLength!=cdOffset){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java345if(cdOffset!=cdLength){if(cdLength>0){offsets.clear();}else{for(inti=0;i<cdLength;++i){writeCentralFileHeader((ZipArchiveEntry)i.
