projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=offsets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=this.entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=this.entrySet.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getEntrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.entrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.keySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getValues();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.offsets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.list.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.entrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.keySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=this.offsets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getValues();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=entries.iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=offsets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getEntrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getValues();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getEntrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.values().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.list().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=offsets.entrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralDirectoryStart((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entries().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.entrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=this.entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.keySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.values().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=entries.entrySet().iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getValues().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getKey().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getList().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getElements().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getAncestor().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryEnd((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd((ZipArchiveEntry)i.getNext());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.keySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.list().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=entry.entrySet().iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.keySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.values();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.values();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340WriteCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader(entry.next());}else{writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader(ZipArchiveEntry.class.getSimpleName());}else{writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralDirectoryStart();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryStart((ZipArchiveEntry)i.next());}else{writeCentralDirectoryStart((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryStart((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryStart((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getKey();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getEntryList();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entrySet.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entrySet.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratorit=entries.iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.offsets();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340readCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.getNext());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZIPArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entries.getValues();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getAttributes();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getValues(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getValues()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getValues()-1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entry.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=this.entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=_entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=cdOffsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entry.entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entry.offsets();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.next(),cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.keySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getValue(cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getDeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getValues().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getKeys();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.getValues();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.entrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.keySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=this.infos.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getKey().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getEntryList().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{thrownewIOException("".equals(cdOffset));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.list().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=cdOffsets.iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=offsets.iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=this.entries.iterator();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=entry.entries();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.offsets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.list.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries.iterator();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getKey();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getValue()+1;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getImplicitValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getImplicitReturn();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getImmediateParent();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entries.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getValue(),cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(entry.getValue()!=null){writeCentralFileHeader((ZipArchiveEntry)entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(entry.getValue()==null){writeCentralFileHeader((ZipArchiveEntry)entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getValue(),cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getValue()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Writerwriter=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getKeys();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.getValues();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getKey();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getEntrySet();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getKey(),cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getKey(),cdLength);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340_writeCentralFileHeader((ZipArchiveEntry)entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entrySet().iterator();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entrySet();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&isEnabled(Feature.QUOTE_FIELD_NAMES));){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)i.next(),cdOffset);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=this.entrySet.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entrySet().iterator();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&hasCompressionLevelChanged){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&!cdOffset.equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&isEnabled(ZipArchiveEntry.class)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.values().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(cdLength>0){if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(cdOffset==0){if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(cdLength>0){if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(cdLength>0){if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.list.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getAuxiliaries();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getImplicitReturn();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getValue().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getElements().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getList().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340_writeZipArchiveEntry((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340_writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries.iterator();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getValues();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entries();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.entrySet();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getValues();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.iterator();i.hasNext()&&isEnabled(Feature.QUOTE_ENCODING)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.list();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.list().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entrySets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getElements();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(!b){if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.getNext());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.getValue());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.getNext());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entryList.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}else{writeCentralDirectoryStart((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryStart((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.infos.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entry.offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entry.entrySet();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getElements();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.values();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.gets().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340DeserializeZipArchiveEntryentry=(DestinationZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Entry<ZipArchiveEntry>entry=entry.getValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340_writeCentralFileHeader((ZipArchiveEntry)entry.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.getEntries();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getDeflater();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getImplicitReturn();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=entry.entrySet();it.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getEntry();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getImpl();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(entry.getKey()!=null){writeCentralFileHeader((ZipArchiveEntry)entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=offsets.entrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.listIterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(entry.getValue()!=null){writeCentralFileHeader((ZipArchiveEntry)entry.getValue());}else{thrownewIOException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iterator<ZipArchiveEntry>i=this.entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=this.entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getDataStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>offsets=entry.getDeflates();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=this.entrySets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.entries();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryEnd((ZipArchiveEntry)i.next());}else{writeCentralFileHeader((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{writeCentralDirectoryEnd((ZipArchiveEntry)i.next());offsets.clear();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getData();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflater<ZipArchiveEntry>d=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=offsets.iterator();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entries.entrySet().iterator();i.hasNext()){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.entries().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=offsets.iterator();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.iterator();i.hasNext());){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=offsets.entrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.list();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entries.values().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=entry.entries();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Iterator<ZipArchiveEntry>offsets=i.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Writer.writeCentralFileHeader((ZipArchiveEntry)i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Writerentry=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=this.offsets.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratorit=entries.iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340For(Iteratori=entry.offsets();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralDirectoryStart((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entries.getEntrySet().iterator();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340if(i.hasNext()){writeCentralFileHeader((ZipArchiveEntry)i.next());}else{thrownewIOException(""));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryHeader((ZipArchiveEntry)entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getAssignedValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralFileHeader((ZipArchiveEntry)entry.getDataStart());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryEnd((ZipArchiveEntry)entry.getKey());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getImmediateParentPointer();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getAssignedValue();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340Deflateri=entry.getIterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340for(Iteratori=entry.getList();i.hasNext();){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryHeader((ZipArchiveEntry)entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java340writeCentralDirectoryEnd((ZipArchiveEntry)entry.getValue());
