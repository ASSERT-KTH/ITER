projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.finish();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.flush();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUnsupportedOperation();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.start();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBLOCK()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(encoding);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInit(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCrc()!=realCrc){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.remove();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.write('n');
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()+written));
