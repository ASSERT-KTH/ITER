projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.reset();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.close();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.finish();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.flush();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.clear();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(0);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUnsupportedOperation();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.start();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBLOCK()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(encoding);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInit(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCrc()!=realCrc){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.remove();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.write('n');
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()/written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset(),written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()+written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBlock()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBlank()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()),written+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()+1),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize(),written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDown()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()/written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn(),written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getName()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCrc(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.set
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalCompressed()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCrcIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def!=null){if(!def.finished()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.finished()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finishedIn()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInit(false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.setInit(false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInitialize(false);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.setInstance(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,DEFLATED,wrote);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()*written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName()+comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.add(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate(entry.getMethod());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate(entry.getMethod());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getMethod(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate(entry.getMethod());}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInput(entry.getMethod());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setMethod(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInput(entry.getMethod());}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInput(entry.getMethod());}else{return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalDelta()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalDestination()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){_reportUndeflate(entry.getMethod());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod());}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod());}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod());}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371DEFLATED.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATED,wrote);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportError(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATED,write);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedS
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_deflate(entry.getMethod(),DEFLATED);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_deflate(entry.getMethod(),DEFLATED);}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_deflate(entry.getMethod(),DEFLATED);}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta(),written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalDelta()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setMethod(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(entry,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.instance();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.deflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.deflate(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.deflate(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getMethod()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(entry.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getName()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){if(entry.getCrc()!=realCrc){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()*written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()-written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDestination()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCompressedSize()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCompressedSize()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getCompressedSize()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedDestination()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize()+written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize()-written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),realCrc,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),realCrc,crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.add(entry.getName(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(entry,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(def,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(raf,entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()/written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()),written+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()),entry);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+1),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjust
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize()+written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize()-written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength()+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength()-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength()+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength()+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setLength(entry.getLength());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATED,write);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATED,wrote);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){if(!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){if(!def.finished()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getMethod()==DEFLATED){if(!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.add(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.setEncoding(encoding);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,SHORT);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflated.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getTotalSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(entry.getRealSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCrc()!=realCrc){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getCrc()!=realCrc){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.adjustToLong(de
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUt
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(writer!=null){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflated(entry.getMethod(),DEFLATED);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),EFS_FLAG);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATED,wrote);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflated(entry.getMethod(),DEFLATED);}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportError("Undeflatedentry:"+entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getMethod()==DEFLATED){if(!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def!=null){if(!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getMethod()==DEFLATED){if(!def.finished()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def==null){if(!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),realCrc,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getCompressedSize(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371deflate(entry.getMethod(),realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.write('n',written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.write(entry.getName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.write('n',write);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.write("n");
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.write('n',raf);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc,write);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc,crc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(entry.getMethod(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(entry.getDeclaredMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(dev.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(zipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOffset()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATED,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod(),DEFLATED);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod(),DEFLATED);}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUndeflate(entry.getMethod(),DEFLATED);}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATED,wrote);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUnsupportedOperation();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){_reportUnsupportedOperation();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED||entry.getMethod()==DEFLATED){_reportUnsupportedOperation();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUnsupportedOperation();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUnsupportedOperation();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUnsupportedOperation();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalStart()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()/written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()*written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalDestination()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371DEFLATED.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUnsupportedOperation();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwInternal();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOut()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOut()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){if(!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){!def.finished()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflated(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def!=null){if(!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def==null){if(!def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),realCrc+1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def!=null){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.enabled()){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def==null){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflate.append(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInstance(entry.getMethod());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInstance(entry.getMethod());}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInstance(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInstance(entry.getMethod());}else{def.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_addUndeflate(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getCompressedSize(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),DEFLATED+written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInput(entry.getMethod());}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setInput(entry.getMethod());}else{def.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjustTo
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjust
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalCrc()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName()+":"+Long.toHexString(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getName()+":"+Long.toHexString(entry.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate(entry.getMethod());}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getName()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getName()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(def.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()-1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getCrc()!=realCrc){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(writer!=null){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371DEFLATED.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDegree()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDestination()+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBLOCK()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflated(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOffset()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOffset()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.append('n');
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflate(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportError(entry.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setSize(ZipUtil.adjustToLong(def.getTotalDegree()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setMethod(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def!=null){if(!def.finished()){def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getMethod(),realCrc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getMethod(),DEFLATED,write);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.add(entry.getCompressedSize());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(def,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(def,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(def,write);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(def,read);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflated(entry.getName(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),DEFLATED,realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize()+2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(def.getLength()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength()-2);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getIn()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getIn()));}else{def.finish();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setSize(ZipUtil.adjustToLong(def.getIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalDelta()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalCrc()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()-written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.set
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCrcOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.gettotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflate(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_throwUndeflated();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(entry,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.init(DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCompressedSize(ZipUtil.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.end();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setStart();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.getMethod()==DEFLATED){deflate();}else{entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCompressedSize(ZipUtil.adjust
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def!=null){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(writer!=null){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod()+":"+Long.toHexString(entry.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getMethod()+":"+Long.toHexString(entry.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInitialize(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInitializing(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),realCrc,def);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBLOCK()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371DEFLATED.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(encoded);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(comment);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getSize()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setSize(ZipUtil.adjustToLong(def.getSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToInt(def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(Def.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_deflate(entry.getName(),DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()+written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getCompressedLength());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(entry.getLength()-written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){deflate();}else{entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));entry.setCrc(realCrc);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));entry.setCrc(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedIn()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedIn()),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.finished()){Def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(entry.getCompressedSize()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()+1));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(ZipUtil.adjustToLong(def.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()-written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.init(realCrc);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getMethod()==DEFLATED){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.enabled()){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()||DEFLATED){deflate();}else{thrownewIllegalArgumentException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.finished()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(def.getMethod()==DEFLATED){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.enabled()){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()||DEFLATED){deflate();}else{thrownewIllegalStateException("");}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){def.setCompressedSize(entry.getCompressedSize());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(entry.getCompressedSize()+BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Def.setSize(ZipUtil.adjustToLong(def.getName()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getCompressedSize(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()||DEFLATED.equals(entry.getName())){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()||DEFLATED.equals(realCrc)){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()||DEFLATED.equals(entry.getCompressedSize())){deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(def.getMethod());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getSimpleName());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(entry.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getTotalOut()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getTotalOut()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(def.getTotalOut()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){def.setSize(ZipUtil.adjustToLong(entry.getTotalIn()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCrc()!=realCrc){def.setSize(ZipUtil.adjustToLong(entry.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(entry.getEncoding());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setEncoding(ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInitialSize(true);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInit(true,written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(entry.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalBLOCK_SIZE()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getMethod(),DEFLATED+written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getCompressedSize(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){_reportUnsupportedOperation();}else{def.close();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry.getName(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()+written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalOut()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){def.set(entry.getCompressedSize());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.set(entry.getCompressedSize()+BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getCompressedSize()-written+1));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.getLength()+written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){_reportUndeflated();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){_reportUndeflated();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.length());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(256);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.length);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setLength(def.length()-1);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=written){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()==written){Def.setCompressedSize(ZipUtil.adjustToLong(entry.getCompressedSize()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getCompressedIn());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setInput(entry.getCompressed());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflate(entry.getName(),written);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()-written),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(!def.finished()){def.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOffset()+1));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371def.setCompressedSize(ZipUtil.adjustToInt(def.getTotalOffset()));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371_reportUndeflated(entry,DEFLATER_BLOCK_SIZE);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getCompressedSize()!=DEFLATED){Def.setCompressedSize(ZipUtil.adjustToLong(def.getCrc()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalIn()+written));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()!=DEFLATED){_reportUndeflate(entry.getMethod());}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371entry.setCompressedSize(ZipUtil.adjustToLong(DefLATER_BLOCK_SIZE));
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371if(entry.getMethod()==DEFLATED){deflate();}else{deflate();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.deflate(entry.getMethod(),DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java371Deflater.deflate(entry.getName(),DEFLATED);
