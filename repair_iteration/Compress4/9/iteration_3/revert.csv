projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValue().equals(cdLength))
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())&&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.values().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeZipArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)||
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=null){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!cdLength){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347DescendantImpli=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.iterator();if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.iterator();for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(cdLength);}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets.size()>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=null){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=null){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entry.getValue();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=entry.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=entry.entrySet().iterator();for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.getKey().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<K,V>entry=entry.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=this.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=inputs.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchive>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=inputs.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=entry.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.keySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<K,V>entry=entries.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(html)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null||entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>1){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratorit=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchive>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(com
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(com
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(dataStarts!=null){for(Iteratori=dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=_entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=this.entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=_entrySet.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.offsets();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdLength.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdLengths.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<ZipArchiveEntry>entry=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZIPArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.values()!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.values().iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralPathHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=this.offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=_entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=this.entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=entry.offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=cdLength.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()==null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry.class.getSimpleName());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZIPArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(CipArchiveEntry.class.getSimpleName());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<ZipArchiveEntry>entry=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<ZipArchiveEntry>entry=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdLength.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdLengths.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entry.getValue();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryentry=entries.iterator();entry.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>=0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeZipArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeZipArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeZipArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(Integer.toString(in.next()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(Integer.toString(cdLength));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(cdLength,in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getKey().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)||
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)|
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(COMPRESSION)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entry.getValue();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entry.getKey();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())){}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets!=null){for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets!=null){for(Iteratori=inputs.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entry.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<ZipArchiveEntry>entry=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entry.getValue();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Ilerator<ZipArchiveEntry>i=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347List<ZipArchiveEntry>i=offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.getIterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(entry.getSource());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=entry.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>out=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getKey().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=null){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(!entries.isEmpty()){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdLengths.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength))continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)&&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getKey().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347||!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=entry.getValues();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=entry.getValue();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entry.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchive>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=this.files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(com
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries==null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries==null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.getKey().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.getValue();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entry.getKey();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.entrySet().iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(Integer.toString(i.next()));}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(n.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entry.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(0,i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLeng
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.infos.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();--){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(zipArchiveEntry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){For(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratorit=entries.iterator();i.hasNext();){writeCentralFileHeader(it.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCurrentArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.infos.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.getKey();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(0,entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getKey()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>i=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.offsets.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=entry.entrySet();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>i=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeZipArchiveHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347&&!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=0){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.entrySet().iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.entrySet().iterator();i.hasNext();){writeCentralFileHeader(0,i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.infos.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){writeCentralDirHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347b=createUnicodeExtraFields(ByteBuffer.DEFAULT_COMPRESSION,BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347b=createUnicodeExtraFields(crc,DEFLATED);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347b=createUnicodeExtraFields(ByteBuffer.DEFAULT_COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>out=encoding.deflate(ZipArchiveEntry.class);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>out=encoding.deflate(ZipArchiveEntry.DEFAULT_ENCODING);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>out=encoding.deflate(ZipArchiveEntry.DEFAULT_COMPRESSION);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347b=createUnicodeExtraFields(ByteBuffer.DEFAULT_ENCODING,BYTE_MASK);
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entry.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=_entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entry.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.values().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.values().iterator();i.hasNext();){writeCentralFileHeader(i.next());
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.values().iterator();i.hasNext();){writeCentralFileHeader(0,i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMeth
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength))
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!b){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>it=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=null){for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset!=null){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=files.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347For(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry!=null){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(0,entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=_entrySet.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.infos.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue;
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeZipArchiveEntry(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getName());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryHeader(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.dataStarts.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=2){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>=0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEn
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getKey()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserializer<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(ent
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347finalIterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347finalIterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){Iterator<ZipArchiveEntry>it=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.hasNext()){for(Iteratori=entry.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.hasNext()){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(ZipArchiveEntry)i.next();}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(enabled){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader((ZipArchiveEntry)i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deserialize<ZipArchiveEntry>i=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)&
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod()
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)||entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.getValue().equals(cdLength)||entry.getValue().equals(cdLength)){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=files.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.getKey())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>i=entry.getValues();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryHeader(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue()!=null
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratorit=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryStart(entry.getKey());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Deflater<ZipArchiveEntry>i=deflaters.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cd
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(!entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)||
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.getName().equals(entry.getName())){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.getName().equals(entry.getName())){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getValue().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();--i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(-i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>offsets=newArrayList<ZipArchiveEntry>();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(inputs!=null){for(Iteratori=inputs.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMethod())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.values().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.values().iterator();i.hasNext();){writeCentralDirectoryEnd(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>entries=newArrayList<ZipArchiveEntry>();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirector
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralFileHeader(entry.getVal
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength<2){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==2){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=cds.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=this.offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratorit=cdOffsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(ZipArchiveEntryi=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryentry:entries.values()){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getMethod().equals(entry.getMethod
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryentry:entries.values()){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getValue().equals(entry.get
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>4){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.getMethod()==DEFLATED){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.hasNext()){for(Iteratori=entry.entrySet().iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.getMethod()==DEFLATED){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(in.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdOffset>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName())){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength!=cdOffset){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength<=0){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength<2){if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(!entry.getName().equals(comment
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(offsets!=null){for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.iterator();i.hasNext();){writeCentralDirectoryHeader(entry.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(ZipArchiveEntryi=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMetho
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryStart(entry.getValue());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)entry.next();if(entry.getName().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){return
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength==0){for(Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(c
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets==null){for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralFileHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entry.offsets!=null){for(Iteratori=entry.offsets.iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null){for(Iteratori=entries.entrySet().iterator();i.hasNext();){writeCentralDirectoryHeader(i.next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Entry<ZipArchiveEntry>entry=entries.entrySet().iterator();
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){for(Iteratori=cdOffsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdL
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratorit=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(comment)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();writeCentralDirectoryEnd(entry.getValu
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!enabled){Iteratorit=offsets.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(cdLength)){continue;}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(entries!=null&&entries.size()>0){for(Iteratori=entries.iterator();i.hasNext();){writeCentralFileHeader(next());}
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(!entries.isEmpty()){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getValue().equals(cdLength)){
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(this.offsets!=null){for(Iteratori=this.offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getMethod().equals(entry.getMet
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=entries.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347for(Iteratori=offsets.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347if(cdLength>0){for(Iteratori=cdLengths.iterator();i.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)i.next();if(entry.getName().equals(entry.getName
projects/Compress4/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java347Iterator<ZipArchiveEntry>it=entries.iterator();it.hasNext();){ZipArchiveEntryentry=(ZipArchiveEntry)it.next();if(entry.getName().equals(c
