bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "- ");  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]  int  pos  =  token.indexOf( "- ");  [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	int  pos  =  token.indexOf( "- ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  int  pos  =  token.lastIndexOf( "= ");  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]  int  pos  =  token.lastIndexOf( "= ");  [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	int  pos  =  token.lastIndexOf( "= ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  int  pos  =  token.indexOf( ": ");  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]  int  pos  =  token.indexOf( ": ");  [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	int  pos  =  token.indexOf( ": ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "n ");  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]  int  pos  =  token.indexOf( "n ");  [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	int  pos  =  token.indexOf( "n ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	  	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]    Option  option  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    Option  option  =  options.getOption(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    Option  option  =  options.getOption(token);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]    Option  options  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    Option  options  =  options.getOption(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    Option  options  =  options.getOption(token);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
8	[BUG]  [BUGGY]    String  optName  =  token.substring(0,  pos);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    String  optName  =  token.substring(0,  pos);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    String  optName  =  token.substring(0,  pos);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "-= ");  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]  int  pos  =  token.indexOf( "-= ");  [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	int  pos  =  token.indexOf( "-= ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]    Option  options  =  option.getOption(token);  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    Option  options  =  option.getOption(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    Option  options  =  option.getOption(token);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]    Options  options  =  options.getOptions(token);  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    Options  options  =  options.getOptions(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    Options  options  =  options.getOptions(token);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
12	[BUG]  [BUGGY]    Option  options  =  options.getOptions(token);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    Option  options  =  options.getOptions(token);  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    Option  options  =  options.getOptions(token);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
13	[BUG]  [BUGGY]    if(token.startsWith( "- "))  {  token  =  token.substring(0,  token.length()  -  1);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    if(token.startsWith( "- "))  {  token  =  token.substring(0,  token.length()  -  1);  }  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    if(token.startsWith( "- "))  {  token  =  token.substring(0,  token.length()  -  1);  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
14	[BUG]  [BUGGY]    if(token.startsWith( "- ")||  token.startsWith( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]    if(token.startsWith( "- ")||  token.startsWith( "- "))  {  return  false;  }  [BUGGY]  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	    if(token.startsWith( "- ")||  token.startsWith( "- "))  {  return  false;  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
15	[BUG]  [BUGGY]  int  pos  =  token.indexOf( "+ ");  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  private  boolean  isShortOption(String  token)  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }    [BUGGY]  int  pos  =  token.indexOf( "+ ");  [BUGGY]  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	int  pos  =  token.indexOf( "+ ");	int  pos  =  token.indexOf( "= ");  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
