projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[expectedOpts.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split(":");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[arguments.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[args.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.length()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)properties.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd!=null){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd!=null){expectedOpts[i]=arguments[i];}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=this.currentOption.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=options.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])properties.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()-1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()+1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(newString[arguments.size()]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,stopAtNonOption));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArgumentsArray();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[parameter.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()+argument;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split("n");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:options.values()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:options.getOptionGroups()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments.split("n")){expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:options.values()){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase());
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments.trim()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments.toString()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=option.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[allOpts.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split(":"+argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split(":").toLowerCase();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:expectedOpts){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:expectedOpts.keySet()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.length){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.keySet()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split("-");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split("<");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,stopAtNonOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[arguments.size()+1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[arguments.size()-1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[arguments.size()*2];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.size()+1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.size()-1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.size()+2];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.getValue(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,options,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,options,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getToken(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.keySet()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.keySet()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=currentOption.getToken();expectedOpts.add(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken,argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parseOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=currentOption.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]),currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()-1]));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]),currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120||arguments.length()==0){for(Optiongroup:options.getOptionGroups()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==1){for(Optiongroup:options.getOptionGroups()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Optiongroup:arguments){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])options.get(argument.length-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])properties.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.toString()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.toString()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120||arguments.length()==0){for(Stringargument:arguments.toString()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.toString()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,cmd);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.length){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.values()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(stopAtNonOption){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(stopAtNonOption){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(argument);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,true,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,true,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120||arguments.length()==0){for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArgumentsTokenArray();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArgumentsTokens();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.properties.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])properties.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])properties.get(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,arguments,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.keySet()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.keySet()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption,expectedOpts,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,expectedOpts,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption,arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,group,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length,expectedOpts.length){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.length){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.getToken()+currentOption;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getToken()+currentOption;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()+argument.toLowerCase();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),argument;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentToken,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=currentOption.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument/1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument+2);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[args.size()+1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,arguments,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(stopAtNonOption){OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(stopAtNonOption){OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,preferred,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.toString();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.toLowerCase();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[allOpts.size()+1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Option[]arguments=option.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken!=null){OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken==null){OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length,expectedOpts.length){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd==null){expectedOpts[i]=arguments[i];}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);expectedOpts[i]=arguments[i];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(currentOption,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentToken,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentToken,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,true,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,true,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120||arguments.length()==0){for(Optiongroup:options.values()){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()!=0){for(Optiongroup:options.values()){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:arguments.values()){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd==null){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument,currentToken);if(cmd!=null){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.tokenTo(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.tokenTo(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments.split("n")){expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments.split("-")){expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments.split("-")){expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=this.options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:expectedOpts){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.length){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:expectedOpts.keySet()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockParsing,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockParsing,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,arguments,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,arguments,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,group,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,true,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,true,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getToken().trim();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.length()+1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.length()-1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.length()+2];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,expectedOpts,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,expectedOpts,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument/1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockAtNonOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockAtNonOption,cmd);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)properties.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:expectedOpts){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.keySet()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.keySet()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.values()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toUpperCase());
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase(),true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase(),false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)properties.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.properties.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(newString[arguments.size()-1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(newString[arguments.size()+1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(newString[arguments.size()]));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[parameter.size()+1];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Arguments[]arguments=getArguments(argument).toArray(newString[arguments.size()]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,expectedOpts,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,expectedOpts,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120||arguments.length()==0){for(Optiongroup:options.values()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()!=0){for(Optiongroup:options.values()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=this.options.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=options.getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Option[]arguments=getArguments(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optionscmd=options.parse(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.getToken(),currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getToken(),currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,0,argument.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,1,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,0,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,group,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,cmd,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,currentOption));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,currentToken));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optionscmd=options.parse(argument,stopAtNonOption));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,group));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,group,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=this.currentOption.getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=(this.currentOption!=null)?this.currentOption.getArguments():argument;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument.length-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument-2);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.keySet()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.trim()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.trim()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120||arguments.length()==0){for(Stringargument:arguments.trim()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.trim()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,group,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){if(currentToken!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){if(currentToken!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptionscurrentToken=currentOption.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()/argument;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()+arguments;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument+1).toLowerCase();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]),options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentOption=options.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=options.getArgumentsToParse();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,stopAtNonOption,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArgumentsToArray();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockAtNonOption,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=option.getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.values()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])properties.get(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,this);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=options.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:options.arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentOption=options.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.get(argument,arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockParsing,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(currentOption,argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.trim()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentOption!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken,argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken!=null){OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase(),stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Optiongroup:options.values()){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optiongroup=options.values();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.add(group.getValue(argument));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptionGroupgroup=options.values();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.values()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:properties.length){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:options.arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:options.options){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments(argument,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parseOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,properties);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument,stopAtNonOption);if(cmd!=null){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Optiongroup:options.values()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split(":n");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Optiongroup:options.getOptionGroups()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optiongroup=options.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptionGroupcurrentOption=options.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(stopAtNonOption){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,options,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,null));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optionsoptions=options.parse(argument,currentToken));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument-2);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument*1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument,currentToken);if(cmd!=null){expectedOpts[i]=arguments[i];}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,useParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptionGroupgroup=options.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])options.get(argument-2);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optiongroup=options.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:options.arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument)+1;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.get(argument).toLowerCase();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=option.toString();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase()+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase(),argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.values()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.toArray(newString[arguments.size()])){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.values()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,block);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.length()*2];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,properties);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,options,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument.toLowerCase());
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockAtNonOption,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Optiongroup:arguments){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120expectedOpts.add(group.getValue(argument));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,true,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument*1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,newOptionGroup(currentOption,expectedOpts));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArgumentsToStringArray();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()2]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentToken,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.split("n")){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.values()){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,this.currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.toArray(newString[arguments.size()])){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(!stopAtNonOption){OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120expectedOpts.add(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken,arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts.values()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments){expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments){expectedOpts.add(argument);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments.toString()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption,preferredOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument)+1;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.size()*2];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]),this);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optionscmd=options.parse(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()+argument+1;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()+arguments.length;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,block);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.split("n")){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments.toString()){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,currentToken,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.split("n")){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,true,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split("n",argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.toArray(newString[arguments.size()])){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase(),expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.split("n")){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentOption!=null){OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd!=null){expectedOpts[i]=argument[i];}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getString();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.toArray(newString[arguments.size()])){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,this.group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,option);
