projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[expectedOpts.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments.length){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split(":");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[arguments.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[args.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[argument.length()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)this.options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)properties.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd!=null){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.getOption(argument);if(cmd!=null){expectedOpts[i]=arguments[i];}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(arguments!=null){for(Stringargument:arguments){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120for(Stringargument:expectedOpts){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArguments(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=this.currentOption.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=options.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=argument.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=arguments.getToken();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(),argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])properties.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=options.get(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleError(argument,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()-1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()+1]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().toArray(newString[arguments.size()]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingArgument(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArgument(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleArg(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments){}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120For(Stringargument:arguments){
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120OptioncurrentToken=currentOption.getToken();expectedOpts.add(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleToken(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120options.parse(argument,stopAtNonOption));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Optioncmd=options.parse(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=currentOption.getArgumentsArray();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120handleMissingName(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument).toArray(newString[arguments.size()]));
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[parameter.size()];
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.getToken()+argument;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120StringcurrentToken=(String)options.get(argument+1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments().split("n");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]arguments=(String[])this.options.get(argument-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:options.values()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:options.getOptionGroups()){expectedOpts.add(group);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments.split("n")){expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Optiongroup:options.values()){expectedOpts.add(group.getValue(argument));}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument!=null){for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(currentToken!=null){ArgumentcurrentToken=currentOption.getToken();expectedOpts.add(currentToken);}else{expectedOpts.add(argument);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=getArguments(argument.toLowerCase());
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments.trim()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments.length){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120if(argument.length()==0){for(Stringargument:arguments.toString()){continue;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120Argument[]arguments=option.getArguments();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120ArgumentcurrentToken=currentOption.tokenTo(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java120String[]expectedOpts=newString[allOpts.size()];
