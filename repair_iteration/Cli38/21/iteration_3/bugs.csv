bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
3	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
4	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
5	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  currentOption  =  null;  }	  if(options!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
6	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
7	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
8	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getGroups();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getGroups();	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
9	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(currentToken);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
10	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup();  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getSelectedOptionGroup();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getSelectedOptionGroup();	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
11	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptions());  }	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
12	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  currentToken);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getAllOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
13	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getAllOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
14	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  arguments);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  arguments);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  arguments);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
15	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  currentToken,  skipParsing);  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  currentToken,  skipParsing);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  currentToken,  skipParsing);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
16	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  argument);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  argument);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  argument);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
17	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  this.currentToken);  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  this.currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  this.currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    currentToken);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
18	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(argument);  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(argument);  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(argument);  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
19	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(argument);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(argument);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(argument);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
20	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(arguments);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(arguments);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(arguments);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
21	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
22	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOpti    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
23	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOpti    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
24	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOpti    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
25	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  expectedOpts    =    new    ArrayList(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options,  currentToken);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options,  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options,  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
27	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options,  skipParsing);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options,  skipParsing);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options,  skipParsing);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
28	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
29	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
30	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
31	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
36	[BUG]  [BUGGY]  if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionOPts()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOPts());  }	  expectedOpts    =    new    ArrayList(options.getOptionOPts());    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
37	[BUG]  [BUGGY]  if(options  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(options!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
38	[BUG]  [BUGGY]  options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;	  if(options!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
39	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
40	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
41	[BUG]  [BUGGY]  if(options!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(!skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
42	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(!skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
43	[BUG]  [BUGGY]  if(options.getOptionPositions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionPositions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionPositions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionPositions());  }	  expectedOpts    =    new    ArrayList(options.getOptionPositions());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
44	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList(options.getOptionPositions()  +  1);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList(options.getOptionPositions()  +  1);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  ArrayList(options.getOptionPositions()  +  1);	  expectedOpts    =    new    ArrayList(options.getOptionPositions());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
45	[BUG]  [BUGGY]  if(options!=  null)  {  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
46	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
47	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
48	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
49	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  =  null;  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  =  null;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  =  null;	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
50	[BUG]  [BUGGY]  if(options!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
51	[BUG]  [BUGGY]  if(options!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
52	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
53	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
54	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
55	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
56	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
57	[BUG]  [BUGGY]  Option[]  expectedOpts  =  options.getOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option[]  expectedOpts  =  options.getOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option[]  expectedOpts  =  options.getOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(arguments);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(arguments);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(argument);	  Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
61	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
62	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
63	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
64	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
65	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
66	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
67	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cm  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cm  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cm	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
68	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  null  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  null	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setS    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
69	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  currentToken);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
70	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
71	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options,  options.getOptions());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options,  options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options,  options.getOptions());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
72	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
73	[BUG]  [BUGGY]  java.lang.AssertionError:  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
74	[BUG]  [BUGGY]  java.lang.AssertionError:  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
75	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
76	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
77	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(options.getRequiredOptions()!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
78	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  }	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cm  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cm  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cm	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
83	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  if(options.getOptionOpts()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOpts()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionOpts()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
87	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
88	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
89	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
90	[BUG]  [BUGGY]  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
92	[BUG]  [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }	  this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    true;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
93	[BUG]  [BUGGY]  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }	  this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    true;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
94	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  }	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
95	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
96	[BUG]  [BUGGY]  List  <  Option>  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  List  <  Option>  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	List  <  Option>  expectedOpts  =  new  ArrayList(options.getRequiredOptions());	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
97	[BUG]  [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getOptions());	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
98	[BUG]  [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getAllOptions());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getAllOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getAllOptions());	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
99	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.get  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.get  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.get	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
100	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
101	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.addAll(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionGroups());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.add(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
103	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.set    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
104	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptions(),  currentToken);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptions(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptions(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
105	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getTokens());  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
106	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getArguments());  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getArguments());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getArguments());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
107	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
108	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
109	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
110	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
111	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
112	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
113	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getRequiredOptions())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getRequiredOptions())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getRequiredOptions())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
114	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
115	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  =  new  java.lang.AssertionError(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  =  new  java.lang.AssertionError(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  =  new  java.lang.AssertionError(options.getRequiredOptions());	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
116	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  currentToken);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
117	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
118	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options,  options.getOptionOpts());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options,  options.getOptionOpts());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options,  options.getOptionOpts());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
119	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options.getTokens());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
120	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!skipParsing)    {    expectedOpts.addAll(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
121	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!skipParsing)    {    expectedOpts.addAll(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
122	[BUG]  [BUGGY]  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!skipParsing)    {    expectedOpts.addAll(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
123	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
124	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
125	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
126	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
127	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
128	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
129	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  currentToken);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
130	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getSelectedOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getSelectedOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getSelectedOptions());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
131	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionTokens());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
132	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
133	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
134	[BUG]  [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
135	[BUG]  [BUGGY]  if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
136	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
137	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
138	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
139	[BUG]  [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
140	[BUG]  [BUGGY]  if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
141	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
142	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getOptions());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
143	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getRequiredOptions()  ||  options.getRequiredOptions().length  >  0);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getRequiredOptions()  ||  options.getRequiredOptions().length  >  0);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getRequiredOptions()  ||  options.getRequiredOptions().length  >  0);	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
144	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getAllOptions());  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getAllOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getAllOptions());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
145	[BUG]  [BUGGY]  ||  options.getRequiredOptions()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(options.getRequiredOptions()    ==    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
146	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
147	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
148	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
149	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  =  new  java.lang.AssertionError();  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  =  new  java.lang.AssertionError();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  =  new  java.lang.AssertionError();	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
150	[BUG]  [BUGGY]  if(options.getOptionOpts()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionOpts()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionOpts()!=  null)  {  expectedOpts  =  new  LinkedList(options.getOptionOpts());  }	  expectedOpts    =    new    LinkedList(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
151	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
152	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
153	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
154	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
155	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
156	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
157	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
158	[BUG]  [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
159	[BUG]  [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
160	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(!skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
161	[BUG]  [BUGGY]  ||!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(!skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
162	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }	  if(options.getRequiredOptions()    ==    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
163	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
164	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
165	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
166	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
167	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
168	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
169	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
170	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  ArrayList(options.getSelectedOptions());	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
171	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  stopAtNonOption)  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  stopAtNonOption)  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
172	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||!stopAtNonOption)  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||!stopAtNonOption)  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
173	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
174	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
175	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
176	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
177	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
178	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
179	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
180	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
181	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(currentToken);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
182	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
183	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(false);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(false);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(false);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList(options.getOptions());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ArrayList(options.getOptions());	  ExpectedOpts    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
185	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList(options.getAllOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList(options.getAllOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ArrayList(options.getAllOptions());	  ExpectedOpts    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
186	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ArrayList(options.getSelectedOptions());	  ExpectedOpts    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
187	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList  <  Option>();  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList  <  Option>();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  LinkedList  <  Option>();	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
188	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.size());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.size());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  ArrayList  <  Option>(options.size());	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
189	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
190	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
191	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
192	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts  =  new  ArrayList(group.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  expectedOpts  =  new  ArrayList(group.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getOptionGroups();  expectedOpts  =  new  ArrayList(group.getRequiredOptions());	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
193	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOpti    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
194	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOpti    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
195	[BUG]  [BUGGY]  if(!skipParsing)  {  AssertionError:  expected  null;  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  AssertionError:  expected  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  AssertionError:  expected  null;  }	  java.lang.AssertionError:    expected    null;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
196	[BUG]  [BUGGY]  java.lang.AssertionError:  expected;  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected;  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected;	  java.lang.AssertionError:    expected    null;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
197	[BUG]  [BUGGY]  if(currentToken!=  null)  {  AssertionError:  expected  null;  }  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  AssertionError:  expected  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  AssertionError:  expected  null;  }	  java.lang.AssertionError:    expected    null;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
198	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
199	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
200	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
201	[BUG]  [BUGGY]  ||  options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
202	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
203	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
204	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
205	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
206	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
207	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOpti  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOpti	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
208	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
209	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
210	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
211	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
212	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
213	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
214	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
215	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option[]  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option[]  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option[]  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  Option[]    expectedOpts    =    options.getRequiredOptions();    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
216	[BUG]  [BUGGY]  java.lang.Option[]  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option[]  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option[]  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  Option[]    expectedOpts    =    options.getRequiredOptions();    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
217	[BUG]  [BUGGY]  Option[]  expectedOpts  =  options.getRequiredOptions();  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option[]  expectedOpts  =  options.getRequiredOptions();  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option[]  expectedOpts  =  options.getRequiredOptions();  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  Option[]    expectedOpts    =    options.getRequiredOptions();    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
218	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
219	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
220	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
221	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
222	[BUG]  [BUGGY]  expectedOpts  =  new  java.util.ArrayList();  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  java.util.ArrayList();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  java.util.ArrayList();	  expectedOpts    =    new    LinkedList();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
223	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
224	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
225	[BUG]  [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
226	[BUG]  [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
227	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument,  currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(argument,  currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(argument,  currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    option    =    options.getOption(argument);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
228	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(argument);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(argument);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    option    =    options.getOption(argument);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
229	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(argument);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(argument);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(argument);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
230	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(arguments);  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(arguments);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
231	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  skipParsing);  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  skipParsing);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken,  skipParsing);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
232	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
233	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(arguments);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
234	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken,  skipParsing);  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(currentToken,  skipParsing);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(currentToken,  skipParsing);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
235	[BUG]  [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
236	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(options.getRequiredOptions()!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
237	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
238	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    TreeList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
239	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    TreeList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
240	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
241	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  currentToken);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  currentToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  currentToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
242	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  arguments);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  arguments);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  arguments);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
243	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
244	[BUG]  [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
245	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
246	[BUG]  [BUGGY]  if(currentToken!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
247	[BUG]  [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  optionGroup  =  options.getOptionGroups();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  optionGroup  =  options.getOptionGroups();	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
248	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
249	[BUG]  [BUGGY]  Option  option  =  options.getOption(argumentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(argumentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(argumentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    option    =    options.getOption(argument);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
250	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.getOptionOpts());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList  <  Option>(options.getOptionOpts());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  ArrayList  <  Option>(options.getOptionOpts());	  expectedOpts    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
251	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
252	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
253	[BUG]  [BUGGY]  java.lang.Option  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
254	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
255	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
256	[BUG]  [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()  ==  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()  ==  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
257	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  preferredOpts.add(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  preferredOpts.add(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  preferredOpts.add(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
258	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.get  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.get  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.get	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
259	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelected  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelected  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getSelected	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
260	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
261	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
262	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
263	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
264	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
265	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
266	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  >>  illegal  start  of  type	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
267	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
268	[BUG]  [BUGGY]  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
269	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
270	[BUG]  [BUGGY]  if(options.isRequired())  {  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.isRequired())  {  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.isRequired())  {  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAllOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getAllOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
271	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    TreeList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
272	[BUG]  [BUGGY]  java.lang.Option  currentOption  =  options.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  currentOption  =  options.getRequiredOptions();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  currentOption  =  options.getRequiredOptions();	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    TreeList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
273	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  TreeList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    TreeList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
274	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getAllOptions(),  options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getAllOptions());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
275	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(options.getRequiredOptions()!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
276	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.addAll(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
277	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionTools());  }  else  {  expectedOpts.addAll(options.getOptionTools());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionTools());  }  else  {  expectedOpts.addAll(options.getOptionTools());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionTools());  }  else  {  expectedOpts.addAll(options.getOptionTools());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.addAll(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
278	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
279	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  >>  illegal  start  of  type	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOpti    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
280	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOpti    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
281	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getSelectedOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
282	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
283	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
284	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  expectedToken);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  expectedToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptionGroups(),  expectedToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
285	[BUG]  [BUGGY]  if(currentOption!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentOption!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
286	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getSelectedOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
287	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  if(group!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroups();  if(group!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getOptionGroups();  if(group!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
288	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAssignedOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAssignedOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getAssignedOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
289	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(options.getRequiredOptions())    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
290	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
291	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getOptionOpts());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
292	[BUG]  [BUGGY]  Option  currentOption  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentOption  =  options.getOptionGroups();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentOption  =  options.getOptionGroups();	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
293	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
294	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
295	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
296	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentOption!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
297	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
298	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens());  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
299	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getOptionGroups());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
300	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
301	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
302	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
303	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
304	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
305	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionTools());  }  else  {  expectedOpts.add(options.getOptionTools());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionTools());  }  else  {  expectedOpts.add(options.getOptionTools());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionTools());  }  else  {  expectedOpts.add(options.getOptionTools());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.add(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
306	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.add(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
307	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
308	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
309	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.removeAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.removeAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.removeAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
310	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
311	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
312	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
313	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
314	[BUG]  [BUGGY]  if(options.getErrors()!=  null)  {  expectedOpts  =  new  ArrayList(options.getErrors());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getErrors()!=  null)  {  expectedOpts  =  new  ArrayList(options.getErrors());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getErrors()!=  null)  {  expectedOpts  =  new  ArrayList(options.getErrors());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
315	[BUG]  [BUGGY]  if(options.getToken()!=  null)  {  expectedOpts  =  new  ArrayList(options.getToken());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getToken()!=  null)  {  expectedOpts  =  new  ArrayList(options.getToken());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getToken()!=  null)  {  expectedOpts  =  new  ArrayList(options.getToken());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
316	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
317	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
318	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
319	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
320	[BUG]  [BUGGY]  if(currentToken!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
321	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
322	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
323	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOpti  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOpti	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
324	[BUG]  [BUGGY]  if(!skipParsing)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
325	[BUG]  [BUGGY]  if(!skipParsing)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
326	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(null);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
327	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(options.getOptionGroups());	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
328	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!skipParsing)    {    expectedOpts.addAll(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
329	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
330	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOption();  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentOption  =  options.getRequiredOption();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentOption  =  options.getRequiredOption();	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
331	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentOption  =  options.getRequiredOptions();	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
332	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
333	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
334	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
335	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptions(),  expectedToken);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptions(),  expectedToken);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getRequiredOptions(),  options.getOptions(),  expectedToken);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
336	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getRequiredOptions());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getRequiredOptions(),    options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
337	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setS    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
338	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS!=  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS!=  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS!=  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setS    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
339	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setS    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
340	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  >=  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  >=  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setS  >=  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setS    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
341	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentOption  =  options.getRequiredOptions();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
342	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
343	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
344	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
345	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
346	[BUG]  [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
347	[BUG]  [BUGGY]  if(options.getToken()!=  null)  {  expectedOpts  =  new  ArrayList(options.getToken());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getToken()!=  null)  {  expectedOpts  =  new  ArrayList(options.getToken());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getToken()!=  null)  {  expectedOpts  =  new  ArrayList(options.getToken());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
348	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
349	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
350	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
351	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
352	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  expectedOpts);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken,  expectedOpts);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken,  expectedOpts);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
353	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(currentToken  +  1);  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(currentToken  +  1);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(currentToken  +  1);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
354	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
355	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
356	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  preferredOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
357	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(!skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
358	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
359	[BUG]  [BUGGY]  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
360	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
361	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
362	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
363	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
364	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
365	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOpti  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  if(skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOpti	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
366	[BUG]  [BUGGY]  if(options.getOptionGroups()  >=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  >=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  >=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
367	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(currentToken);  if(option  ==  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
368	[BUG]  [BUGGY]  java.lang.Option  option  =  options.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  option  =  options.getOption(currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  option  =  options.getOption(currentToken);	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
369	[BUG]  [BUGGY]  if(currentOption!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentOption!=  null)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
370	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
371	[BUG]  [BUGGY]  Set  <  Option>  expectedOpts  =  new  HashSet(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Set  <  Option>  expectedOpts  =  new  HashSet(options.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Set  <  Option>  expectedOpts  =  new  HashSet(options.getRequiredOptions());	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
372	[BUG]  [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList();  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ArrayList  <  Option>  expectedOpts  =  new  ArrayList();	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
373	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
374	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
375	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
376	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
377	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
378	[BUG]  [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentOption  =  options.getRequiredOptions();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentOption  =  options.getRequiredOptions();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
379	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
380	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
381	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelected  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelected  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getSelected	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
382	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
383	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  LinkedList(options.getOptionGroups());	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
384	[BUG]  [BUGGY]  expectOpts  =  new  ArrayList(options.getOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectOpts  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectOpts  =  new  ArrayList(options.getOptions());	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
385	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList();  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ArrayList();  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ArrayList();	  ExpectedOpts    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
386	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  LinkedList(options.getRequiredOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  LinkedList(options.getRequiredOptions());	  ExpectedOpts    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
387	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getSelectedOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
388	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  preferredOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
389	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
390	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOpti  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOpti	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
391	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expected  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
392	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
393	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
394	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
395	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
396	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  if(currentToken!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
397	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOpti  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOpti	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOpti    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
398	[BUG]  [BUGGY]  expectedOpts  =  new  ArrayList(options.getOptionTokens());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  ArrayList(options.getOptionTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  ArrayList(options.getOptionTokens());	  expectedOpts    =    new    ArrayList(options.getOptionGroups());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
399	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
400	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
401	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getTokens());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
402	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptions(),  options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
403	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(options.getRequiredOptions()!=    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
404	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
405	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(	  if(stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
406	[BUG]  [BUGGY]  if(currentToken!=  null)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(currentToken!=  null)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(currentToken!=  null)  {  if(stopAtNonOption)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
407	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionTokens());  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
408	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
409	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(options.getRequiredOptions()    ==    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
410	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
411	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(options.getRequiredOptions()    ==    null)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
412	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.set    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
413	[BUG]  [BUGGY]  Option  option  =  options.getOption(defaultToken);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(defaultToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(defaultToken);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
414	[BUG]  [BUGGY]  Option[]  expectedOpts  =  options.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option[]  expectedOpts  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option[]  expectedOpts  =  options.getRequiredOptions();	  Option[]    expectedOpts    =    options.getRequiredOptions();    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
415	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  preferredOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  preferredOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  preferredOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
416	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOptionGroup(currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOptionGroup(currentToken);	  Option    option    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
417	[BUG]  [BUGGY]  java.lang.OptionGroup  group  =  options.getOptionGroups();  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.OptionGroup  group  =  options.getOptionGroups();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.OptionGroup  group  =  options.getOptionGroups();	  if(option!=    null)    {    Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
418	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setS	  currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
419	[BUG]  [BUGGY]  if(stopAtNonOption)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
420	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
421	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS!=  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS!=  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS!=  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
422	[BUG]  [BUGGY]  if(expected  <  null)  {  AssertionError:  expected  null;  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(expected  <  null)  {  AssertionError:  expected  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(expected  <  null)  {  AssertionError:  expected  null;  }	  java.lang.AssertionError:    expected    null;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
423	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(argument);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOptionGroup(argument);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOptionGroup(argument);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    option    =    options.getOption(argument);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
424	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
425	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.addAll(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
426	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
427	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
428	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
429	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  expectedOpts.contains(options.getRequiredOptions()))  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  expectedOpts.contains(options.getRequiredOptions()))  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  expectedOpts.contains(options.getRequiredOptions()))  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
430	[BUG]  [BUGGY]  java.lang.OptionGroup  group  =  options.getRequiredOptions();  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.OptionGroup  group  =  options.getRequiredOptions();  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.OptionGroup  group  =  options.getRequiredOptions();	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
431	[BUG]  [BUGGY]  if(!skipParsing)  {  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
432	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
433	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
434	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
435	[BUG]  [BUGGY]  if(stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
436	[BUG]  [BUGGY]  if(skipParsing)  {  expectedOpts.add(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(skipParsing)  {  expectedOpts.add(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(skipParsing)  {  expectedOpts.add(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
437	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  new  OptionGroup();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  new  OptionGroup();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  currentOption  =  new  OptionGroup();  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
438	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionTokens());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionTokens());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getSelectedOptions(),  options.getOptionTokens());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getSelectedOptions());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
439	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  }	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
440	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
441	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS  >>  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
442	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS!=  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS!=  illegal  start  of  type  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setS!=  illegal  start  of  type	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
443	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
444	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
445	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  currentToken  =  options.getOptionGroups();  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  currentToken  =  options.getOptionGroups();  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  Option  currentToken  =  options.getOptionGroups();  if(currentToken!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(option!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
446	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n	  if(options.getRequiredOptions()    ==    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
447	[BUG]  [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
448	[BUG]  [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
449	[BUG]  [BUGGY]  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	currentOption.setSelected(	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
450	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
451	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
452	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  ExpectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  ExpectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  ExpectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
453	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionOpts());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionOpts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionOpts());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.add(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
454	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionArguments());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionArguments());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionArguments());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.add(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
455	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionPts());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionPts());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectedOpts.add(options.getOptionPts());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.add(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
456	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
457	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
458	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
459	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
460	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
461	[BUG]  [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption  =  null;  }	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOpti    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
462	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
463	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.add(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.add(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
464	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
465	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
466	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getOptionGroups());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getOptionGroups());    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
467	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  =  new  java.lang.ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  =  new  java.lang.ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  =  new  java.lang.ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
468	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.set    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
469	[BUG]  [BUGGY]  if(options.getRequiredOptions())  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions())  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions())  {  if(!skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(!skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
470	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  TreeList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  TreeList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  TreeList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    TreeList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
471	[BUG]  [BUGGY]  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(skipParsing)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  true;  }	  this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    true;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
472	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  }	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
473	[BUG]  [BUGGY]  if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
474	[BUG]  [BUGGY]  if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
475	[BUG]  [BUGGY]  if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(option!=  null)  {  if(options.getRequiredOptions()!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
476	[BUG]  [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  currentOption  =  new  OptionGroup(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	currentOption  =  new  OptionGroup(options.getRequiredOptions());	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
477	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOpti	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOpti    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
478	[BUG]  [BUGGY]  java.lang.AssertionError:  expected  =  new  ArrayList(options.getRequiredOptions());  [CE]  illegal  start  of  type  [FE]                            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.AssertionError:  expected  =  new  ArrayList(options.getRequiredOptions());  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.AssertionError:  expected  =  new  ArrayList(options.getRequiredOptions());	  if(options.getRequiredOptions()!=    null)    {    if(currentToken!=    null)    {    Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOpti    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
479	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(currentToken!=    null)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
480	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options.getModule());  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options.getModule());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionOpts(),  options.getModule());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptionOpts());    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
481	[BUG]  [BUGGY]  ArrayList  <  Option>  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ArrayList  <  Option>  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ArrayList  <  Option>  expectedOpts  =  options.getRequiredOptions();  for(Option  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  Option[]    expectedOpts    =    options.getRequiredOptions();    for(Option    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
482	[BUG]  [BUGGY]  if(skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(skipParsing)  {  expectedOpts.addAll(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null);  }	  if(!skipParsing)    {    expectedOpts.addAll(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
483	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptionOpts());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptionOpts());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptionOpts());  }  else  {  expectedOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.addAll(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
484	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectOpts.addAll(options.getOptionGroups());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectOpts.addAll(options.getOptionGroups());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptionOpts());  }  else  {  expectOpts.addAll(options.getOptionGroups());  }	  if(options.getOptionOpts()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionOpts());    }    else    {    expectedOpts.addAll(options.getOptionOpts());    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
485	[BUG]  [BUGGY]  Option  currentToken  =  options.getOption(this.currentToken);  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  currentToken  =  options.getOption(this.currentToken);  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  currentToken  =  options.getOption(this.currentToken);	  Option    currentToken    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
486	[BUG]  [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionPositions());  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  expectedOpts  =  new  LinkedList(options.getOptionPositions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	expectedOpts  =  new  LinkedList(options.getOptionPositions());	  expectedOpts    =    new    ArrayList(options.getOptionPositions());    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
487	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
488	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
489	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
490	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(Option  group  :  options.getOptionGroups())  {  cmd.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.set    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
491	[BUG]  [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(Option    group    :    options.getOptionGroups())    {    cmd.set    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
492	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
493	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
494	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOpti  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOpti  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOpti	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
495	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroups();  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  Option  option  =  options.getOptionGroups();  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	Option  option  =  options.getOptionGroups();  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    option    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
496	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
497	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.addAll(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.addAll(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
498	[BUG]  [BUGGY]  if(stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(stopAtNonOption)  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  }	  if(skipParsing)    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
499	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(options.getOptionGroups());	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
500	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(arguments);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	OptionGroup  group  =  options.getOptionGroup(arguments);	  OptionGroup    group    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
501	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(n	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
502	[BUG]  [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(n    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
503	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
504	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  ArrayList(options.getOptionGroups());  }  else  {  expectedOpts.add(options.getSelectedOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptionGroups());    }    else    {    expectedOpts.add(options.getSelectedOptions());    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
505	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  ==  0)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
506	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null  ||  arguments.length  <  2)  {  expectedOpts  =  new  List(options.getRequiredOptions());  }  else  {  expectedOpts.add(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectedOpts    =    new    List(options.getRequiredOptions());    }    else    {    expectedOpts.add(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
507	[BUG]  [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!skipParsing)  {  Option  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }	  java.lang.Option    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
508	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
509	[BUG]  [BUGGY]  java.lang.Option  expected  =  new  java.lang.Option(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  java.lang.Option  expected  =  new  java.lang.Option(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	java.lang.Option  expected  =  new  java.lang.Option(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null);  }	  if(stopAtNonOption)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
510	[BUG]  [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()  ==  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
511	[BUG]  [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getOptionGroups());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getOptionGroups());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ArrayList  <  Option>  expectedOpts  =  new  ArrayList(options.getOptionGroups());	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
512	[BUG]  [BUGGY]  List  <  Option>  expectedOpts  =  new  ArrayList(options.getOptions());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  List  <  Option>  expectedOpts  =  new  ArrayList(options.getOptions());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	List  <  Option>  expectedOpts  =  new  ArrayList(options.getOptions());	  ArrayList    <    Option>    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
513	[BUG]  [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ||  options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	||  options.getOptionGroups()!=  null)  {  expectOpts  =  new  ArrayList(options.getRequiredOptions());  }	  if(options.getOptionGroups()!=    null)    {    expectOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
514	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getRequiredOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
515	[BUG]  [BUGGY]  if(options.getErrors()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getErrors()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getErrors()!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setSelected(null	  if(options.getRequiredOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setSelected(null    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
516	[BUG]  [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(true);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts  expectedOpts  =  new  ExpectedOpts(true);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts  expectedOpts  =  new  ExpectedOpts(true);	  ExpectedOpts    expectedOpts    =    new    ExpectedOpts();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
517	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptionRequired());  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptionRequired());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getOptionRequired());	  ExpectedOpts.checkState(options.getRequiredOptions());    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
518	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(n	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
519	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(!stopAtNonOption)  {  currentOption  =  null;  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  cmd.setSelected(null	  if(!stopAtNonOption)    {    currentOption    =    null;    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    cmd.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
520	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptions().size()  >  expectedOpts.size());  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptions().size()  >  expectedOpts.size());  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getOptions().size()  >  expectedOpts.size());	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
521	[BUG]  [BUGGY]  ExpectedOpts.checkState(options.getOptions().size()  >  0);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  ExpectedOpts.checkState(options.getOptions().size()  >  0);  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	ExpectedOpts.checkState(options.getOptions().size()  >  0);	  expectedOpts    =    new    LinkedList(options.getOptions());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
522	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  ArrayList(options.getOptions());  }  else  {  expectOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
523	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  |=  new  ArrayList(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
524	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }  [BUGGY]        for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  expectedOpts  =  new  List(options.getOptions());  }  else  {  expectedOpts.addAll(options.getRequiredOptions());  }	  if(options.getOptions()!=    null)    {    expectedOpts    =    new    ArrayList(options.getOptions());    }    else    {    expectedOpts.addAll(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
525	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.set	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
526	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [CE]  illegal  start  of  type  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
527	[BUG]  [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [CE]  illegal  start  of  type  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getRequiredOptions()!=  null)  {  if(!skipParsing)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for(OptionGroup  group  :  options.getOptionGroups())  {  currentOption.setS	  if(stopAtNonOption)    {    if(!skipParsing)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    for(OptionGroup    group    :    options.getOptionGroups())    {    currentOption.setS    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
528	[BUG]  [BUGGY]  if(options.getOptionGroups())  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups())  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups())  {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;  }	  if(options.getRequiredOptions())    {    this.options    =    options;    this.stopAtNonOption    =    stopAtNonOption;    skipParsing    =    false;    currentOption    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
529	[BUG]  [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [CE]  illegal  start  of  type  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  this.options  =  options;  this.stopAtNonOption  =  stopAtNonOption;  skipParsing  =  false;  currentOption  =  null;      [BUGGY]  if(options.getOptionGroups()!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }  [BUGGY]      expectedOpts  =  new  ArrayList(options.getRequiredOptions());  for  (OptionGroup  group  :  options.getOptionGroups())  {  group.setSelected(null);  }  cmd  =  new  CommandLine();  if  (arguments  !=  null)  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	if(options.getOptionGroups()!=  null)  {  Option  currentToken  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts  =  new  ArrayList(options.getRequiredOptions());  }	  Option    currentToken    =    options.getOption(currentToken);    if(option!=    null)    {    expectedOpts    =    new    ArrayList(options.getRequiredOptions());    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
