bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); [FE] java.lang.AssertionError: expected null [CONTEXT] if (skipParsing) { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { [BUGGY] currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); [BUGGY] } else if (token.startsWith("--")) { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); } else [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	235	235	1	replace	
2	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] if (skipParsing) { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { [BUGGY] [BUGGY] currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); } else [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	235	235	1	add	
3	[BUG] [BUGGY] currentOption = null; [FE] java.lang.AssertionError: expected null [CONTEXT] { handleShortAndLongOption(token); } else { handleUnknownToken(token); } if (currentOption != null && !currentOption.acceptsArg()) { [BUGGY] currentOption = null; [BUGGY] } } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	
4	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { handleShortAndLongOption(token); } else { handleUnknownToken(token); } if (currentOption != null && !currentOption.acceptsArg()) { [BUGGY] [BUGGY] currentOption = null; } } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	add	
5	[BUG] [BUGGY] int pos = token.indexOf("="); [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isShortOption(String token) {  if (!token.startsWith("-") || token.length() == 1) { return false; }  [BUGGY] int pos = token.indexOf("="); [BUGGY] String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	replace	
6	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isShortOption(String token) {  if (!token.startsWith("-") || token.length() == 1) { return false; }  [BUGGY] [BUGGY] int pos = token.indexOf("="); String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	308	308	1	add	
7	[BUG] [BUGGY] String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isShortOption(String token) {  if (!token.startsWith("-") || token.length() == 1) { return false; }  int pos = token.indexOf("="); [BUGGY] String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); [BUGGY] return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	309	309	1	replace	
8	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isShortOption(String token) {  if (!token.startsWith("-") || token.length() == 1) { return false; }  int pos = token.indexOf("="); [BUGGY] [BUGGY] String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	309	309	1	add	
9	[BUG] [BUGGY] return options.hasShortOption(optName); [FE] java.lang.AssertionError: expected null [CONTEXT] {  if (!token.startsWith("-") || token.length() == 1) { return false; }  int pos = token.indexOf("="); String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); [BUGGY] return options.hasShortOption(optName); [BUGGY]  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	
10	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] {  if (!token.startsWith("-") || token.length() == 1) { return false; }  int pos = token.indexOf("="); String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); [BUGGY] [BUGGY] return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	add	
11	[BUG] [BUGGY] int pos = token.indexOf("="); [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { if (!token.startsWith("-") || token.length() == 1) { return false; } [BUGGY] int pos = token.indexOf("="); [BUGGY] String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	326	326	1	replace	
12	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { if (!token.startsWith("-") || token.length() == 1) { return false; } [BUGGY] [BUGGY] int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	326	326	1	add	
13	[BUG] [BUGGY] String t = pos == -1 ? token : token.substring(0, pos); [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { if (!token.startsWith("-") || token.length() == 1) { return false; } int pos = token.indexOf("="); [BUGGY] String t = pos == -1 ? token : token.substring(0, pos); [BUGGY]  if (!options.getMatchingOptions(t).isEmpty()) {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  return true; [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	327	327	1	replace	
14	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { if (!token.startsWith("-") || token.length() == 1) { return false; } int pos = token.indexOf("="); [BUGGY] [BUGGY] String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  return true; [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	327	327	1	add	
15	[BUG] [BUGGY] if (!options.getMatchingOptions(t).isEmpty()) { [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { if (!token.startsWith("-") || token.length() == 1) { return false; } int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); [BUGGY] if (!options.getMatchingOptions(t).isEmpty())  { [BUGGY] {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  return true; }  [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	329	330	1	replace	
16	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { if (!token.startsWith("-") || token.length() == 1) { return false; } int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); [BUGGY] [BUGGY] if (!options.getMatchingOptions(t).isEmpty())  { {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  return true; }  [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	329	330	1	add	
17	[BUG] [BUGGY] else if (getLongPrefix(token) != null && !token.startsWith("--")) { [FE] java.lang.AssertionError: expected null [CONTEXT] } int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  return true; } [BUGGY] else if (getLongPrefix(token) != null && !token.startsWith("--"))  { [BUGGY] {  return true; } return false; } [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	334	335	1	replace	
18	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] } int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  return true; } [BUGGY] [BUGGY] else if (getLongPrefix(token) != null && !token.startsWith("--"))  { {  return true; } return false; } [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	334	335	1	add	
19	[BUG] [BUGGY] return false; [FE] java.lang.AssertionError: expected null [CONTEXT] {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  return true; } [BUGGY] return false; [BUGGY] } [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	340	340	1	replace	
20	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] {  return true; } else if (getLongPrefix(token) != null && !token.startsWith("--")) {  return true; } [BUGGY] [BUGGY] return false; } [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	340	340	1	add	
21	[BUG] [BUGGY] String t = Util.stripLeadingHyphens(token); [FE] java.lang.AssertionError: expected null [CONTEXT] private String getLongPrefix(String token) { [BUGGY] String t = Util.stripLeadingHyphens(token); [BUGGY]  int i; String opt = null; for (i = t.length() - 2; i > 1; i--) { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	577	577	1	replace	
22	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private String getLongPrefix(String token) { [BUGGY] [BUGGY] String t = Util.stripLeadingHyphens(token); int i; String opt = null; for (i = t.length() - 2; i > 1; i--) { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	577	577	1	add	
23	[BUG] [BUGGY] String opt = null; [FE] java.lang.AssertionError: expected null [CONTEXT] private String getLongPrefix(String token) { String t = Util.stripLeadingHyphens(token); int i; [BUGGY] String opt = null; [BUGGY] for (i = t.length() - 2; i > 1; i--) { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; } }  [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	580	580	1	replace	
24	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private String getLongPrefix(String token) { String t = Util.stripLeadingHyphens(token); int i; [BUGGY] [BUGGY] String opt = null; for (i = t.length() - 2; i > 1; i--) { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; } }  [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	580	580	1	add	
25	[BUG] [BUGGY] for (i = t.length() - 2; i > 1; i--) { [FE] java.lang.AssertionError: expected null [CONTEXT] private String getLongPrefix(String token) { String t = Util.stripLeadingHyphens(token); int i; String opt = null; [BUGGY] for (i = t.length() - 2; i > 1; i--)  { [BUGGY] { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; } } return opt; [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	581	582	1	replace	
26	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private String getLongPrefix(String token) { String t = Util.stripLeadingHyphens(token); int i; String opt = null; [BUGGY] [BUGGY] for (i = t.length() - 2; i > 1; i--)  { { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; } } return opt; [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	581	582	1	add	
27	[BUG] [BUGGY] return opt; [FE] java.lang.AssertionError: expected null [CONTEXT] for (i = t.length() - 2; i > 1; i--) { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; } } [BUGGY] return opt; [BUGGY] } [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	591	591	1	replace	
28	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] for (i = t.length() - 2; i > 1; i--) { String prefix = t.substring(0, i); if (options.hasLongOption(prefix)) { opt = prefix; break; } } [BUGGY] [BUGGY] return opt; } [CLASS] DefaultParser [METHOD] getLongPrefix [RETURN_TYPE] String  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt option List expectedOpts matchingOpts String argument currentToken opt optName option prefix t token value int i  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	591	591	1	add	
30	[BUG] [BUGGY] return parse(options, arguments, null); [FE] java.lang.AssertionError: expected null [CONTEXT] public CommandLine parse(Options options, String[] arguments) throws ParseException { [BUGGY] return parse(options, arguments, null); [BUGGY] } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Option currentOption List expectedOpts String currentToken String[] arguments  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	60	60	1	replace	
31	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] public CommandLine parse(Options options, String[] arguments) throws ParseException { [BUGGY] [BUGGY] return parse(options, arguments, null); } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Option currentOption List expectedOpts String currentToken String[] arguments  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	60	60	1	add	
32	[BUG] [BUGGY] return parse(options, arguments, properties, false); [FE] java.lang.AssertionError: expected null [CONTEXT] public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { [BUGGY] return parse(options, arguments, properties, false); [BUGGY] } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Option currentOption List expectedOpts String currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	76	76	1	replace	
33	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { [BUGGY] [BUGGY] return parse(options, arguments, properties, false); } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption Option currentOption List expectedOpts String currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	76	76	1	add	
34	[BUG] [BUGGY] this.options = options; [FE] java.lang.AssertionError: expected null [CONTEXT] { [BUGGY] this.options = options; [BUGGY] this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	102	102	1	replace	
35	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { [BUGGY] [BUGGY] this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	102	102	1	add	
36	[BUG] [BUGGY] this.stopAtNonOption = stopAtNonOption; [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; [BUGGY] this.stopAtNonOption = stopAtNonOption; [BUGGY] skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); }  [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	103	103	1	replace	
37	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; [BUGGY] [BUGGY] this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); }  [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	103	103	1	add	
38	[BUG] [BUGGY] skipParsing = false; [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; [BUGGY] skipParsing = false; [BUGGY] currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	104	104	1	replace	
39	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; [BUGGY] [BUGGY] skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	104	104	1	add	
40	[BUG] [BUGGY] currentOption = null; [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; [BUGGY] currentOption = null; [BUGGY] expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine();  [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	105	105	1	replace	
41	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; [BUGGY] [BUGGY] currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine();  [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	105	105	1	add	
42	[BUG] [BUGGY] expectedOpts = new ArrayList(options.getRequiredOptions()); [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; [BUGGY] expectedOpts = new ArrayList(options.getRequiredOptions()); [BUGGY]   for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	replace	
43	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; [BUGGY] [BUGGY] expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	106	106	1	add	
44	[BUG] [BUGGY] for (OptionGroup group : options.getOptionGroups()) { [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  [BUGGY] for (OptionGroup group : options.getOptionGroups())  { [BUGGY] { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	109	110	1	replace	
45	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { this.options = options; this.stopAtNonOption = stopAtNonOption; skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  [BUGGY] [BUGGY] for (OptionGroup group : options.getOptionGroups())  { { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	109	110	1	add	
46	[BUG] [BUGGY] cmd = new CommandLine(); [FE] java.lang.AssertionError: expected null [CONTEXT] skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } [BUGGY] cmd = new CommandLine(); [BUGGY]  if (arguments != null) { for (String argument : arguments) { handleToken(argument); } }   [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	114	114	1	replace	
47	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] skipParsing = false; currentOption = null; expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } [BUGGY] [BUGGY] cmd = new CommandLine(); if (arguments != null) { for (String argument : arguments) { handleToken(argument); } }   [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	114	114	1	add	
48	[BUG] [BUGGY] if (arguments != null) { [FE] java.lang.AssertionError: expected null [CONTEXT] expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); [BUGGY] if (arguments != null)  { [BUGGY] { for (String argument : arguments) { handleToken(argument); } }  checkRequiredArgs();  [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	116	117	1	replace	
49	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] expectedOpts = new ArrayList(options.getRequiredOptions());  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); [BUGGY] [BUGGY] if (arguments != null)  { { for (String argument : arguments) { handleToken(argument); } }  checkRequiredArgs();  [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	116	117	1	add	
50	[BUG] [BUGGY] for (String argument : arguments) { [FE] java.lang.AssertionError: expected null [CONTEXT]  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { [BUGGY] for (String argument : arguments)   { [BUGGY] { handleToken(argument); } }  checkRequiredArgs();  handleProperties(properties); [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	118	119	1	replace	
51	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT]  for (OptionGroup group : options.getOptionGroups()) { group.setSelected(null); } cmd = new CommandLine(); if (arguments != null) { [BUGGY] [BUGGY] for (String argument : arguments)   { { handleToken(argument); } }  checkRequiredArgs();  handleProperties(properties); [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	118	119	1	add	
52	[BUG] [BUGGY] handleToken(argument); [FE] java.lang.AssertionError: expected null [CONTEXT] if (arguments != null) { for (String argument : arguments) { [BUGGY] handleToken(argument); [BUGGY] } } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	120	120	1	replace	
53	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] if (arguments != null) { for (String argument : arguments) { [BUGGY] [BUGGY] handleToken(argument); } } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	120	120	1	add	
54	[BUG] [BUGGY] checkRequiredArgs(); [FE] java.lang.AssertionError: expected null [CONTEXT] if (arguments != null) { for (String argument : arguments) { handleToken(argument); } }  [BUGGY] checkRequiredArgs(); [BUGGY]   handleProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	125	125	1	replace	
55	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] if (arguments != null) { for (String argument : arguments) { handleToken(argument); } }  [BUGGY] [BUGGY] checkRequiredArgs();  handleProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	125	125	1	add	
56	[BUG] [BUGGY] handleProperties(properties); [FE] java.lang.AssertionError: expected null [CONTEXT] for (String argument : arguments) { handleToken(argument); } }  checkRequiredArgs();  [BUGGY] handleProperties(properties); [BUGGY]  checkRequiredOptions(); return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	128	128	1	replace	
57	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] for (String argument : arguments) { handleToken(argument); } }  checkRequiredArgs();  [BUGGY] [BUGGY] handleProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	128	128	1	add	
58	[BUG] [BUGGY] checkRequiredOptions(); [FE] java.lang.AssertionError: expected null [CONTEXT] handleToken(argument); } }  checkRequiredArgs();  handleProperties(properties); [BUGGY] checkRequiredOptions(); [BUGGY]  return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	
59	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] handleToken(argument); } }  checkRequiredArgs();  handleProperties(properties); [BUGGY] [BUGGY] checkRequiredOptions(); return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	add	
60	[BUG] [BUGGY] return cmd; [FE] java.lang.AssertionError: expected null [CONTEXT] }  checkRequiredArgs();  handleProperties(properties); checkRequiredOptions(); [BUGGY] return cmd; [BUGGY] } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	132	132	1	replace	
61	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] }  checkRequiredArgs();  handleProperties(properties); checkRequiredOptions(); [BUGGY] [BUGGY] return cmd; } [CLASS] DefaultParser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options CommandLine cmd boolean skipParsing stopAtNonOption OptionGroup group Option currentOption List expectedOpts String argument currentToken String[] arguments Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	132	132	1	add	
62	[BUG] [BUGGY] if (properties == null) { [FE] java.lang.AssertionError: expected null [CONTEXT] { [BUGGY] if (properties == null)  { [BUGGY] { return; } for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); Option opt = options.getOption(option); if (opt == null) [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Enumeration e OptionGroup group Option currentOption opt List expectedOpts String argument currentToken option value Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	142	143	1	replace	
63	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { [BUGGY] [BUGGY] if (properties == null)  { { return; } for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); Option opt = options.getOption(option); if (opt == null) [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Enumeration e OptionGroup group Option currentOption opt List expectedOpts String argument currentToken option value Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	142	143	1	add	
64	[BUG] [BUGGY] return; [FE] java.lang.AssertionError: expected null [CONTEXT] { if (properties == null) { [BUGGY] return; [BUGGY] } for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); Option opt = options.getOption(option); if (opt == null) { throw new UnrecognizedOptionException("Default option wasn't defined", option); [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Enumeration e OptionGroup group Option currentOption opt List expectedOpts String argument currentToken option value Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	144	144	1	replace	
65	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { if (properties == null) { [BUGGY] [BUGGY] return; } for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); Option opt = options.getOption(option); if (opt == null) { throw new UnrecognizedOptionException("Default option wasn't defined", option); [CLASS] DefaultParser [METHOD] handleProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Enumeration e OptionGroup group Option currentOption opt List expectedOpts String argument currentToken option value Properties properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	144	144	1	add	
66	[BUG] [BUGGY] if (!expectedOpts.isEmpty()) { [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {  [BUGGY] if (!expectedOpts.isEmpty())  { [BUGGY] { throw new MissingOptionException(expectedOpts); } } [CLASS] DefaultParser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	197	198	1	replace	
67	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {  [BUGGY] [BUGGY] if (!expectedOpts.isEmpty())  { { throw new MissingOptionException(expectedOpts); } } [CLASS] DefaultParser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	197	198	1	add	
68	[BUG] [BUGGY] } [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {  if (!expectedOpts.isEmpty()) { throw new MissingOptionException(expectedOpts); } [BUGGY] } [BUGGY]  [CLASS] DefaultParser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	201	201	1	replace	
69	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredOptions() throws MissingOptionException {  if (!expectedOpts.isEmpty()) { throw new MissingOptionException(expectedOpts); } [BUGGY] [BUGGY] } [CLASS] DefaultParser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	201	201	1	add	
70	[BUG] [BUGGY] if (currentOption != null && currentOption.requiresArg()) { [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredArgs() throws ParseException { [BUGGY] if (currentOption != null && currentOption.requiresArg())  { [BUGGY] { throw new MissingArgumentException(currentOption); } } [CLASS] DefaultParser [METHOD] checkRequiredArgs [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	209	210	1	replace	
71	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredArgs() throws ParseException { [BUGGY] [BUGGY] if (currentOption != null && currentOption.requiresArg())  { { throw new MissingArgumentException(currentOption); } } [CLASS] DefaultParser [METHOD] checkRequiredArgs [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	209	210	1	add	
72	[BUG] [BUGGY] } [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredArgs() throws ParseException { if (currentOption != null && currentOption.requiresArg()) { throw new MissingArgumentException(currentOption); } [BUGGY] } [BUGGY]  [CLASS] DefaultParser [METHOD] checkRequiredArgs [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	213	213	1	replace	
73	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private void checkRequiredArgs() throws ParseException { if (currentOption != null && currentOption.requiresArg()) { throw new MissingArgumentException(currentOption); } [BUGGY] [BUGGY] } [CLASS] DefaultParser [METHOD] checkRequiredArgs [RETURN_TYPE] void  [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	213	213	1	add	
74	[BUG] [BUGGY] currentToken = token; [FE] java.lang.AssertionError: expected null [CONTEXT] { [BUGGY] currentToken = token; [BUGGY]  if (skipParsing) { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	223	223	1	replace	
75	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { [BUGGY] [BUGGY] currentToken = token; if (skipParsing) { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	223	223	1	add	
76	[BUG] [BUGGY] if (skipParsing) { [FE] java.lang.AssertionError: expected null [CONTEXT] { currentToken = token; [BUGGY] if (skipParsing)  { [BUGGY] { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	225	226	1	replace	
77	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { currentToken = token; [BUGGY] [BUGGY] if (skipParsing)  { { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	225	226	1	add	
78	[BUG] [BUGGY] else if ("--".equals(token)) { [FE] java.lang.AssertionError: expected null [CONTEXT] { currentToken = token; if (skipParsing) { cmd.addArg(token); } [BUGGY] else if ("--".equals(token))  { [BUGGY] { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	229	230	1	replace	
79	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] { currentToken = token; if (skipParsing) { cmd.addArg(token); } [BUGGY] [BUGGY] else if ("--".equals(token))  { { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	229	230	1	add	
80	[BUG] [BUGGY] else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { [FE] java.lang.AssertionError: expected null [CONTEXT] currentToken = token; if (skipParsing) { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } [BUGGY] else if (currentOption != null && currentOption.acceptsArg() && isArgument(token))  { [BUGGY] { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	233	234	1	replace	
81	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] currentToken = token; if (skipParsing) { cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } [BUGGY] [BUGGY] else if (currentOption != null && currentOption.acceptsArg() && isArgument(token))  { { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	233	234	1	add	
82	[BUG] [BUGGY] else if (token.startsWith("--")) { [FE] java.lang.AssertionError: expected null [CONTEXT] cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } [BUGGY] else if (token.startsWith("--"))  { [BUGGY] { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); } else { handleUnknownToken(token); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	237	238	1	replace	
83	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] cmd.addArg(token); } else if ("--".equals(token)) { skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } [BUGGY] [BUGGY] else if (token.startsWith("--"))  { { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); } else { handleUnknownToken(token); [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	237	238	1	add	
84	[BUG] [BUGGY] else if (token.startsWith("-") && !"-".equals(token)) { [FE] java.lang.AssertionError: expected null [CONTEXT] skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } [BUGGY] else if (token.startsWith("-") && !"-".equals(token))  { [BUGGY] { handleShortAndLongOption(token); } else { handleUnknownToken(token); } if (currentOption != null && !currentOption.acceptsArg()) { [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	241	242	1	replace	
85	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] skipParsing = true; } else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } [BUGGY] [BUGGY] else if (token.startsWith("-") && !"-".equals(token))  { { handleShortAndLongOption(token); } else { handleUnknownToken(token); } if (currentOption != null && !currentOption.acceptsArg()) { [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	241	242	1	add	
86	[BUG] [BUGGY] handleShortAndLongOption(token); [FE] java.lang.AssertionError: expected null [CONTEXT] else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { [BUGGY] handleShortAndLongOption(token); [BUGGY] } else { handleUnknownToken(token); } if (currentOption != null && !currentOption.acceptsArg()) { currentOption = null; } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	243	243	1	replace	
87	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] else if (currentOption != null && currentOption.acceptsArg() && isArgument(token)) { currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); } else if (token.startsWith("--")) { handleLongOption(token); } else if (token.startsWith("-") && !"-".equals(token)) { [BUGGY] [BUGGY] handleShortAndLongOption(token); } else { handleUnknownToken(token); } if (currentOption != null && !currentOption.acceptsArg()) { currentOption = null; } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	243	243	1	add	
88	[BUG] [BUGGY] if (currentOption != null && !currentOption.acceptsArg()) { [FE] java.lang.AssertionError: expected null [CONTEXT] } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); } else { handleUnknownToken(token); } [BUGGY] if (currentOption != null && !currentOption.acceptsArg())  { [BUGGY] { currentOption = null; } } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	250	251	1	replace	
89	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] } else if (token.startsWith("-") && !"-".equals(token)) { handleShortAndLongOption(token); } else { handleUnknownToken(token); } [BUGGY] [BUGGY] if (currentOption != null && !currentOption.acceptsArg())  { { currentOption = null; } } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	250	251	1	add	
90	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] if (currentOption != null && !currentOption.acceptsArg()) { currentOption = null; } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	254	254	1	replace	
91	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] if (currentOption != null && !currentOption.acceptsArg()) { currentOption = null; } [CLASS] DefaultParser [METHOD] handleToken [RETURN_TYPE] void  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	254	254	1	add	
92	[BUG] [BUGGY] return !isOption(token) || isNegativeNumber(token); [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isArgument(String token) { [BUGGY] return !isOption(token) || isNegativeNumber(token); [BUGGY] } [CLASS] DefaultParser [METHOD] isArgument [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	263	263	1	replace	
93	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isArgument(String token) { [BUGGY] [BUGGY] return !isOption(token) || isNegativeNumber(token); } [CLASS] DefaultParser [METHOD] isArgument [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	263	263	1	add	
94	[BUG] [BUGGY] return isLongOption(token) || isShortOption(token); [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isOption(String token) { [BUGGY] return isLongOption(token) || isShortOption(token); [BUGGY] } [CLASS] DefaultParser [METHOD] isOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	291	291	1	replace	
95	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isOption(String token) { [BUGGY] [BUGGY] return isLongOption(token) || isShortOption(token); } [CLASS] DefaultParser [METHOD] isOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken option token value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	291	291	1	add	
96	[BUG] [BUGGY] if (!token.startsWith("-") || token.length() == 1) { [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isShortOption(String token) {  [BUGGY] if (!token.startsWith("-") || token.length() == 1)  { [BUGGY] { return false; }  int pos = token.indexOf("="); String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	302	303	1	replace	
97	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isShortOption(String token) {  [BUGGY] [BUGGY] if (!token.startsWith("-") || token.length() == 1)  { { return false; }  int pos = token.indexOf("="); String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); return options.hasShortOption(optName);  } [CLASS] DefaultParser [METHOD] isShortOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	302	303	1	add	
98	[BUG] [BUGGY] if (!token.startsWith("-") || token.length() == 1) { [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { [BUGGY] if (!token.startsWith("-") || token.length() == 1)  { [BUGGY] { return false; } int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	321	322	1	replace	
99	[BUG] [BUGGY] [FE] java.lang.AssertionError: expected null [CONTEXT] private boolean isLongOption(String token) { [BUGGY] [BUGGY] if (!token.startsWith("-") || token.length() == 1)  { { return false; } int pos = token.indexOf("="); String t = pos == -1 ? token : token.substring(0, pos); if (!options.getMatchingOptions(t).isEmpty()) {  [CLASS] DefaultParser [METHOD] isLongOption [RETURN_TYPE] boolean  String token [VARIABLES] Options options CommandLine cmd boolean selected skipParsing stopAtNonOption Option currentOption opt List expectedOpts String argument currentToken optName option t token value int pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	321	322	1	add	
