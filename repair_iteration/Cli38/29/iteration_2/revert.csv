projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130checkRequiredOptions();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(!stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(currentOption!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,expectedOpts.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||!stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length()==0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length()!=0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=currentOption.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130options.checkState(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,argument.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=currentOption.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.parseOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=optionGroup.parseOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsing();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()+1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(!stopParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[args.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()+1];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&currentOption!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(currentOption==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,nextToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,block);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()-1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length+1];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(skipParsing){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(!stopAtNonOption&&!skipParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null&&cmd.length>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null&&cmd.length()>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.getOption(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,argument.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()+1];System.arraycopy(arguments,0,cmd,0,argument.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,argument.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130options.checkState(stopAtNonOption){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130parse(cmd,stopAtNonOption){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130parse(cmd,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,arguments,0,cmd.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,1,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,arguments.length-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=currentOption.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[args.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[args.length()+1];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){checkParsing();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,blockAtNonOption,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(true,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(false,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(false,false);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(optionGroup);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.parseOption(optionGroup);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=group.parseOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=optionGroup.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=currentOption.getOptionGroup(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=this.currentOption.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=cmd.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[cmd.length()+1];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=currentOption.getGroup(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=currentOption.getGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=currentOption.getGroup(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null||cmd.length()==0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||cmd.length()!=0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=nextToken.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=nextToken.parseOption(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.checkState(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130optionGroup.checkState(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredDefaultParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||currentOption!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.getOption(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getParser().getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()+1];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&!skipParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,block,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,block,0);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,block,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||cmd==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[currentToken.length()+1];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130luate(cmd,stopAtNonOption){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd.length()>0){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length+1];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length+2];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parse(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parse(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=optionGroup.parseOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||!stopParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||!stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||this.stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||currentOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.parseOption(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,currentToken,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,currentToken,0,cmd.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,arguments,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[currentToken.length()+1];System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,currentToken,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Object[]cmd=newObject[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(argument.toString());
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(arguments[0]);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsers();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredDefaultParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||!stopAtNonOption){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,null,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,null,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=optionGroup.getOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument,skipParsing);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||cmd!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd.length()>0){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,stopAtNonOption,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.parse(argument,options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(currentToken,argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length()+1];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length-1];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length()-1];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||skipParsing){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){lookupParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[cmd.length()+1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption&&expectedOpts.length>0){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||!stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()+1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||cmd.length()==0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,expectedOpts,0,cmd.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,expectedOpts.length-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,1,expectedOpts.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=cmd.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=currentOption.getArgumentGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null||cmd.length()>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length()>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null||cmd.length>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,nextToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()-1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOptionGroup.parseOption(optionGroup);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130luate(cmd,stopAtNonOption){checkRequiredParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(skipParsing){checkRequiredParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,expectedOpts,0,expectedOpts.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=currentOption.getArgumentGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null){handleRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getGroup(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(options,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,currentToken.length-1);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,1,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd==null){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(skipParsing){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130luate(cmd,stopAtNonOption){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130luate(cmd,stopAtNonOption){checkRequiredOptions();}elseif(stopAtNonOption){defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd==null){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd.length()==0){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130luate(cmd,stopAtNonOption){checkRequiredParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkRequiredParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()-1];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,currentToken,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,arguments,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130options.checkState(stopAtNonOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130options.checkState(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||currentOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()1];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentToken,arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,stopAtNonOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkParsing();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd==null){checkParsing();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||!skipParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,arguments,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,block);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,block,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length+1];System.arraycopy(arguments,0,cmd,0,argument.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOption("group");
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130luate(cmd,stopAtNonOption){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(skipParsing){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parse(argument,arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(defaultToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(currentOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(true,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOptionCmd(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()-1];System.arraycopy(arguments,0,cmd,0,argument.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(options,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(defaultOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=currentOption.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Arrays.arraycopy(arguments,0,currentToken,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,this.stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(defaultToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(options,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument,block);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkInternal();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,null,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130parent==null&&stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,nextToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkInternalParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkProperties();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,2,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null&&cmd.length>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(argument,cmd);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,nextToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130options.checkParsing(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130this.stopAtNonOption=stopAtNonOption?checkRequiredParsing():null;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length()==0){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(options,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentToken,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,arguments);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,blockAtNonOption,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(skipParsing){checkParsing();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130parsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(currentToken,expectedOpts);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||expectedOpts.contains(argument)){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null||cmd.length()!=0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null&&cmd.length()!=0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||expectedOpts.length==stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||expectedOpts!=null){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[currentToken.length()-1];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||group==null){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||currentOption==null){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption||currentOption!=null){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130parsing){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130parsing=stopAtNonOption?checkRequiredOptions():null;
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(group);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null&&cmd.length()>0){checkRequiredOptions();}
