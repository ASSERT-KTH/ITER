projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130checkRequiredOptions();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(!stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(currentOption!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){String[]cmd=newString[cmd.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,expectedOpts.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[currentToken.length()];System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,currentToken.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||!stopAtNonOption){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length()==0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd==null||cmd.length()!=0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=currentOption.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsers();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsing();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkRequiredParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsing();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130options.checkState(stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,blockAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,null);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length()];System.arraycopy(arguments,0,cmd,0,argument.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.getOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(currentOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=currentOption.getGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentToken.parseOption(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=optionGroup.parseOption(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130||stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){checkParsing();}else{thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=currentOption.parseOption(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parse(argument,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(true);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(currentToken,stopAtNonOption);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()+1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(!stopParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130System.arraycopy(arguments,0,cmd,0,arguments.length);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[args.length()];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.getOption(argument,currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup();
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()+1];System.arraycopy(arguments,0,cmd,0,currentToken.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&cmd==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption&&currentOption!=null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(currentOption==null){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,nextToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optioncmd=options.parseOption(argument,block);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[cmd.length()-1];System.arraycopy(arguments,0,cmd,0,expectedOpts.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getGroup(currentToken);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(stopAtNonOption){String[]cmd=newString[arguments.length+1];System.arraycopy(arguments,0,cmd,0,arguments.length);}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(options);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130Optiongroup=options.getOptionGroup(argument);
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(skipParsing){checkRequiredOptions();}else{defaultParser=null;}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(!stopAtNonOption&&!skipParsing){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null&&cmd.length>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130if(cmd!=null&&cmd.length()>0){checkRequiredOptions();}
projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java130OptionGroupgroup=options.getOptionGroup(argument);
