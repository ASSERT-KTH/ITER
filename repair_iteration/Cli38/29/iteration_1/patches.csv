bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  ||  stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	||  stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    expectedOpts.length);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    expectedOpts.length);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    expectedOpts.length);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[currentToken.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[currentToken.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[currentToken.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    currentToken.length);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  String[]  cmd  =  new  String[currentToken.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  String[]  cmd  =  new  String[currentToken.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	String[]  cmd  =  new  String[currentToken.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    currentToken.length);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    currentToken.length);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
7	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  ||!stopAtNonOption)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	||!stopAtNonOption)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.getOption(stopAtNonOption);	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  if(cmd  ==  null)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(cmd  ==  null)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(cmd  ==  null)  {  checkRequiredOptions();  }	  if(cmd!=    null)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  if(cmd  ==  null  ||  cmd.length()  ==  0)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(cmd  ==  null  ||  cmd.length()  ==  0)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(cmd  ==  null  ||  cmd.length()  ==  0)  {  checkRequiredOptions();  }	  if(cmd!=    null)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  if(cmd  ==  null  ||  cmd.length()!=  0)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(cmd  ==  null  ||  cmd.length()!=  0)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(cmd  ==  null  ||  cmd.length()!=  0)  {  checkRequiredOptions();  }	  if(cmd!=    null)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  Option  group  =  options.getGroup();  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  group  =  options.getGroup();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  group  =  options.getGroup();	      Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  Option  group  =  currentOption.getOptionGroup();  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  group  =  currentOption.getOptionGroup();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  group  =  currentOption.getOptionGroup();	      Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(currentToken);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  group  =  options.getOptionGroup(currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  group  =  options.getOptionGroup(currentToken);	      Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredParsing();  }  else  {  defaultParser  =  null;  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredParsing();  }  else  {  defaultParser  =  null;  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  checkRequiredParsing();  }  else  {  defaultParser  =  null;  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    defaultParser    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredParsers();  }  else  {  defaultParser  =  null;  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredParsers();  }  else  {  defaultParser  =  null;  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  checkRequiredParsers();  }  else  {  defaultParser  =  null;  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    defaultParser    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkParsing();  }  else  {  defaultParser  =  null;  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkParsing();  }  else  {  defaultParser  =  null;  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  checkParsing();  }  else  {  defaultParser  =  null;  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    defaultParser    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(argument);  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentOption.getOption(argument);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentOption.getOption(argument);	      Option    cmd    =    options.getOption(argument);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(argument,  stopAtNonOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.getOption(argument,  stopAtNonOption);	      Option    cmd    =    options.getOption(argument);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkRequiredParsing();  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkRequiredParsing();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  checkRequiredParsing();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkParsing();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkParsing();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  checkParsing();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  options.checkState(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  options.checkState(stopAtNonOption);  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	options.checkState(stopAtNonOption);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(argument,  currentToken);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parseOption(argument,  currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parseOption(argument,  currentToken);	      Option    cmd    =    options.parseOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(argument,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parseOption(argument,  blockAtNonOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parseOption(argument,  blockAtNonOption);	      Option    cmd    =    options.parseOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =  currentOption.parseOption(argument,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentOption.parseOption(argument,  stopAtNonOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentOption.parseOption(argument,  stopAtNonOption);	      Option    cmd    =    options.parseOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(argument,  null);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parseOption(argument,  null);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parseOption(argument,  null);	      Option    cmd    =    options.parseOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    arguments.length);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    arguments.length);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  argument.length);  }  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  argument.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  argument.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    arguments.length);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(options);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentOption.getOption(options);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentOption.getOption(options);	      Option    cmd    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  Option  cmd  =  currentOption.getOption(currentToken);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentOption.getOption(currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentOption.getOption(currentToken);	      Option    cmd    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  Option  cmd  =  options.parse(argument,  currentOption);  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parse(argument,  currentOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parse(argument,  currentOption);	      Option    cmd    =    options.parse(argument);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  Option  cmd  =  options.parse(argument,  currentToken);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parse(argument,  currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parse(argument,  currentToken);	      Option    cmd    =    options.parse(argument);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(argument);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  OptionGroup  group  =  options.getGroup(argument);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	OptionGroup  group  =  options.getGroup(argument);	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(currentOption);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  OptionGroup  group  =  options.getGroup(currentOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	OptionGroup  group  =  options.getGroup(currentOption);	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  OptionGroup  group  =  currentOption.getGroup();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	OptionGroup  group  =  currentOption.getGroup();	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  Option  cmd  =  currentOption.parseOption(options);  [CE]  illegal  start  of  type  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentOption.parseOption(options);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentOption.parseOption(options);	      Option    cmd    =    options.parseOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  Option  cmd  =  currentToken.parseOption(options);  [CE]  illegal  start  of  type  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentToken.parseOption(options);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentToken.parseOption(options);	      Option    cmd    =    options.parseOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  Option  cmd  =  optionGroup.parseOption(currentToken);  [CE]  illegal  start  of  type  [FE]                    java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  optionGroup.parseOption(currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  optionGroup.parseOption(currentToken);	      Option    cmd    =    options.parseOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  checkParsing();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  checkParsing();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  checkParsing();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  Option  cmd  =  currentOption.parseOption(argument);  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  currentOption.parseOption(argument);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  currentOption.parseOption(argument);	      Option    cmd    =    options.parseOption(argument);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  Option  cmd  =  options.parse(argument,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parse(argument,  stopAtNonOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parse(argument,  stopAtNonOption);	      Option    cmd    =    options.parse(argument);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(true);  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  group  =  options.getOptionGroup(true);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  group  =  options.getOptionGroup(true);	      Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(currentToken,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(currentToken,  stopAtNonOption);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.getOption(currentToken,  stopAtNonOption);	      Option    cmd    =    options.getOption(currentToken);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    expectedOpts.length);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  if(!stopParsing)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(!stopParsing)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(!stopParsing)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    arguments.length);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[args.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[args.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[args.length()  ];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    arguments.length);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
51	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(argument,  currentToken);  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.getOption(argument,  currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.getOption(argument,  currentToken);	      Option    cmd    =    options.getOption(argument);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup();  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  OptionGroup  group  =  options.getOptionGroup();  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	OptionGroup  group  =  options.getOptionGroup();	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  currentToken.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    currentToken.length);    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption  &&  cmd!=  null)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption  &&  cmd!=  null)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption  &&  cmd!=  null)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption  &&  cmd  ==  null)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption  &&  cmd  ==  null)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption  &&  cmd  ==  null)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption  &&  currentOption!=  null)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption  &&  currentOption!=  null)  {  checkRequiredOptions();  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(currentOption  ==  null)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(currentOption  ==  null)  {  checkRequiredOptions();  }	  if(currentOption!=    null)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(argument,  nextToken);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parseOption(argument,  nextToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parseOption(argument,  nextToken);	      Option    cmd    =    options.parseOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
59	[BUG]  [BUGGY]  Option  cmd  =  options.parseOption(argument,  block);  [CE]  illegal  start  of  type  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  cmd  =  options.parseOption(argument,  block);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  cmd  =  options.parseOption(argument,  block);	      Option    cmd    =    options.parseOption(argument,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  -  1];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  -  1];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[cmd.length()  -  1];  System.arraycopy(arguments,  0,  cmd,  0,  expectedOpts.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    expectedOpts.length);    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup(currentToken);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  OptionGroup  group  =  options.getGroup(currentToken);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	OptionGroup  group  =  options.getGroup(currentToken);	      OptionGroup    group    =    options.getGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
62	[BUG]  [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(stopAtNonOption)  {  String[]  cmd  =  new  String[arguments.length  +  1];  System.arraycopy(arguments,  0,  cmd,  0,  arguments.length);  }	      if(stopAtNonOption)    {    String[]    cmd    =    new    String[cmd.length()    ];    System.arraycopy(arguments,    0,    cmd,    0,    arguments.length);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  group  =  options.getOptionGroup(options);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  group  =  options.getOptionGroup(options);	      Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
64	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(argument);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  Option  group  =  options.getOptionGroup(argument);  [BUGGY]    checkRequiredOptions();  return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	Option  group  =  options.getOptionGroup(argument);	      Option    group    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
65	[BUG]  [BUGGY]  if(skipParsing)  {  checkRequiredOptions();  }  else  {  defaultParser  =  null;  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(skipParsing)  {  checkRequiredOptions();  }  else  {  defaultParser  =  null;  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(skipParsing)  {  checkRequiredOptions();  }  else  {  defaultParser  =  null;  }	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    defaultParser    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  if(!stopAtNonOption  &&!skipParsing)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(!stopAtNonOption  &&!skipParsing)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(!stopAtNonOption  &&!skipParsing)  {  checkRequiredOptions();  }	  if(!stopAtNonOption)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  if(cmd!=  null  &&  cmd.length  >  0)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(cmd!=  null  &&  cmd.length  >  0)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(cmd!=  null  &&  cmd.length  >  0)  {  checkRequiredOptions();  }	  if(cmd!=    null)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  if(cmd!=  null  &&  cmd.length()  >  0)  {  checkRequiredOptions();  }  [CE]  illegal  start  of  type  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  if(cmd!=  null  &&  cmd.length()  >  0)  {  checkRequiredOptions();  }  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	if(cmd!=  null  &&  cmd.length()  >  0)  {  checkRequiredOptions();  }	  if(cmd!=    null)    {    checkRequiredOptions();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
69	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(argument);  [CE]  illegal  start  of  type  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    handleToken(argument);  }  }  checkRequiredArgs();  handleProperties(properties);    [BUGGY]  OptionGroup  group  =  options.getOptionGroup(argument);  [BUGGY]      return  cmd;  }  [CLASS]  DefaultParser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  CommandLine  cmd  boolean  skipParsing  stopAtNonOption  OptionGroup  group  Option  currentOption  List  expectedOpts  String  argument  currentToken  String[]  arguments  Properties  properties  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.5773502691896258	130	130	1	replace	OptionGroup  group  =  options.getOptionGroup(argument);	  if(stopAtNonOption)    {    checkRequiredOptions();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
