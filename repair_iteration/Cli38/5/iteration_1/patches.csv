bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(options.hasOption(optName)||  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName)||  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName)||  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }	  if(options.hasOption(optName))    {    return    options.hasShortOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  Option  option  =  options.hasOption(optName);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  option  =  options.hasOption(optName);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  option  =  options.hasOption(optName);	  if(options.hasOption(optName))    {    return    options.hasShortOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  return  options.hasOption(optName);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName))  {  return  options.hasOption(optName);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  return  options.hasOption(optName);  }	  return    options.hasOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  option  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  option  =  options.getOption(token);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	option  =  options.getOption(token);	      option    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  option  =  options.getOption(token);	      option    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  option  =  options.getOption(optionName);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  option  =  options.getOption(optionName);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	option  =  options.getOption(optionName);	      option    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(optName);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  currentOption.getOption(optName);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  currentOption.getOption(optName);	      Option    options    =    option.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  Option  options  =  option.getOption(token);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  option.getOption(token);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  option.getOption(token);	      Option    options    =    option.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  Option  options  =  option.getOption(optionName);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  option.getOption(optionName);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  option.getOption(optionName);	      Option    options    =    option.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  if(options.hasOption(optName)||  options.hasOption(optName))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName)||  options.hasOption(optName))  {  return  false;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName)||  options.hasOption(optName))  {  return  false;  }	  if(options.hasOption(optName))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
11	[BUG]  [BUGGY]  options.hasOption(optName)&&!token.startsWith( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  options.hasOption(optName)&&!token.startsWith( "- "))  {  return  false;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	options.hasOption(optName)&&!token.startsWith( "- "))  {  return  false;  }	  if(options.hasOption(optName))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    option    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    option    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  if(options.hasShortOption(optName))  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasShortOption(optName))  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasShortOption(optName))  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName))  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  if(options.hasShortOption(optName)||  options.hasShortOption(optName))  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasShortOption(optName)||  options.hasShortOption(optName))  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasShortOption(optName)||  options.hasShortOption(optName))  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options!=  null)  {  Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    options    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  Option  options  =  currentOption.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  currentOption.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  currentOption.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    options    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  options.getOption(token);	      Option    options    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  Option  options  =  options.getOption(optionName);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  options.getOption(optionName);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  options.getOption(optionName);	      Option    options    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  if(options.hasShortOption(optName)||  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasShortOption(optName)||  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasShortOption(optName)||  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
22	[BUG]  [BUGGY]  if(options.hasShortOption(optName)&&  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasShortOption(optName)&&  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasShortOption(optName)&&  options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(optionName);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  option  =  options.getOption(optionName);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  option  =  options.getOption(optionName);	      Option    option    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(optName,  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  option  =  options.getOption(optName,  value);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  option  =  options.getOption(optName,  value);	      Option    option    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  if(option!=  null)  {  option  =  options.getOption(optName);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(option!=  null)  {  option  =  options.getOption(optName);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(option!=  null)  {  option  =  options.getOption(optName);  }	      if(optName!=    null)    {    option    =    options.getOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  if(optName!=  null)  {  option  =  options.getOption(token);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(optName!=  null)  {  option  =  options.getOption(token);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(optName!=  null)  {  option  =  options.getOption(token);  }	      if(optName!=    null)    {    option    =    options.getOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(option!=  null)  {  Option  options  =  option.getOption(optName);  if(options!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(option!=  null)  {  Option  options  =  option.getOption(optName);  if(options!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(option!=  null)  {  Option  options  =  option.getOption(optName);  if(options!=  null)  {  expectedOpts.add(option);  }	      Option    options    =    option.getOption(optName);    if(options!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  if(option!=  null)  {  Option  options  =  option.getOption(optName);  if(options  ==  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(option!=  null)  {  Option  options  =  option.getOption(optName);  if(options  ==  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(option!=  null)  {  Option  options  =  option.getOption(optName);  if(options  ==  null)  {  expectedOpts.add(option);  }	      Option    options    =    option.getOption(optName);    if(options!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  return  options.hasOption(optName);  }  else  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName))  {  return  options.hasOption(optName);  }  else  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  return  options.hasOption(optName);  }  else  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  return  options.hasShortOption(optName);  }  else  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName))  {  return  options.hasShortOption(optName);  }  else  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  return  options.hasShortOption(optName);  }  else  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  if(options.hasOption(optName)||  options.hasOption(optName))  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName)||  options.hasOption(optName))  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName)||  options.hasOption(optName))  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  Option  options  =  options.hasOption(optName);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  options.hasOption(optName);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  options.hasOption(optName);	  if(options.hasOption(optName))    {    return    options.hasShortOption(optName);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    option    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  if(optName!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(optName!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(optName!=  null)  {  Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    option    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  return  options.getOption(optName);  }  else  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName))  {  return  options.getOption(optName);  }  else  {  expectedOpts.add(token);  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  return  options.getOption(optName);  }  else  {  expectedOpts.add(token);  }	  if(options.hasShortOption(optName))    {    return    options.hasShortOption(optName);    }    else    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  Option  options  =  options.getOption(optName,  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  Option  options  =  options.getOption(optName,  value);  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	Option  options  =  options.getOption(optName,  value);	      Option    options    =    options.getOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  return  options.hasOption(optName)?  options.get(pos):  options.get(pos);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  return  options.hasOption(optName)?  options.get(pos):  options.get(pos);  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	return  options.hasOption(optName)?  options.get(pos):  options.get(pos);	  return    options.hasOption(optName);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  if(options.hasOption(optName)||  option.hasOption(optName))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName)||  option.hasOption(optName))  {  return  false;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName)||  option.hasOption(optName))  {  return  false;  }	  if(options.hasOption(optName))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
39	[BUG]  [BUGGY]  if(options.hasOption(optName)&&  option.startsWith( "- "))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(options.hasOption(optName)&&  option.startsWith( "- "))  {  return  false;  }  [BUGGY]      }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName)&&  option.startsWith( "- "))  {  return  false;  }	  if(options.hasOption(optName))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
40	[BUG]  [BUGGY]  if(option!=  null)  {  Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  if  (!token.startsWith(   "-   ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf(   "=   ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);    [BUGGY]  if(option!=  null)  {  Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(option!=  null)  {  Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }	      Option    options    =    options.getOption(optName);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
