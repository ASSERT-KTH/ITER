bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option  option  =  options.getOption(optName);  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    Option  option  =  options.getOption(optName);  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    Option  option  =  options.getOption(optName);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
2	[BUG]  [BUGGY]    Option  options  =  option.getOption(optName);  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    Option  options  =  option.getOption(optName);  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    Option  options  =  option.getOption(optName);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    Option  option  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
4	[BUG]  [BUGGY]    Option  options  =  options.getOption(optName);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    Option  options  =  options.getOption(optName);  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    Option  options  =  options.getOption(optName);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
5	[BUG]  [BUGGY]    Option  options  =  option.getOption(optName);  if(options!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    Option  options  =  option.getOption(optName);  if(options!=  null)  {  expectedOpts.add(option);  }  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    Option  options  =  option.getOption(optName);  if(options!=  null)  {  expectedOpts.add(option);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
6	[BUG]  [BUGGY]  if(options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]  if(options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }	return  options.hasShortOption(optName);  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  if(options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  else  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]  if(options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  else  {  expectedOpts.add(token);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasShortOption(optName))  {  return  options.hasShortOption(optName);  }  else  {  expectedOpts.add(token);  }	return  options.hasShortOption(optName);  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  return  options.hasOption(optName);  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]  return  options.hasOption(optName);  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	return  options.hasOption(optName);	return  options.hasShortOption(optName);  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]    if(optName!=  null)  {  option  =  options.getOption(optName);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    if(optName!=  null)  {  option  =  options.getOption(optName);  }  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    if(optName!=  null)  {  option  =  options.getOption(optName);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
10	[BUG]  [BUGGY]    option  =  options.getOption(optName);  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    option  =  options.getOption(optName);  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    option  =  options.getOption(optName);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
11	[BUG]  [BUGGY]    Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]    Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]  return  options.hasShortOption(optName);  }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	    Option  options  =  options.getOption(optName);  if(option!=  null)  {  expectedOpts.add(option);  }		non-compiled	[CE]  illegal  start  of  expression	10	None	add
12	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  return  options.hasShortOption(optName);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]  if(options.hasOption(optName))  {  return  options.hasShortOption(optName);  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  return  options.hasShortOption(optName);  }	return  options.hasShortOption(optName);  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(options.hasOption(optName))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  if  (!token.startsWith( "- ")  ||  token.length()  ==  1)  {  return  false;  }  int  pos  =  token.indexOf( "= ");  String  optName  =  pos  ==  -1  ?  token.substring(1)  :  token.substring(1,  pos);  [BUGGY]  if(options.hasOption(optName))  {  return  false;  }  [BUGGY]    }  [CLASS]  DefaultParser  [METHOD]  isShortOption  [RETURN_TYPE]  boolean  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  optName  option  token  value  int  pos  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	310	310	1	replace	if(options.hasOption(optName))  {  return  false;  }	return  options.hasShortOption(optName);  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
