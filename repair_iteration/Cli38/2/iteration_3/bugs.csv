bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currentOption  =  option.nextToken().trim();  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.nextToken().trim();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.nextToken().trim();	  currentOption    =    option.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
2	[BUG]  [BUGGY]  currentOption  =  option.nextToken(),  value);  [CE]  ';'  expected  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.nextToken(),  value);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.nextToken(),  value);	  currentOption    =    option.nextToken();    	non-compiled	[CE]  ';'  expected	67	None	replace
3	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  expectedOpts.add(token);	  ||!switchParsing)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(token);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  expectedOpts.add(token);  }	  if(!stopAtNonOption)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
5	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(token,  expectedOpts);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(token,  expectedOpts);	  currentOption    =    options.getOption(token,    value);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
6	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  value,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(token,  value,  expectedOpts);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(token,  value,  expectedOpts);	  currentOption    =    options.getOption(token,    value);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
7	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  value  +  1);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(token,  value  +  1);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(token,  value  +  1);	  currentOption    =    options.getOption(token,    value);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
8	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(currentOption);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  expectedOpts.add(currentOption);  }	  if(!stopAtNonOption)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
9	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(currentOption);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(currentOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  expectedOpts.add(currentOption);	  if(!stopAtNonOption)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
10	[BUG]  [BUGGY]  ||  skipParsing)  {  expectedOpts.add(option);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  skipParsing)  {  expectedOpts.add(option);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  skipParsing)  {  expectedOpts.add(option);	  if(switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
11	[BUG]  [BUGGY]  ||  skipParsing)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  skipParsing)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  skipParsing)  {  expectedOpts.add(option);  }	  if(switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
12	[BUG]  [BUGGY]  ||!currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsParser())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
13	[BUG]  [BUGGY]  ||  currentOption.acceptsShortArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsShortArg())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsShortArg())  {  expectedOpts.add(token);	  ||    currentOption.acceptsLongArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArg())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArg())  {  expectedOpts.add(token);	  ||    currentOption.acceptsLongArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  ||!currentOption.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  }	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
16	[BUG]  [BUGGY]  ||!currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  }	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
17	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArg())  {  throw  new  IllegalArgumentException( " ");  }	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
18	[BUG]  [BUGGY]  ||!currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsArgument())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
19	[BUG]  [BUGGY]  ||  currentOption.acceptsShortArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsShortArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsShortArgument())  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsArgument())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
20	[BUG]  [BUGGY]  currentOption  =  options.getOption(value,  option);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(value,  option);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(value,  option);	  currentOption    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
21	[BUG]  [BUGGY]  ||  skipParsing)  {  expectedOpts.add(currentOption);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  skipParsing)  {  expectedOpts.add(currentOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  skipParsing)  {  expectedOpts.add(currentOption);	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
22	[BUG]  [BUGGY]  if(select)  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(select)  {  expectedOpts.add(currentOption);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(select)  {  expectedOpts.add(currentOption);  }	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
23	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(option);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.None.valueOf(option);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(option);	  currentOption    =    Option.None.valueOf(value);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
24	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(expectedOpts);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.None.valueOf(expectedOpts);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(expectedOpts);	  currentOption    =    Option.None.valueOf(value);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
25	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(argument);  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.None.valueOf(argument);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(argument);	  currentOption    =    Option.None.valueOf(value);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
27	[BUG]  [BUGGY]  ||!currentOption.acceptsAssignmentOpt())  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsAssignmentOpt())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsAssignmentOpt())  {	  ||    currentOption.acceptsAssignmentOpt())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
28	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArgument())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArgument())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArgument())  {	  ||    currentOption.acceptsLongArgument())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
29	[BUG]  [BUGGY]  ||  currentOption.acceptsShortArgument())  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsShortArgument())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsShortArgument())  {	  ||    currentOption.acceptsLongArgument())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
30	[BUG]  [BUGGY]  ||!currentOption.acceptsArgument())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArgument())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArgument())  {	  ||    currentOption.acceptsArgument())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
31	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument(token))  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArgument(token))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument(token))  {	  ||    currentOption.acceptsArgument())    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
32	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(argument);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  currentOption  =  options.getOption(argument);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(argument);	  Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
33	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(options,  token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  currentOption  =  options.getOption(options,  token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(options,  token);	  Option    currentOption    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
35	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsParser())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsParser())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsParser())  {  expectedOpts.add(option);  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
36	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
37	[BUG]  [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  }	  ||    currentOption.acceptsArg())    {    throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
38	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  UnsupportedOperationException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument())  {  throw  new  UnsupportedOperationException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
39	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(argument);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(argument);  if(option!=  null)  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(value);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(currentToken);  if(option!=  null)  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(value);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
41	[BUG]  [BUGGY]  ||!currentOption.acceptsParser())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsParser())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsParser())  {	  ||    currentOption.acceptsParser())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
42	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  ||!switchParsing)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
43	[BUG]  [BUGGY]  if(currentOption!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(currentOption!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(currentOption!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }	  if(option!=    null)    {    Option    option    =    options.getOption(token);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsLongArgument())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
45	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArg())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArg())  {	  ||    currentOption.acceptsLongArg())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
46	[BUG]  [BUGGY]  ||  currentOption.acceptsShortArg())  {  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsShortArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsShortArg())  {	  ||    currentOption.acceptsLongArg())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
47	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  currentOption.getOption(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  currentOption.getOption(token);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
49	[BUG]  [BUGGY]  Option  option  =  options.getOption(currentOption);  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(currentOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(currentOption);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
50	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(token)+  1;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.None.valueOf(token)+  1;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(token)+  1;	  currentOption    =    Option.None.valueOf(token);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
51	[BUG]  [BUGGY]  ||!currentOption.acceptsRaw())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsRaw())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsRaw())  {	  ||!currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
52	[BUG]  [BUGGY]  acceptSwitchParsing(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  acceptSwitchParsing(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	acceptSwitchParsing(token);	  allowSwitchParsing(token);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
53	[BUG]  [BUGGY]  allowSwitchParsing(token,  currentOption);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  allowSwitchParsing(token,  currentOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowSwitchParsing(token,  currentOption);	  allowSwitchParsing(token);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
54	[BUG]  [BUGGY]  allowSwitchParsing(token,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  allowSwitchParsing(token,  expectedOpts);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowSwitchParsing(token,  expectedOpts);	  allowSwitchParsing(token);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
55	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(token);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
56	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");	  ||    currentOption.acceptsLongArgument())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
57	[BUG]  [BUGGY]  ||  currentOption.acceptsShortArgument())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsShortArgument())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsShortArgument())  {  throw  new  IllegalArgumentException( " ");	  ||    currentOption.acceptsLongArgument())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
58	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(argument))  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg(argument))  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(argument))  {  expectedOpts.add(token);	  ||    currentOption.acceptsArg(value))    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
59	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(option))  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg(option))  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(option))  {  expectedOpts.add(token);	  ||    currentOption.acceptsArg(value))    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
60	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(token))  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg(token))  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(token))  {  expectedOpts.add(token);	  ||    currentOption.acceptsArg(value))    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
61	[BUG]  [BUGGY]  expectedOpts.add(currentOption.toString());  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  expectedOpts.add(currentOption.toString());  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(currentOption.toString());	  expectedOpts.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
62	[BUG]  [BUGGY]  expectedOpts.add(currentOption.getValue());  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  expectedOpts.add(currentOption.getValue());  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(currentOption.getValue());	  expectedOpts.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
63	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArg())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {  throw  new  IllegalArgumentException( " ");	  ||    currentOption.acceptsLongArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
64	[BUG]  [BUGGY]  ||  currentOption.acceptsShortArg())  {  return;  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsShortArg())  {  return;  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsShortArg())  {  return;	  ||    currentOption.acceptsLongArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
65	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArg())  {  return;  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {  return;  }	  ||    currentOption.acceptsArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
66	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option,  token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  currentOption  =  options.getOption(option,  token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(option,  token);	  Option    currentOption    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
67	[BUG]  [BUGGY]  currentOption  =  option.clone();  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.clone();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.clone();	  currentOption    =    option.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
68	[BUG]  [BUGGY]  currentOption  =  options.cloneTree();  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.cloneTree();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.cloneTree();	  currentOption    =    option.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
69	[BUG]  [BUGGY]  currentOption  =  option.clonePosition();  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.clonePosition();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.clonePosition();	  currentOption    =    option.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  ||!currentOption.acceptsRawParser())  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsRawParser())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsRawParser())  {	  ||    currentOption.acceptsRawParser())    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
71	[BUG]  [BUGGY]  ||  currentOption.acceptsRawArg())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsRawArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsRawArg())  {	  ||    currentOption.acceptsRawParser())    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
72	[BUG]  [BUGGY]  expectedOpts.add(token,  currentOption);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  expectedOpts.add(token,  currentOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(token,  currentOption);	  expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  expectedOpts.add(value);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  expectedOpts.add(value);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(value);	  expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  currentOption  =  options.get(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.get(token);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.get(token);	  currentOption    =    options.next();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
75	[BUG]  [BUGGY]  currentOption  =  options.get();  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.get();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.get();	  currentOption    =    options.next();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
76	[BUG]  [BUGGY]  trec  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  trec  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trec  {  throw  new  IllegalArgumentException( " ");  }	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	28	None	replace
77	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalArgumentException( "Assertion  error: "  +  token);  }  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  trecută  {  throw  new  IllegalArgumentException( "Assertion  error: "  +  token);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trecută  {  throw  new  IllegalArgumentException( "Assertion  error: "  +  token);  }	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	28	None	replace
78	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalArgumentException( "Assertion  error: ");  }  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  trecută  {  throw  new  IllegalArgumentException( "Assertion  error: ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trecută  {  throw  new  IllegalArgumentException( "Assertion  error: ");  }	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	28	None	replace
79	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(option);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(option);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  expectedOpts.add(option);	  ||!switchParsing)    {    expectedOpts.add(option);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
80	[BUG]  [BUGGY]  ||!currentOption.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.canHaveSideEffects())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.canHaveSideEffects())  {	  ||    currentOption.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
81	[BUG]  [BUGGY]  ||  currentOption.canHaveSideEffects()  &&  token!=  null)  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.canHaveSideEffects()  &&  token!=  null)  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.canHaveSideEffects()  &&  token!=  null)  {	  ||    currentOption.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
82	[BUG]  [BUGGY]  ||  currentOption.shouldHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.shouldHaveSideEffects())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.shouldHaveSideEffects())  {	  ||    currentOption.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(token);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option    ==    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
84	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
85	[BUG]  [BUGGY]  options.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  options.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.add(token);	  options.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
86	[BUG]  [BUGGY]  ||  currentOption.acceptsArg())  {  expectedOpts  =  new  ArrayList  <  Option>();  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg())  {  expectedOpts  =  new  ArrayList  <  Option>();  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg())  {  expectedOpts  =  new  ArrayList  <  Option>();	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
87	[BUG]  [BUGGY]  ||!currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");	  ||    currentOption.acceptsParser())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
88	[BUG]  [BUGGY]  currentOption  =  opt.clone();  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  opt.clone();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  opt.clone();	  currentOption    =    opt.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
89	[BUG]  [BUGGY]  ||!currentOption.acceptsArgument())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArgument())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArgument())  {  expectedOpts.add(token);	  ||!currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(token);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
91	[BUG]  [BUGGY]  if(!switchParsing)  {  aughtException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!switchParsing)  {  aughtException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing)  {  aughtException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
92	[BUG]  [BUGGY]  if(currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
93	[BUG]  [BUGGY]  handleUnknownToken(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  handleUnknownToken(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	handleUnknownToken(token);	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
94	[BUG]  [BUGGY]  currentOption  =  options.getOption(argument);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(argument);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(argument);	  currentOption    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
95	[BUG]  [BUGGY]  currentOption  =  options.nextToken().trim();  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.nextToken().trim();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken().trim();	  currentOption    =    options.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
96	[BUG]  [BUGGY]  currentOption  =  options.nextToken(),  value);  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.nextToken(),  value);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken(),  value);	  currentOption    =    options.nextToken();    	non-compiled	[CE]  ';'  expected	20	None	replace
97	[BUG]  [BUGGY]  currentOption  =  options.nextToken()  +  1;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.nextToken()  +  1;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken()  +  1;	  currentOption    =    options.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
98	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  currentOption.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  currentOption.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(token);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
99	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
100	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
101	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
102	[BUG]  [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  }	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
103	[BUG]  [BUGGY]  ||  currentOption.acceptsRaw())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsRaw())  {  throw  new  IllegalStateException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsRaw())  {  throw  new  IllegalStateException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
104	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  currentOption.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  currentOption.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
105	[BUG]  [BUGGY]  ||  currentOption.acceptsArgumentOpt())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArgumentOpt())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgumentOpt())  {  expectedOpts.add(token);	  ||    currentOption.acceptsAssignmentOpt())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
106	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
107	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(token);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
108	[BUG]  [BUGGY]  ||  currentOption.hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  ||    currentOption.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
109	[BUG]  [BUGGY]  ||  currentOption.hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasArg()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  ||    currentOption.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
110	[BUG]  [BUGGY]  acceptParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  acceptParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	acceptParsing)  {  throw  new  IllegalArgumentException( " ");  }	  allowParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
111	[BUG]  [BUGGY]  acceptParsing())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  acceptParsing())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	acceptParsing())  {  throw  new  IllegalArgumentException( " ");  }	  allowParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
112	[BUG]  [BUGGY]  currentOption  =  options.toString();  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.toString();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.toString();	  currentOption    =    option.toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
113	[BUG]  [BUGGY]  currentOption  =  option.toString()  + "n ";  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.toString()  + "n ";  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.toString()  + "n ";	  currentOption    =    option.toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
114	[BUG]  [BUGGY]  currentOption  =  option.toString()  + ": "  +  token;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.toString()  + ": "  +  token;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.toString()  + ": "  +  token;	  currentOption    =    option.toString();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
115	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  currentOption.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  currentOption.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(token);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
116	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsShortAndLong())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsShortAndLong())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsShortAndLong())  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(token);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
117	[BUG]  [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  ||  option.acceptsArg();  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  ||  option.acceptsArg();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.NON_OPTIONAL_ARRAY  ||  option.acceptsArg();	  currentOption    =    Option.NON_OPTIONAL_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
118	[BUG]  [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  +  token;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  +  token;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.NON_OPTIONAL_ARRAY  +  token;	  currentOption    =    Option.NON_OPTIONAL_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
119	[BUG]  [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  &&  expectedOpts.contains(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  &&  expectedOpts.contains(token);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.NON_OPTIONAL_ARRAY  &&  expectedOpts.contains(token);	  currentOption    =    Option.NON_OPTIONAL_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
120	[BUG]  [BUGGY]  Option  option  =  currentOption.getOption(option);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  currentOption.getOption(option);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  currentOption.getOption(option);	  Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
121	[BUG]  [BUGGY]  currentOption  =  options.getOption(value,  token);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(value,  token);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(value,  token);	  currentOption    =    options.getOption(option,    token);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
122	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  option);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(token,  option);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(token,  option);	  currentOption    =    options.getOption(option,    token);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
123	[BUG]  [BUGGY]  currentOption  =  options.getOption(option,  token,  expectedOpts);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(option,  token,  expectedOpts);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(option,  token,  expectedOpts);	  currentOption    =    options.getOption(option,    token);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
124	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument(value))  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArgument(value))  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument(value))  {  expectedOpts.add(token);	  ||    currentOption.acceptsArgument())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
125	[BUG]  [BUGGY]  parsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  parsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	parsing)  {  throw  new  IllegalArgumentException( " ");  }	  bucketParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	27	None	replace
126	[BUG]  [BUGGY]  bucketParser)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  bucketParser)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	bucketParser)  {  throw  new  IllegalArgumentException( " ");  }	  bucketParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	27	None	replace
127	[BUG]  [BUGGY]  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  expectedOpts.contains(option))  {  expectedOpts.add(option);	  if(!switchParsing    &&    expectedOpts.contains(option))    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
128	[BUG]  [BUGGY]  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	  if(!switchParsing    &&    expectedOpts.contains(option))    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
129	[BUG]  [BUGGY]  if(!switchParsing  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!switchParsing  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	  if(!switchParsing    &&    expectedOpts.contains(option))    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
130	[BUG]  [BUGGY]  ||!currentOption.acceptsParser())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsParser())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsParser())  {  expectedOpts.add(token);	  ||    currentOption.acceptsParser())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
131	[BUG]  [BUGGY]  ||  currentOption.acceptsString())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsString())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsString())  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsRaw())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
132	[BUG]  [BUGGY]  ||!currentOption.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLong())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLong())  {  throw  new  IllegalArgumentException( " ");	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
133	[BUG]  [BUGGY]  ||!currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
134	[BUG]  [BUGGY]  ||!currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
135	[BUG]  [BUGGY]  ||!currentOption.acceptsShortArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsShortArg())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsShortArg())  {  expectedOpts.add(token);	  ||!currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
136	[BUG]  [BUGGY]  ||!currentOption.acceptsLong())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLong())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLong())  {  expectedOpts.add(token);	  ||!currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
137	[BUG]  [BUGGY]  ||  currentOption.acceptsBooleanArg())  {  return;  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsBooleanArg())  {  return;  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsBooleanArg())  {  return;	  ||    currentOption.acceptsLongArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
138	[BUG]  [BUGGY]  aughtExceptionHandler.handleSwitchParsing(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  aughtExceptionHandler.handleSwitchParsing(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	aughtExceptionHandler.handleSwitchParsing(token);	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
139	[BUG]  [BUGGY]  pending)  {  expectedOpts.add(currentOption);  }  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  pending)  {  expectedOpts.add(currentOption);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	pending)  {  expectedOpts.add(currentOption);  }	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  not  a  statement	89	None	replace
140	[BUG]  [BUGGY]  pending)  {  expectedOpts.add(currentOption);  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  pending)  {  expectedOpts.add(currentOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	pending)  {  expectedOpts.add(currentOption);	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  not  a  statement	89	None	replace
141	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  IllegalStateException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  throw  new  IllegalStateException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
142	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArg())  {  throw  new  IllegalStateException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {  throw  new  IllegalStateException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
143	[BUG]  [BUGGY]  ||  currentOption.mayHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.mayHaveSideEffects())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.mayHaveSideEffects())  {	  ||    currentOption.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
144	[BUG]  [BUGGY]  ||  currentOption.canHaveSideEffects(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.canHaveSideEffects(value))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.canHaveSideEffects(value))  {	  ||    currentOption.canHaveSideEffects())    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
145	[BUG]  [BUGGY]  ||!currentOption.acceptsBoolean())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsBoolean())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsBoolean())  {  throw  new  IllegalArgumentException( " ");	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
146	[BUG]  [BUGGY]  currentOption  =  option.cloneToken();  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.cloneToken();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.cloneToken();	  currentOption    =    option.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
147	[BUG]  [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  +  1;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  +  1;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.NON_OPTIONAL_ARRAY  +  1;	  currentOption    =    Option.NON_OPTIONAL_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
148	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(currentOption);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.None.valueOf(currentOption);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(currentOption);	  currentOption    =    Option.None.valueOf(token);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
149	[BUG]  [BUGGY]  if(currentOption.acceptsArg())  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(currentOption.acceptsArg())  {  expectedOpts.add(token);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(currentOption.acceptsArg())  {  expectedOpts.add(token);  }	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
150	[BUG]  [BUGGY]  ||  currentOption.hasArgs())  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.hasArgs())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasArgs())  {	  ||    currentOption.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
151	[BUG]  [BUGGY]  ||  currentOption.nextToken().hasArg())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.nextToken().hasArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.nextToken().hasArg())  {	  ||    currentOption.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
152	[BUG]  [BUGGY]  Option  option  =  options.getOption(argument);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(argument);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(argument);	  Option    option    =    options.getOption(value);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
153	[BUG]  [BUGGY]  skipParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  skipParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	skipParsing)  {  throw  new  IllegalArgumentException( " ");  }	  bucketParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	27	None	replace
154	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.hasArg())  {  expectedOpts.add(option);  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
155	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  UnsupportedOperationException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  throw  new  UnsupportedOperationException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
156	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArg())  {  throw  new  UnsupportedOperationException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {  throw  new  UnsupportedOperationException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
157	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(value))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg(value))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(value))  {	  ||    currentOption.acceptsRawParser())    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
158	[BUG]  [BUGGY]  allowParsing  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  allowParsing  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowParsing  &&  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  allowParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	54	None	replace
159	[BUG]  [BUGGY]  expectedOpts.add(currentOption.getArg());  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  expectedOpts.add(currentOption.getArg());  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(currentOption.getArg());	  expectedOpts.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
160	[BUG]  [BUGGY]  ||!currentOption.hasArg())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.hasArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.hasArg())  {	  ||!currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
161	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option,  value);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  currentOption  =  options.getOption(option,  value);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(option,  value);	  Option    currentOption    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
162	[BUG]  [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option  ==  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }	  if(option!=    null)    {    Option    option    =    options.getOption(token);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
163	[BUG]  [BUGGY]  if(!switchParsing  &&  options.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!switchParsing  &&  options.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing  &&  options.contains(option))  {  expectedOpts.add(option);  }	  if(!switchParsing    &&    expectedOpts.contains(option))    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
164	[BUG]  [BUGGY]  allowSwitchParsing(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  allowSwitchParsing(value);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowSwitchParsing(value);	  allowSwitchParsing(token);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
165	[BUG]  [BUGGY]  allowSwitchParsing(option);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  allowSwitchParsing(option);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowSwitchParsing(option);	  allowSwitchParsing(token);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
166	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }	  Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
167	[BUG]  [BUGGY]  currentOption  =  option.nextToken()  +  1;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.nextToken()  +  1;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.nextToken()  +  1;	  currentOption    =    option.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
168	[BUG]  [BUGGY]  currentOption  =  option.nextToken()  -  1;  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  option.nextToken()  -  1;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.nextToken()  -  1;	  currentOption    =    option.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
169	[BUG]  [BUGGY]  options.add(currentOption.getValue());  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  options.add(currentOption.getValue());  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.add(currentOption.getValue());	  options.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
170	[BUG]  [BUGGY]  options.add(currentOption.getArg());  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  options.add(currentOption.getArg());  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.add(currentOption.getArg());	  options.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
171	[BUG]  [BUGGY]  ||  currentOption.acceptsBooleanArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsBooleanArg())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsBooleanArg())  {  expectedOpts.add(token);	  ||    currentOption.acceptsLongArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
172	[BUG]  [BUGGY]  options.add(value);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  options.add(value);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.add(value);	  options.add(option);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
173	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsParser())  {  return;  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  return;  }	  ||    currentOption.acceptsArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
174	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.hasArg())  {  return;  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasArg())  {  return;  }	  ||    currentOption.acceptsArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
175	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArg())  {  return;  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {  return;  }	  ||    currentOption.acceptsArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
176	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!stopAtNonOption)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!stopAtNonOption)  {  expectedOpts.add(option);  }	  ||!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
177	[BUG]  [BUGGY]  if(!switchParsing)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!switchParsing)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing)  {  throw  new  IllegalStateException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
178	[BUG]  [BUGGY]  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
179	[BUG]  [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
180	[BUG]  [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option    ==    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
181	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option    ==    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
182	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(value);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option    ==    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
183	[BUG]  [BUGGY]  Opts.checkArgument(!stopAtNonOption)  {  expectedOpts.add(token);  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Opts.checkArgument(!stopAtNonOption)  {  expectedOpts.add(token);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Opts.checkArgument(!stopAtNonOption)  {  expectedOpts.add(token);  }	  if(!stopAtNonOption)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
184	[BUG]  [BUGGY]  trecut  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  trecut  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trecut  {  throw  new  IllegalArgumentException( " ");  }	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	28	None	replace
185	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalStateException( " ");  }  [CE]  not  a  statement  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  trecută  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trecută  {  throw  new  IllegalStateException( " ");  }	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	28	None	replace
186	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalArgumentException( " "));  }  [CE]  not  a  statement  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  trecută  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trecută  {  throw  new  IllegalArgumentException( " "));  }	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	28	None	replace
187	[BUG]  [BUGGY]  ||!currentOption.acceptsBoolean())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsBoolean())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsBoolean())  {  throw  new  IllegalArgumentException( " ");  }	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
188	[BUG]  [BUGGY]  ||!currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.hasArg())  {  throw  new  IllegalArgumentException( " ");  }	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
189	[BUG]  [BUGGY]  currentOption  =  options.nextToken(value);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.nextToken(value);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken(value);	  currentOption    =    options.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
190	[BUG]  [BUGGY]  currentOption  =  options.nextToken()  -  1;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.nextToken()  -  1;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken()  -  1;	  currentOption    =    options.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
191	[BUG]  [BUGGY]  currentOption  =  options.get(option);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.get(option);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.get(option);	  currentOption    =    options.next();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
192	[BUG]  [BUGGY]  ||  currentOption.acceptsArgumentOpt())  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArgumentOpt())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgumentOpt())  {	  ||    currentOption.acceptsAssignmentOpt())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
193	[BUG]  [BUGGY]  ||  currentOption.acceptsBooleanArg())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsBooleanArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsBooleanArg())  {	  ||    currentOption.acceptsLongArg())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
194	[BUG]  [BUGGY]  if(!switchParsing  &&  preferredOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!switchParsing  &&  preferredOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing  &&  preferredOpts.contains(option))  {  expectedOpts.add(option);  }	  if(!switchParsing    &&    expectedOpts.contains(option))    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
195	[BUG]  [BUGGY]  ||  currentOption.hasArg(token))  {  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.hasArg(token))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasArg(token))  {	  ||    currentOption.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
196	[BUG]  [BUGGY]  ||  currentOption.hasMoreArgs())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.hasMoreArgs())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasMoreArgs())  {	  ||    currentOption.hasArg())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
197	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	  if(option!=    null)    {    Option    option    =    options.getOption(token);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
198	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(token))  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg(token))  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(token))  {	  ||    currentOption.acceptsParser())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
199	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArgument())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArgument())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArgument())  {  expectedOpts.add(token);	  ||    currentOption.acceptsArgument())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
200	[BUG]  [BUGGY]  if(switchParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(switchParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(switchParsing)  {  throw  new  IllegalArgumentException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
201	[BUG]  [BUGGY]  if(!switchParsing)  {  throw  new  RuntimeException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!switchParsing)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing)  {  throw  new  RuntimeException( " ");  }	  aughtException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
202	[BUG]  [BUGGY]  ||  currentOption.acceptsMoreArgument())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsMoreArgument())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsMoreArgument())  {	  ||    currentOption.acceptsLongArgument())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
203	[BUG]  [BUGGY]  ||  currentOption.acceptsNonOption())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsNonOption())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsNonOption())  {  expectedOpts.add(token);	  ||    currentOption.acceptsLongArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
204	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  expectedOpts.contains(token))  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!stopAtNonOption  &&  expectedOpts.contains(token))  {  expectedOpts.add(token);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!stopAtNonOption  &&  expectedOpts.contains(token))  {  expectedOpts.add(token);  }	  if(!stopAtNonOption)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
205	[BUG]  [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  + ": "  +  token;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY  + ": "  +  token;  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.NON_OPTIONAL_ARRAY  + ": "  +  token;	  currentOption    =    Option.NON_OPTIONAL_ARRAY;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
206	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
207	[BUG]  [BUGGY]  expectedOpts.add(token,  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  expectedOpts.add(token,  value);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(token,  value);	  expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
208	[BUG]  [BUGGY]  ||  currentOption.acceptsMoreArg())  {  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsMoreArg())  {  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsMoreArg())  {	  ||    currentOption.acceptsLongArg())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
209	[BUG]  [BUGGY]  ||  token.acceptsAssignmentOpt())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  token.acceptsAssignmentOpt())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  token.acceptsAssignmentOpt())  {  expectedOpts.add(token);	  ||    currentOption.acceptsAssignmentOpt())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
210	[BUG]  [BUGGY]  acceptParsing(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  acceptParsing(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	acceptParsing(token))  {  throw  new  IllegalArgumentException( " ");  }	  allowParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
211	[BUG]  [BUGGY]  acceptParsing(token)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  acceptParsing(token)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	acceptParsing(token)  {  throw  new  IllegalArgumentException( " ");  }	  allowParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	54	None	replace
212	[BUG]  [BUGGY]  Option  option  =  options.getOption(key);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  Option  option  =  options.getOption(key);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(key);	  Option    option    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
213	[BUG]  [BUGGY]  ||  currentOption.acceptsBoolean())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsBoolean())  {  return;  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsBoolean())  {  return;  }	  ||    currentOption.acceptsArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
214	[BUG]  [BUGGY]  currentOption  =  currentOption.cloneTree();  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  currentOption.cloneTree();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  currentOption.cloneTree();	  currentOption    =    opt.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
215	[BUG]  [BUGGY]  bucketParser())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  bucketParser())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	bucketParser())  {  throw  new  IllegalArgumentException( " ");  }	  bucketParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
216	[BUG]  [BUGGY]  acceptToken())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  acceptToken())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	acceptToken())  {  throw  new  IllegalArgumentException( " ");  }	  bucketParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
217	[BUG]  [BUGGY]  ||!currentOption.acceptsLongArgument())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsLongArgument())  {  expectedOpts.add(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsLongArgument())  {  expectedOpts.add(token);	  ||!currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
218	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  IllegalStateException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArgument())  {  throw  new  IllegalStateException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
219	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  IllegalStateException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument())  {  throw  new  IllegalStateException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
220	[BUG]  [BUGGY]  currentOption  =  options.getOption(argument,  value);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.getOption(argument,  value);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(argument,  value);	  currentOption    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
221	[BUG]  [BUGGY]  options.addOption(option);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  options.addOption(option);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.addOption(option);	  options.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
222	[BUG]  [BUGGY]  options.addOption(opt);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  options.addOption(opt);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.addOption(opt);	  options.add(currentOption);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
223	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  UnsupportedOperationException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArgument())  {  throw  new  UnsupportedOperationException( " ");	  ||    currentOption.acceptsArg())    {    throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
224	[BUG]  [BUGGY]  ||  currentOption.acceptsBooleanArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsBooleanArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsBooleanArgument())  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsLongArgument())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
225	[BUG]  [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
226	[BUG]  [BUGGY]  currentOption  =  options.clone();  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.clone();  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.clone();	  currentOption    =    option.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
227	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	throw  new  IllegalArgumentException( " ");	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
228	[BUG]  [BUGGY]  passException( " ");  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  passException( " ");  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	passException( " ");	  trecută    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
229	[BUG]  [BUGGY]  if(!skipParsing)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(!skipParsing)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!skipParsing)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
230	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	  if(option!=    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
231	[BUG]  [BUGGY]  aughtExceptionHandler.handleShortAndLongOption(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  aughtExceptionHandler.handleShortAndLongOption(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	aughtExceptionHandler.handleShortAndLongOption(token);	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
232	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException(token);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  aughtExceptionHandler.handleMissingException(token);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	aughtExceptionHandler.handleMissingException(token);	  if(switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
233	[BUG]  [BUGGY]  currentOption  =  options.nextToken(token);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  currentOption  =  options.nextToken(token);  [BUGGY]      }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken(token);	  currentOption    =    options.nextToken();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
234	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsShortArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsShortArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsShortArg())  {  expectedOpts.add(option);  }	  if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    &&    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
235	[BUG]  [BUGGY]  ||!currentOption.acceptsBlock())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||!currentOption.acceptsBlock())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsBlock())  {  throw  new  IllegalArgumentException( " ");  }	  ||!currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
236	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(token))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  ||  currentOption.acceptsArg(token))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(token))  {  throw  new  IllegalArgumentException( " ");  }	  ||    currentOption.acceptsParser())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
237	[BUG]  [BUGGY]  allowSwitchParsing(token,  stopAtNonOption);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  allowSwitchParsing(token,  stopAtNonOption);  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowSwitchParsing(token,  stopAtNonOption);	  allowSwitchParsing(token);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
238	[BUG]  [BUGGY]  if(option!=  null  &&  option.acceptsArg())  {  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null      [CONTEXT]      {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {      [BUGGY]  if(option!=  null  &&  option.acceptsArg())  {  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]      currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null  &&  option.acceptsArg())  {  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }	  Option    option    =    options.getOption(token);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
