bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    ||  currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    ||  currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    ||  currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");		non-compiled	[CE]  illegal  start  of  expression	4	None	add
2	[BUG]  [BUGGY]    ||  currentOption.acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    ||  currentOption.acceptsArg())  {  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    ||  currentOption.acceptsArg())  {		non-compiled	[CE]  illegal  start  of  expression	4	None	add
3	[BUG]  [BUGGY]    ||  currentOption.acceptsArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    ||  currentOption.acceptsArg())  {  expectedOpts.add(token);  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    ||  currentOption.acceptsArg())  {  expectedOpts.add(token);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
4	[BUG]  [BUGGY]    ||  currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    ||  currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    ||  currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
5	[BUG]  [BUGGY]    ||  currentOption.acceptsArg())  {  return;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    ||  currentOption.acceptsArg())  {  return;  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    ||  currentOption.acceptsArg())  {  return;		non-compiled	[CE]  illegal  start  of  expression	4	None	add
6	[BUG]  [BUGGY]  currentOption  =  option;  [CE]  illegal  start  of  type  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]  currentOption  =  option;  [BUGGY]  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option;	currentOption  =  null;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  currentOption  =  options;  [CE]  illegal  start  of  type  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]  currentOption  =  options;  [BUGGY]  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options;	currentOption  =  null;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  currentOption  =  opt;  [CE]  illegal  start  of  type  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]  currentOption  =  opt;  [BUGGY]  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  opt;	currentOption  =  null;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]    if(!switchParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(!switchParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(!switchParsing)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]  currentOption  =  options.getOption(token);  [CE]  illegal  start  of  type  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]  currentOption  =  options.getOption(token);  [BUGGY]  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(token);	currentOption  =  null;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  currentOption  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]  currentOption  =  options.getOption(option);  [BUGGY]  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(option);	currentOption  =  null;  	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]    if(!switchParsing)  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(!switchParsing)  {  expectedOpts.add(token);  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(!switchParsing)  {  expectedOpts.add(token);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
16	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]      java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    Option  currentOption  =  options.getOption(token);  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    Option  currentOption  =  options.getOption(token);		non-compiled	[CE]  illegal  start  of  expression	4	None	add
17	[BUG]  [BUGGY]    if(!switchParsing)  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(!switchParsing)  {  expectedOpts.add(currentOption);  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(!switchParsing)  {  expectedOpts.add(currentOption);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
18	[BUG]  [BUGGY]    if(!switchParsing)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null  [CONTEXT]  {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {  [BUGGY]    if(!switchParsing)  {  expectedOpts.add(option);  }  [BUGGY]  currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	    if(!switchParsing)  {  expectedOpts.add(option);  }		non-compiled	[CE]  illegal  start  of  expression	4	None	add
