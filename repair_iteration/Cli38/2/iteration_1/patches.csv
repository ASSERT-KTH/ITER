bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!currentOption.acceptsArg())  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {  expectedOpts.add(token);	      ||    currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArgument())  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument())  {  expectedOpts.add(token);	      ||    currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsLongArg())  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {  expectedOpts.add(token);	      ||    currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  ||!switchParsing)  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  expectedOpts.add(token);	      if(!switchParsing)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(token);	      if(!switchParsing)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]  ||!switchParsing)  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  expectedOpts.add(token);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  expectedOpts.add(token);  }	      if(!switchParsing)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  ||!switchParsing)  {  expectedOpts.add(option);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  expectedOpts.add(option);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  expectedOpts.add(option);	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
8	[BUG]  [BUGGY]  ||!switchParsing)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  expectedOpts.add(option);  }	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
9	[BUG]  [BUGGY]  expectedOpts.add(option);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  expectedOpts.add(option);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(option);	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(value);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  currentOption  =  options.getOption(value);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(value);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
11	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(option);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  currentOption  =  options.getOption(option);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(option);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(key);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  currentOption  =  options.getOption(key);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  currentOption  =  options.getOption(key);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
13	[BUG]  [BUGGY]  ||!switchParsing)  {  expectedOpts.add(currentOption);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  expectedOpts.add(currentOption);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  expectedOpts.add(currentOption);	      if(!switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  ||!switchParsing)  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  expectedOpts.add(currentOption);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  expectedOpts.add(currentOption);  }	      if(!switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  expectedOpts.add(currentOption);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  expectedOpts.add(currentOption);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	expectedOpts.add(currentOption);	      if(!switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
17	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option  ==  null  ||  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
20	[BUG]  [BUGGY]  currentOption  =  options.nextToken();  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  options.nextToken();  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.nextToken();	  currentOption    =    options;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  currentOption  =  options.next();  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  options.next();  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.next();	  currentOption    =    options;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
25	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(token);  if(option!=  null)  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
26	[BUG]  [BUGGY]  ||!switchParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  throw  new  IllegalArgumentException( " ");  }	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  bucketParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  bucketParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	bucketParsing)  {  throw  new  IllegalArgumentException( " ");  }	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
28	[BUG]  [BUGGY]  trecută  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  trecută  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	trecută  {  throw  new  IllegalArgumentException( " ");  }	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
29	[BUG]  [BUGGY]  ||!switchParsing)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!switchParsing)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!switchParsing)  {  throw  new  IllegalArgumentException( " ".);  }	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
30	[BUG]  [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg())  {  throw  new  IllegalStateException( " ");	      ||    currentOption.acceptsArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg())  {  throw  new  UnsupportedOperationException( " ");	      ||    currentOption.acceptsArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  currentOption  =  options.getOption(value);  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  options.getOption(value);  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(value);	  currentOption    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  currentOption  =  options.getOption(token,  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  options.getOption(token,  value);  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(token,  value);	  currentOption    =    options.getOption(token);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
34	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  }	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  }	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!currentOption.acceptsArg())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  ||  currentOption.acceptsAssignmentOpt())  {  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsAssignmentOpt())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsAssignmentOpt())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsLongArg())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  currentOption  =  options.getOption(option,  token);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  options.getOption(option,  token);  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(option,  token);	  currentOption    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
41	[BUG]  [BUGGY]  currentOption  =  option.cloneTree();  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  option.cloneTree();  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.cloneTree();	  currentOption    =    opt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
42	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(token);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  Option.None.valueOf(token);  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(token);	  currentOption    =    opt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
43	[BUG]  [BUGGY]  currentOption  =  option.toString();  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  option.toString();  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.toString();	  currentOption    =    option;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument())  {  throw  new  IllegalArgumentException( " ");	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
45	[BUG]  [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||!currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||!currentOption.acceptsArg())  {  throw  new  IllegalArgumentException( " ");	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(token);  if(option!=  null  ||  option.acceptsArg())  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  ||  currentOption.canHaveSideEffects())  {  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.canHaveSideEffects())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.canHaveSideEffects())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
50	[BUG]  [BUGGY]  ||  currentOption.hasArg())  {  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.hasArg())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.hasArg())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
51	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsParser())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsParser())  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  expectedOpts.add(token);	      ||    currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  ||  currentOption.acceptsAssignmentOpt())  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsAssignmentOpt())  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsAssignmentOpt())  {  expectedOpts.add(token);	      ||    currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
54	[BUG]  [BUGGY]  allowParsing)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  allowParsing)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowParsing)  {  throw  new  IllegalArgumentException( " ");  }	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	10	None	replace
55	[BUG]  [BUGGY]  currentOption  =  options.getOption(option,  value);  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  options.getOption(option,  value);  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  options.getOption(option,  value);	  currentOption    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
57	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
58	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  }	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY;  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  Option.NON_OPTIONAL_ARRAY;  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.NON_OPTIONAL_ARRAY;	  currentOption    =    opt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
60	[BUG]  [BUGGY]  currentOption  =  Option.None.valueOf(value);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  Option.None.valueOf(value);  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  Option.None.valueOf(value);	  currentOption    =    opt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
62	[BUG]  [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option!=  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(option);  if(option!=  null)  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
64	[BUG]  [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(value);  if(option!=  null)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(value);  if(option!=  null)  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(!stopAtNonOption)  {  expectedOpts.add(currentOption);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!stopAtNonOption)  {  expectedOpts.add(currentOption);  }	      if(!switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  options.add(currentOption);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  options.add(currentOption);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.add(currentOption);	      if(!switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  currentOption  =  option.nextToken();  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  option.nextToken();  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  option.nextToken();	  currentOption    =    option;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  options.add(option);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  options.add(option);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	options.add(option);	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
69	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	Option  option  =  options.getOption(option);	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  expectedOpts.add(token);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(!stopAtNonOption)  {  expectedOpts.add(token);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!stopAtNonOption)  {  expectedOpts.add(token);  }	      if(!switchParsing)    {    expectedOpts.add(token);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  throw  new  IllegalArgumentException( " ");	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
72	[BUG]  [BUGGY]  ||  currentOption.acceptsParser())  {  return;  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsParser())  {  return;  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsParser())  {  return;	      ||    currentOption.acceptsArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  ||  currentOption.acceptsArg())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArg())  {  return;  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg())  {  return;  }	      ||    currentOption.acceptsArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArg())  {  return;  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsLongArg())  {  return;  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArg())  {  return;	      ||    currentOption.acceptsArg())    {    return;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  if(switchParsing)  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(switchParsing)  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(switchParsing)  {  expectedOpts.add(option);  }	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
76	[BUG]  [BUGGY]  if(!switchParsing  &&  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(!switchParsing  &&  expectedOpts.contains(option))  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(!switchParsing  &&  expectedOpts.contains(option))  {  expectedOpts.add(option);  }	      if(!switchParsing)    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
77	[BUG]  [BUGGY]  ||  currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsRaw())  {  throw  new  IllegalArgumentException( " ");  }	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArgument())  {  throw  new  IllegalArgumentException( " ");	      ||    currentOption.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
79	[BUG]  [BUGGY]  ||  currentOption.acceptsLongArgument())  {  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsLongArgument())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsLongArgument())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  ||  currentOption.acceptsRawParser())  {  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsRawParser())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsRawParser())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
81	[BUG]  [BUGGY]  ||  currentOption.acceptsArgument())  {  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArgument())  {  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArgument())  {	      ||    currentOption.acceptsArg())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
82	[BUG]  [BUGGY]  currentOption  =  opt.cloneTree();  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  currentOption  =  opt.cloneTree();  [BUGGY]    }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	currentOption  =  opt.cloneTree();	  currentOption    =    opt;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [CE]  illegal  start  of  expression  [FE]        java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  expectedOpts.add(option);  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    expectedOpts.add(option);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
84	[BUG]  [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(option  ==  null)  {  Option  option  =  options.getOption(option);  if(option!=  null  &&  option.acceptsArg())  {  throw  new  IllegalArgumentException( " ");  }	      if(option    ==    null)    {    Option    option    =    options.getOption(option);    if(option!=    null    ||    option.acceptsArg())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
85	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]          java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  [Delete]  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	[Delete]	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  aughtException( " ");  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  aughtException( " ");  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	aughtException( " ");	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  allowSwitchParsing(token);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  allowSwitchParsing(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	allowSwitchParsing(token);	      if(!switchParsing)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  ||  currentOption.acceptsArg(value))  {  expectedOpts.add(token);  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  ||  currentOption.acceptsArg(value))  {  expectedOpts.add(token);  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	||  currentOption.acceptsArg(value))  {  expectedOpts.add(token);	      ||    currentOption.acceptsArg())    {    expectedOpts.add(token);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  if(switchParsing)  {  expectedOpts.add(currentOption);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  expected  null    [CONTEXT]    {  handleShortAndLongOption(token);  }  else  {  handleUnknownToken(token);  }  if  (currentOption  !=  null  &&  !currentOption.acceptsArg())  {    [BUGGY]  if(switchParsing)  {  expectedOpts.add(currentOption);  }  [BUGGY]    currentOption  =  null;  }  }  [CLASS]  DefaultParser  [METHOD]  handleToken  [RETURN_TYPE]  void  String  token  [VARIABLES]  Options  options  CommandLine  cmd  boolean  selected  skipParsing  stopAtNonOption  Option  currentOption  opt  List  expectedOpts  String  argument  currentToken  option  token  value  	projects/Cli38/src/main/java/org/apache/commons/cli/DefaultParser.java	0.7071067811865475	252	252	1	replace	if(switchParsing)  {  expectedOpts.add(currentOption);  }	      if(!switchParsing)    {    expectedOpts.add(currentOption);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
