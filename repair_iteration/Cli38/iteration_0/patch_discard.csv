increase failing tests,308,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,int pos = token.indexOf("="); ,int pos = token.indexOf("-");
increase failing tests,308,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,int pos = token.indexOf("="); ,int pos = token.lastIndexOf("-");
compilation error,308,replace,[CE] cannot find symbol pos,int pos = token.indexOf("="); , 
increase failing tests,235,add, [FE] NullPointerException shouldParseShortOptionWithValue,,  token = currentOption.getValue();
compilation error,235,add,[CE] cannot find symbol,,  token = currentOption.getLongValue();
compilation error,235,add,[CE] cannot find symbol,,  token = currentOption.getValue(); if("-".equals(token)) { handleShortAndTrailingQuotes(token); }
increase failing tests,235,add, [FE] ComparisonFailure shouldParseShortOptionWithValue,,  token = currentOption.toString();
increase failing tests,235,add, [FE] NullPointerException shouldParseShortOptionWithValue,,  token = currentOption.getValue(); if("-".equals(token)) { throw new IllegalArgumentException(""); }
compilation error,235,replace,[CE] cannot find symbol,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValueForProcessing(Util.stripLeadingQuotes(token));
increase failing tests,235,replace, [FE] UnsupportedOperationException shouldParseShortOptionWithValue,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValue(Util.stripLeadingAndTrailingQuotes(token));
compilation error,235,replace,[CE] method addValueForProcessing in class Option cannot be applied to given types;,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token), skipParsing);
compilation error,252,add,[CE] cannot find symbol,,  currentOption = cmd.getOption(token);
compilation error,252,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(token);
compilation error,340,add,[CE] illegal start of expression,,  else if(getLongPrefix(token)!= null &&!token.startsWith("--")) { return true; >>
compilation error,309,replace,[CE] ';' expected,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = token.substring(pos + 1): token.substring(1, pos);
compilation error,309,replace,[CE] ';' expected,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = token.substring(0, pos): token.substring(1, pos);
compilation error,309,replace,[CE] ';' expected,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = token.substring(pos): token.substring(1, pos);
compilation error,309,replace,[CE] cannot find symbol optName,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); , 
compilation error,252,replace,[CE] cannot find symbol option,currentOption = null; ,currentOption = option;
compilation error,252,replace,[CE] cannot find symbol value,currentOption = null; ,currentOption = options.getOption(value);
compilation error,329,add,[CE] no suitable method found for substring(int,String),,  token = token.substring(pos, t);
compilation error,327,replace,[CE] cannot find symbol length,String t = pos == -1 ? token : token.substring(0, pos); ,String t = token.length == -1? token : token.substring(0, pos);
compilation error,327,replace,[CE] incomparable types: String and int,String t = pos == -1 ? token : token.substring(0, pos); ,String t = token!= -1? token : token.substring(0, pos);
compilation error,327,replace,[CE] incomparable types: String and int,String t = pos == -1 ? token : token.substring(0, pos); ,String t = token == -1? token : token.substring(0, pos);
compilation error,327,replace,[CE] cannot find symbol t,String t = pos == -1 ? token : token.substring(0, pos); , 
compilation error,326,replace,[CE] cannot find symbol pos,int pos = token.indexOf("="); , 
compilation error,310,add,[CE] not a statement,,  token.startsWith("-")? token.substring(0, pos): token.substring(1, pos);
compilation error,310,add,[CE] ,,  token.startsWith("-"): token.substring(0, pos);
increase failing tests,310,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  token = token.substring(0, pos);
compilation error,310,add,[CE] not a statement,,  token.startsWith("-")? token.substring(0, pos): token.substring(0, pos);
compilation error,310,add,[CE] not a statement,,  token.startsWith("-")? token.substring(0, optName): token.substring(0, pos);
compilation error,326,add,[CE] cannot find symbol pos,,  token = token.substring(0, pos);
compilation error,326,add,[CE] cannot find symbol pos,,  token = token.substring(pos + 1, token.length());
compilation error,326,add,[CE] cannot find symbol pos,,  token = token.substring(pos + 1);
increase failing tests,308,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  token = token.substring(0, token.indexOf("-"));
compilation error,308,add,[CE] no suitable method found for substring(int,int,int),,  token = token.substring(0, token.length() - 1, token.length());
increase failing tests,308,add, [FE] AssertionError shouldParseShortOptionWithoutValue,,  token = token.substring(0, token.length() - 2);
compilation error,310,replace,[CE] incompatible types,return options.hasShortOption(optName); ,return options.getOption(optName);
compilation error,310,replace,[CE] cannot find symbol,return options.hasShortOption(optName); ,return options.contains(optName);
compilation error,310,replace,[CE] cannot find symbol,return options.hasShortOption(optName); ,return options.containsKey(optName);
increase failing tests,327,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  token = token.substring(0, pos);
increase failing tests,327,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  token = token.substring(pos);
compilation error,334,replace,[CE] bad operand type String for unary operator ,else if (getLongPrefix(token) != null && !token.startsWith("--")) { ,else if(!getLongPrefix(token)!= null &&!token.startsWith("-")) {
compilation error,334,replace,[CE] illegal start of type,else if (getLongPrefix(token) != null && !token.startsWith("--")) { , 
compilation error,334,add,[CE] ,,  token = token.substring(pos + 1);
compilation error,334,add,[CE] ,,  token = token.substring(pos, t);
compilation error,334,add,[CE] ,,  token = token.substring(pos + 1, t.length());
compilation error,334,add,[CE] ,,  token = token.substring(pos);
compilation error,334,add,[CE] ,,  token = token.substring(pos + 1, t);
increase failing tests,309,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  token = token.substring(0, pos);
compilation error,309,add,[CE] incompatible types,,  int stopAtNonOption = token.indexOf("-")? token.substring(0, pos): token.substring(0, pos);
compilation error,309,add,[CE] incompatible types,,  int stopAtNonOption = token.indexOf("-")? token.substring(0, pos): token.substring(1, pos);
compilation error,309,add,[CE] incompatible types,,  int stopAtNonOption = token.indexOf("-")? token.substring(0, pos): token.substring(pos);
increase failing tests,309,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  pos = token.indexOf("--")+ 1;
compilation error,329,replace,[CE] cannot find symbol,if (!options.getMatchingOptions(t).isEmpty()) { ,if(!options.getMatchingOptions(t).isLong()) {
compilation error,329,replace,[CE] cannot find symbol,if (!options.getMatchingOptions(t).isEmpty()) { ,if(!options.getMatchingOptions(t).isSupported()) {
compilation error,340,replace,[CE] ,return false; ,return(getLongPrefix(token)!= null &&!token.startsWith("-"))) { return true; }
compilation error,340,replace,[CE] ,return false; ,return(getLongPrefix(token))!= null &&!token.startsWith("-")) { return true; }
compilation error,340,replace,[CE] ,return false; ,return(getLongPrefix(token)) == null &&!token.startsWith("-")) { return true; }
compilation error,340,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(token);
compilation error,340,add,[CE] illegal start of expression,,  else if(getLongPrefix(token)!= null &&!token.startsWith("-")) {
compilation error,340,add,[CE] cannot find symbol opt,,  cmd.addOption(opt);
compilation error,340,add,[CE] continue outside of loop,,  else if(getLongPrefix(token)!= null &&!token.startsWith("-")) { continue; }
increase failing tests,309,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  pos = token.indexOf(token.charAt(0));
increase failing tests,309,add, [FE] AssertionError shouldParseShortOptionWithoutValue,,  pos = token.indexOf("-")+ 1;
increase failing tests,235,add, [FE] NullPointerException shouldParseShortOptionWithValue,,  token = currentOption.getLongOpt();
compilation error,235,add,[CE] continue outside of loop,,  if(!skipParsing) { continue; }
compilation error,235,add,[CE] cannot find symbol,,  token = currentOption.getLocale();
compilation error,235,add,[CE] cannot find symbol,,  token = currentOption.getLocalArg();
compilation error,310,replace,[CE] cannot find symbol,return options.hasShortOption(optName); ,return options.isShortOption(optName);
increase failing tests,308,add, [FE] AssertionError shouldParseShortOptionWithoutValue,,  token = token.substring(0, token.length() - 3);
increase failing tests,308,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  boolean stopAtNonOption = token.startsWith("-")&& token.startsWith("-".substring(token.length() - 1));
compilation error,329,replace,[CE] illegal start of expression,if (!options.getMatchingOptions(t).isEmpty()) { ,if(!options.getMatchingOptions(t)).isEmpty()) {
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = pos == -1? token.substring(0, pos): token.substring(1, pos);
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = token.length() == 0? token.substring(1): token.substring(0, pos);
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = pos == -1? token.substring(0, pos): token.substring(pos, 0);
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = pos == -1? token.substring(0, pos): token.substring(pos + 1);
compilation error,310,add,[CE] no suitable method found for addOption(String),,  options.addOption(optName);
compilation error,310,add,[CE] illegal start of expression,,  if(optName!= null) { if(optName.startsWith("-")) { throw new IllegalArgumentException(""); }
compilation error,310,add,[CE] illegal start of expression,,  if(optName!= null) { if(optName.startsWith("-")) { return false; }
compilation error,310,add,[CE] illegal start of expression,,  if(optName!= null) { if(optName.startsWith("-")) { continue; }
compilation error,310,add,[CE] illegal start of expression,,  if(optName!= null) { if(optName.startsWith("-")) { return true; }
increase failing tests,326,add, [FE] StackOverflowError shouldParseShortOptionWithoutValue,,  boolean stopAtNonOption = isLongOption(token);
compilation error,326,add,[CE] cannot find symbol,,  boolean stopAtNonOption = isLong(token);
compilation error,326,add,[CE] cannot find symbol,,  boolean stopAtNonOption = options.hasArg(token);
compilation error,252,add,[CE] cannot find symbol opt,,  cmd.addOption(opt);
compilation error,252,add,[CE] cannot find symbol,,  token = currentOption.getLocalMore();
increase failing tests,327,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String t = pos == -1 ? token : token.substring(0, pos); ,String t = pos == 2? token : token.substring(0, pos);
compilation error,326,replace,[CE] unclosed string literal,int pos = token.indexOf("="); ,int pos = token.indexOf("+" =");
compilation error,340,replace,[CE] ,return false; ,return(getLongValue(token)!= null &&!token.startsWith("-")) {
compilation error,340,replace,[CE] ,return false; ,return(getLongValue(token)!= null &&!token.startsWith("-"))) {
compilation error,235,replace,[CE] cannot find symbol,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValueforProcessing(Util.stripLeadingAndTrailingQuotes(token));
compilation error,235,replace,[CE] method addValueForProcessing in class Option cannot be applied to given types;,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValueForProcessing(token, Util.stripLeadingAndTrailingQuotes(token));
compilation error,334,add,[CE] illegal start of expression,,  if(options.hasOption(token)) { if(getLongPrefix(token)!= null &&!token.startsWith("-")) { return true; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals(token)) { if(getLongPrefix(token)!= null &&!token.startsWith("-")) { return true; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.startsWith("--")) { if(getLongPrefix(token)!= null &&!token.startsWith("--")) { return true; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals(token)) { if(getLongPrefix(token)!= null &&!token.startsWith("-")) { return false; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals(token)) { if(getLongPrefix(token)!= null &&!token.startsWith("--")) { return true; }
increase failing tests,329,add, [FE] StackOverflowError shouldParseShortOptionWithoutValue,,  boolean stopAtNonOption = isLongOption(t);
compilation error,329,add,[CE] illegal start of expression,,  if(t!= null) { if(getLongPrefix(token)!= null) { return false; }
compilation error,329,add,[CE] cannot find symbol,,  boolean stopAtNonOption = options.isAtNonOption(t);
compilation error,329,add,[CE] illegal start of expression,,  if(t!= null) { if(getLongPrefix(token)!= null) { return true; }
compilation error,329,add,[CE] cannot find symbol,,  boolean stopAtNonOption = options.isLongOption(t);
compilation error,252,replace,[CE] cannot find symbol,currentOption = null; ,currentOption = new LinkedHashMap < String,JavaType>();
compilation error,252,replace,[CE] cannot find symbol,currentOption = null; ,currentOption = new HashMap < String,Object>();
compilation error,252,replace,[CE] cannot find symbol,currentOption = null; ,currentOption = getOption();
compilation error,327,add,[CE] unclosed character literal,,  pos = token.indexOf('"+getLongPrefix());
increase failing tests,327,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  token = token.substring(pos++);
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals("-")) { if(getLongOpt(token)!= null &&!options.getMatchingOptions(t).isEmpty()) { return false; }
compilation error,334,add,[CE] illegal start of expression,,  if(getLongOpt(token)!= null) { if(!options.getMatchingOptions(t).isEmpty()) { return false; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals("-")) { if(getLongPrefix(token)!= null &&!options.getMatchingOptions(t).isEmpty()) { return false; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals("-")) { if(getLongName(token)!= null &&!options.getMatchingOptions(t).isEmpty()) { return false; }
compilation error,334,add,[CE] illegal start of expression,,  if(t.equals("-")) { if(getLongOpt(token)!= null &&!options.getMatchingOptions(t).isEmpty()) { return true; }
compilation error,334,replace,[CE] cannot find symbol,else if (getLongPrefix(token) != null && !token.startsWith("--")) { ,else if(getLongOpt(token)!= null &&!token.startsWith("-")) {
compilation error,310,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(optName);
compilation error,310,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(optName, true);
compilation error,310,add,[CE] no suitable method found for substring(int,String),,  cmd.addArg(token.substring(0, optName));
increase failing tests,310,add, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,,  cmd.addArg(token.substring(0, pos));
compilation error,310,add,[CE] cannot find symbol option,,  cmd.addOption(option, token);
compilation error,327,add,[CE] incompatible types,,  pos = token.indexOf("$$")+ token.substring(pos + 1);
compilation error,327,add,[CE] incompatible types,,  pos = token.lastIndexOf("$$")+ token.substring(pos + 1);
compilation error,327,add,[CE] variable pos is already defined in method isLongOption(String),,  int pos = token.indexOf("$$")+ token.substring(pos + 1);
compilation error,329,replace,[CE] cannot find symbol,if (!options.getMatchingOptions(t).isEmpty()) { ,if(!options.getMatchingOptions(t).isNone()) {
compilation error,252,add,[CE] cannot find symbol option,,  cmd.addOption(option);
compilation error,252,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(currentOption, token);
compilation error,252,add,[CE] cannot find symbol,,  cmd.addOption(currentOption.getArg());
compilation error,340,replace,[CE] unclosed string literal,return false; ,return(token.length() == 0)? false : StringUtils.convert(token, StringUtils.stripLeadingAndTrailingQuotes(token)) &&(getLongPrefix(token)!= null &&!token.startsWith("-
compilation error,340,replace,[CE] ,return false; ,return(token.length() == 0)? false : StringUtils.convert(token, StringUtils.stripLeadingAndTrailingQuotes(token)) &&(getLongPrefix(token)!= null &&!token.startsWith("-"))
compilation error,340,replace,[CE] ,return false; ,return(token.length() == 0)? false : StringUtils.convert(token, StringUtils.stripLeadingAndTrailingQuotes(token)) &&(getLongPrefix(token)!= null &&!token.startsWith("-")
compilation error,308,add,[CE] cannot find symbol,,  boolean skipParsing = token.isSwitchCase();
compilation error,235,replace,[CE] method addValueForProcessing in class Option cannot be applied to given types;,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValueForProcessing(cmd, Util.stripLeadingAndTrailingQuotes(token));
compilation error,235,replace,[CE] cannot find symbol,currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token)); ,currentOption.addValueForProcessing(cmd.getArgument());
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = pos == -1? token.substring(0, pos): token.substring(0, pos);
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = pos == -1? token.substring(0, pos): token.substring(1, pos + 1);
increase failing tests,309,replace, [FE] StringIndexOutOfBoundsException shouldParseShortOptionWithoutValue,String optName = pos == -1 ? token.substring(1) : token.substring(1, pos); ,String optName = pos == 3? token.substring(0, pos): token.substring(1, pos);
compilation error,326,add,[CE] cannot find symbol,,  boolean skipParsing = options.isSwitchMatchesCase(token);
compilation error,326,add,[CE] cannot find symbol,,  boolean skipParsing = token.isSwitchCase();
compilation error,329,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(t);
compilation error,329,add,[CE] cannot find symbol,,  pos = token.indexOf(":"+t.getSimpleName());
compilation error,309,add,[CE] illegal start of expression,,  while(token.startsWith("-")) { token = token.substring(0, pos);
compilation error,309,add,[CE] illegal start of expression,,  while(token.startsWith("-")) { pos = token.indexOf("+");
compilation error,309,add,[CE] illegal start of expression,,  while(token.startsWith("-")) { pos = token.indexOf("-")+ 1;
compilation error,252,replace,[CE] no suitable constructor found for Option(String),currentOption = null; ,currentOption = new Option(token);
compilation error,252,replace,[CE] no suitable constructor found for Option(String),currentOption = null; ,currentOption = new Option("");
compilation error,235,add,[CE] cannot find symbol,,  token.removeChild(token);
compilation error,235,add,[CE] illegal start of expression,,  if("-".equals(token)) { token.startsWith("-"); if(currentOption.hasArg()) { skipParsing = true; }
compilation error,235,add,[CE] illegal start of expression,,  if("-".equals(token)) { token.startsWith("-"); if(currentOption.hasArg()) { cmd.addArg(token); }
compilation error,340,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(token, getLongPrefix(token));
compilation error,340,add,[CE] method addOption in class CommandLine cannot be applied to given types;,,  cmd.addOption(token, token);
compilation error,340,add,[CE] cannot find symbol,,  cmd.addOption(token, getLongValue(token));
compilation error,340,add,[CE] cannot find symbol,,  cmd.addOption(token, getLongName(token));
compilation error,310,replace,[CE] cannot find symbol,return options.hasShortOption(optName); ,return options.containsOption(optName);
compilation error,310,replace,[CE] cannot find symbol,return options.hasShortOption(optName); ,return options.isOption(optName);
