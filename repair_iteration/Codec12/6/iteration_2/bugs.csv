bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
2	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
4	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	29	12	add
6	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	29	12	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
8	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }	  	compilable	  [FE]  AssertionError  	29	12	add
10	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  readLen);  }	  	compilable	  [FE]  AssertionError  	29	12	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
12	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  readLen  =  0;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
13	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	29	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  1;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  1;  }	  	compilable	  [FE]  AssertionError  	29	12	add
15	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  1;  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  1;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  1;  }	  	compilable	  [FE]  AssertionError  	29	12	add
16	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  doEncode;  [CE]  type  AssertionError  does  not  take  parameters  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    AssertionError  <  Object>  doEncode  =  doEncode;	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	29	None	add
17	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  other  {  readLen  =  0;  }  [CE]  not  a  statement  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  other  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  other  {  readLen  =  0;  }	  	non-compiled	[CE]  not  a  statement	29	None	add
18	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(offset);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
19	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodecInputStream();  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodecInputStream();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodecInputStream();	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
20	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(0);  [CE]  cannot  find  symbol  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(0);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(0);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
21	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(c);  [CE]  cannot  find  symbol  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(c);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
22	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec().encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]                            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec().encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec().encode(buf,  0,  c);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
23	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec().decode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]                              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec().decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec().decode(buf,  0,  c);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
24	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  len);  [CE]  cannot  find  symbol  [FE]                                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  len);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
25	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(0,  c);  [CE]  cannot  find  symbol  [FE]                                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(0,  c);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
26	[BUG]  [BUGGY]  îndecode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
27	[BUG]  [BUGGY]  rackByte.encode(buf,  0,  c);  [CE]  cannot  find  symbol  rackByte  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackByte.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackByte.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  rackByte	31	None	replace
28	[BUG]  [BUGGY]  enforcer(c).encode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  enforcer(c).encode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	enforcer(c).encode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
29	[BUG]  [BUGGY]  rackSingleByte.encode(buf,  0,  c);  [CE]  cannot  find  symbol  rackSingleByte  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackSingleByte.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackSingleByte.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  rackSingleByte	31	None	replace
30	[BUG]  [BUGGY]  rackBindings.encode(buf,  0,  c);  [CE]  cannot  find  symbol  rackBindings  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBindings.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBindings.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  rackBindings	31	None	replace
31	[BUG]  [BUGGY]  rackEncode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackEncode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
32	[BUG]  [BUGGY]  cast(baseNCodec,  0,  c);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
33	[BUG]  [BUGGY]  rackBinding(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBinding(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBinding(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
34	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len,  readLen);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  len,  readLen);	      System.arraycopy(b,    0,    buf,    offset,    len);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	39	None	replace
36	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  offset,  c);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	25	replace
37	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  c);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	25	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  offset,  len  +  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	25	replace
39	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  +  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  len  +  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	25	replace
40	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len,  readLen);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  0,  buf,  offset,  len,  readLen);	      System.arraycopy(b,    0,    buf,    offset,    len);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	39	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len,  c);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  len,  c);	      System.arraycopy(b,    0,    buf,    offset,    len);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	39	None	replace
42	[BUG]  [BUGGY]  timeout  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  offset,  len  -  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
43	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  -  1);  timeout  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  len  -  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
44	[BUG]  [BUGGY]  timeout  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  0,  buf,  offset,  len);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
45	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len);  timeout  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  0,  buf,  offset,  len);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
46	[BUG]  [BUGGY]  timeout  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  0,  b,  offset,  len);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
47	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  b,  offset,  len);  timeout  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  0,  b,  offset,  len);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
48	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(b,  0,  len);	  baseNCodec.encode(buf,    0,    len);    	compilable	timeout	21	1	replace
49	[BUG]  [BUGGY]  baseNCodec.encode(b,  0,  len);  timeout  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(b,  0,  len);	  baseNCodec.encode(buf,    0,    len);    	compilable	timeout	21	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,  0,  b.length);	  baseNCodec.encode(buf,    0,    len);    	compilable	  [FE]  AssertionError  	21	24	replace
51	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  b.length);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  b.length);	  baseNCodec.encode(buf,    0,    len);    	compilable	  [FE]  AssertionError  	21	24	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,  0,  len  +  1);	  baseNCodec.encode(buf,    0,    len);    	compilable	  [FE]  AssertionError  	21	25	replace
53	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  len  +  1);	  baseNCodec.encode(buf,    0,    len);    	compilable	  [FE]  AssertionError  	21	25	replace
54	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  buf.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,  0,  buf.length);	  baseNCodec.encode(buf,    0,    len);    	compilable	timeout	21	1	replace
55	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  buf.length);  timeout  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  buf.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  buf.length);	  baseNCodec.encode(buf,    0,    len);    	compilable	timeout	21	1	replace
56	[BUG]  [BUGGY]  BaseNCodec  buf  =  baseNCodec.decode(b,  0,  c);  [CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  buf  =  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  buf  =  baseNCodec.decode(b,  0,  c);	  baseNCodec.decode(b,    0,    c);    	non-compiled	[CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)	23	None	replace
57	[BUG]  [BUGGY]  BaseNCodec  buf  =  baseNCodec.decode(b,  0,  len);  [CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  buf  =  baseNCodec.decode(b,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  buf  =  baseNCodec.decode(b,  0,  len);	  baseNCodec.decode(b,    0,    c);    	non-compiled	[CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)	23	None	replace
58	[BUG]  [BUGGY]  BaseNCodec  buf  =  new  BaseNCodec(buf,  0,  len);  [CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  buf  =  new  BaseNCodec(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  buf  =  new  BaseNCodec(buf,  0,  len);	  baseNCodec.decode(b,    0,    c);    	non-compiled	[CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)	23	None	replace
59	[BUG]  [BUGGY]  BaseNCodec  buf  =  baseNCodec.decode(buf,  0,  c);  [CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  buf  =  baseNCodec.decode(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  buf  =  baseNCodec.decode(buf,  0,  c);	  baseNCodec.decode(b,    0,    c);    	non-compiled	[CE]  variable  buf  is  already  defined  in  method  read(byte[],int,int)	23	None	replace
60	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  	12	None	replace
61	[BUG]  [BUGGY]  bucketFactory.decodeBase(buf,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.decodeBase(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.decodeBase(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	12	None	replace
62	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  	12	None	replace
63	[BUG]  [BUGGY]  bucketFactory.encode(b,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	12	None	replace
64	[BUG]  [BUGGY]  bucketFactory.decode(b,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]            IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.decode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.decode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	12	None	replace
65	[BUG]  [BUGGY]  rackByte.encode(b,  0,  c);  [CE]  cannot  find  symbol  rackByte  [FE]              IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackByte.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackByte.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  rackByte	12	None	replace
66	[BUG]  [BUGGY]  bucketFactory.decodeBase(b,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]                IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.decodeBase(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.decodeBase(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	12	None	replace
67	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
68	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
69	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  system.arraycopy(b,  offset,  buf,  0,  c);  [CE]  cannot  find  symbol  system  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  system.arraycopy(b,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  system.arraycopy(b,  offset,  buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol  system	33	None	add
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(b,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
71	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(b,  offset,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(b,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
72	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
73	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
74	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  c);  [CE]  'else'  without  'if'  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  c);	  	non-compiled	[CE]  'else'  without  'if'	33	None	add
75	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(b,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	24	add
76	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(b,  offset,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(b,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	24	add
77	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.singleByte  =  doEncode;  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.singleByte  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  this.singleByte  =  doEncode;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	33	None	add
78	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  system.arraycopy(b,  offset,  buf,  0,  len);  [CE]  cannot  find  symbol  system  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  system.arraycopy(b,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  system.arraycopy(b,  offset,  buf,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol  system	33	None	add
79	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.singleByte  =  doEncode(b,  offset,  len);  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.singleByte  =  doEncode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  this.singleByte  =  doEncode(b,  offset,  len);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	33	None	add
80	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  0,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
81	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  0,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  0,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
82	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  offset,  doEncode,  baseNCodec);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  offset,  doEncode,  baseNCodec);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  offset,  doEncode,  baseNCodec);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  offset,  doEncode,  len);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  offset,  doEncode,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  offset,  doEncode,  len);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  doEncode,  len);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  doEncode,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  doEncode,  len);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset,  b,  0,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
87	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  offset,  len,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  offset,  len,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  offset,  len,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  b,  0,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  b,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  b,  0,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
89	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  c,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
90	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  doEncode,  baseNCodec);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  doEncode,  baseNCodec);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  doEncode,  baseNCodec);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
91	[BUG]  [BUGGY]  codec.encode(buf,  0,  b);  [CE]  cannot  find  symbol  codec  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  b);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  b);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codec	32	None	replace
92	[BUG]  [BUGGY]  codec.encode(b,  0,  c);  [CE]  cannot  find  symbol  codec  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(b,  0,  c);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codec	32	None	replace
93	[BUG]  [BUGGY]  codec.encode(buf,  0,  buf.length);  [CE]  cannot  find  symbol  codec  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  buf.length);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  buf.length);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codec	32	None	replace
94	[BUG]  [BUGGY]  codeBuffer.encode(buf,  0,  c);  [CE]  cannot  find  symbol  codeBuffer  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codeBuffer.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codeBuffer.encode(buf,  0,  c);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codeBuffer	32	None	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	3	12	add
96	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	3	12	add
97	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  ||  doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  ||  doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    ||  doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
98	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(buf,  0,  c);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    while(doEncode)  {  baseNCodec.encode(buf,  0,  c);	  	non-compiled	[CE]  ';'  expected	3	None	add
99	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  baseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    baseNCodec.encode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	3	20	add
101	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  baseNCodec.encode(buf,  0,  c);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  baseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    baseNCodec.encode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	3	20	add
102	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode;  [CE]  type  AssertionError  does  not  take  parameters  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Object>  doEncode  =  doEncode;	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
103	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode();  [CE]  type  AssertionError  does  not  take  parameters  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Object>  doEncode  =  doEncode();	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
104	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Integer>  doEncode  =  doEncode(buf,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Integer>  doEncode  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Integer>  doEncode  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
105	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  BaseNCodec  baseNCodec  =  getBaseNCodec();  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  BaseNCodec  baseNCodec  =  getBaseNCodec();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    BaseNCodec  baseNCodec  =  getBaseNCodec();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
106	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {	  	non-compiled	[CE]  ';'  expected	3	None	add
107	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
108	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
109	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
110	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
111	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(singleByte)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  incompatible  types  [FE]        IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(singleByte)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(singleByte)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  incompatible  types	9	None	add
112	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
113	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
114	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]            IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	9	None	add
115	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( ". ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
116	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( ". ");  }  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( ". ");  }	  	compilable	  [FE]  IllegalStateException  	9	25	add
117	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  b);  [CE]  no  suitable  method  found  for  encode(byte[],int,byte[])  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  b);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  b);	      baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,byte[])	17	None	replace
118	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,  0,  c  +  1);	      baseNCodec.encode(buf,    0,    c);    	compilable	timeout	17	1	replace
119	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1);  timeout  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  c  +  1);	      baseNCodec.encode(buf,    0,    c);    	compilable	timeout	17	1	replace
120	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(b,    0,    c);    baseNCodec.encode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	20	add
121	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  baseNCodec.encode(b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    baseNCodec.encode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	20	add
122	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec.encode(b,  0,  c);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	1	None	add
123	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getBaseNCodec();  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getBaseNCodec();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  getBaseNCodec();	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
124	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.encode(b,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
125	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getBaseNCodec();  baseNCodec.encode(b,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getBaseNCodec();  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  getBaseNCodec();  baseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
126	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =(BaseNCodec)this.singleByte.getValue();  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =(BaseNCodec)this.singleByte.getValue();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =(BaseNCodec)this.singleByte.getValue();	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
127	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  baseNCodec.decode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(b,    0,    c);    baseNCodec.decode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	20	add
128	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  baseNCodec.decode(b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  baseNCodec.decode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    baseNCodec.decode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	20	add
129	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =(BaseNCodec)baseNCodec.encode(b,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =(BaseNCodec)baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =(BaseNCodec)baseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
130	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =(BaseNCodec)this.singleByte.clone();  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =(BaseNCodec)this.singleByte.clone();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =(BaseNCodec)this.singleByte.clone();	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
131	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  c.length);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  c.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  c.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
132	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,  0,  c.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
133	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  b.length);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.decode(buf,  0,  b.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	27	None	replace
134	[BUG]  [BUGGY]  timeout  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(b,  0,  b.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	compilable	timeout	27	1	replace
135	[BUG]  [BUGGY]  baseNCodec.encode(b,  0,  b.length);  timeout  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(b,  0,  b.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	compilable	timeout	27	1	replace
136	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  c.length);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  c.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  c.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  baseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    baseNCodec.encode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	16	20	add
138	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  baseNCodec.encode(buf,  0,  c);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  baseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    baseNCodec.encode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	16	20	add
139	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec.encode(buf,  0,  c);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    BaseNCodec  baseNCodec.encode(buf,  0,  c);	  	non-compiled	[CE]  ';'  expected	16	None	add
140	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec.encode(buf,  0,  c);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    BaseNCodec.encode(buf,  0,  c);	  	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	16	None	add
141	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	25	add
142	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	25	add
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	16	20	add
144	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	16	20	add
145	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  baseNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    baseNCodec.decode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	16	20	add
146	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  baseNCodec.decode(buf,  0,  c);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  baseNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    baseNCodec.decode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	16	20	add
147	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	16	19	add
148	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  0,  len);  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	16	19	add
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	16	19	add
150	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	16	19	add
151	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    BaseNCodec  baseNCodec  =  getBaseNCodec();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
152	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	16	25	add
153	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	16	25	add
154	[BUG]  [BUGGY]  BaseNCodec.encode(b,  0,  c);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(b,  0,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	28	None	replace
155	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  b,  c);  [CE]  no  suitable  method  found  for  encode(byte[],int,byte[],int)  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  b,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  b,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,byte[],int)	28	None	replace
156	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  buf.length,  c);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  buf.length,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  buf.length,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	28	None	replace
157	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  b.length,  c);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  b.length,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  b.length,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	28	None	replace
158	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  c);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  incompatible  types	28	None	replace
159	[BUG]  [BUGGY]  BaseNCodec.encode(baseNCodec,  buf,  0,  c);  [CE]  no  suitable  method  found  for  encode(BaseNCodec,byte[],int,int)  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(baseNCodec,  buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(baseNCodec,  buf,  0,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(BaseNCodec,byte[],int,int)	28	None	replace
160	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  len);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  len);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	28	None	replace
161	[BUG]  [BUGGY]  BaseNCodec.encode(baseNCodec,  0,  c);  [CE]  no  suitable  method  found  for  encode(BaseNCodec,int,int)  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(baseNCodec,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(baseNCodec,  0,  c);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(BaseNCodec,int,int)	28	None	replace
162	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  b.length);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  b.length);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	28	None	replace
163	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
164	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  buf.length);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  buf.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  buf.length);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
165	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len  +  1);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len  +  1);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
166	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(b,  0,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(b,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(b,  0,  len);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
167	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset  +  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset  +  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset  +  len);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
168	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len,  offset);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len,  offset);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len,  offset);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
169	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  buffer.length);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  buffer.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  buffer.length);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
170	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  offset,  len);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
171	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	25	add
172	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	25	add
173	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  ';'  expected	11	None	add
174	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	25	add
175	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	25	add
176	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(DoEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  DoEncode  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(DoEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(DoEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  DoEncode	11	None	add
177	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	11	None	add
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	compilable	  [FE]  AssertionError  	14	12	add
179	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	compilable	  [FE]  AssertionError  	14	12	add
180	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	20	add
181	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	20	add
182	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  ||  doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  ||  doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    ||  doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
183	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(b,  0,  c);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    while(doEncode)  {  baseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  ';'  expected	14	None	add
184	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode(b,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  Object>  doEncode  =  doEncode(b,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
185	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode;  [CE]  type  AssertionError  does  not  take  parameters  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  Object>  doEncode  =  doEncode;	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    while(doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	compilable	  [FE]  AssertionError  	14	12	add
187	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  while(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    while(doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	compilable	  [FE]  AssertionError  	14	12	add
188	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  ||  doEncode)  {  baseNCodec.encode(b,  0,  c);  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  ||  doEncode)  {  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    ||  doEncode)  {  baseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
189	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode();  [CE]  type  AssertionError  does  not  take  parameters  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  doEncode();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  Object>  doEncode  =  doEncode();	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
190	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {	  	non-compiled	[CE]  ';'  expected	14	None	add
191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
192	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
193	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  system.arraycopy(b,  0,  buf,  offset,  len);  [CE]  cannot  find  symbol  system  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  system.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  system.arraycopy(b,  0,  buf,  offset,  len);	  	non-compiled	[CE]  cannot  find  symbol  system	38	None	add
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
195	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  len);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
196	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);System.arraycopy(b,  0,  buf,  offset,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
197	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);System.arraycopy(b,  0,  buf,  offset,  len);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);System.arraycopy(b,  0,  buf,  offset,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
198	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(buf,  0,  len);  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(buf,  0,  len);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	38	None	add
199	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(b,  offset,  len);  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(b,  offset,  len);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	38	None	add
200	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode?  1  :  0;  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode?  1  :  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode?  1  :  0;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	38	None	add
201	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode;  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	38	None	add
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	38	20	add
203	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	38	20	add
204	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  b  =  new  ByteArrayInputStream(singleByte);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  b  =  new  ByteArrayInputStream(singleByte);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  b  =  new  ByteArrayInputStream(singleByte);	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.decode(buf,  0,  c  +  1);	  timeout    	compilable	  [FE]  AssertionError  	42	18	add
206	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  0,  c  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.decode(buf,  0,  c  +  1);	  timeout    	compilable	  [FE]  AssertionError  	42	18	add
207	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec.decode(buf,  0,  c  +  1);  [CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec.decode(buf,  0,  c  +  1);	  timeout    	non-compiled	[CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context	42	None	add
208	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec.decode(buf,  0,  c  +  1);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  baseNCodec.decode(buf,  0,  c  +  1);	  timeout    	non-compiled	[CE]  ';'  expected	42	None	add
209	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  c  +  1);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  c  =  baseNCodec.decode(buf,  0,  c  +  1);	  timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	42	None	add
210	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  0,  c  +  1);  this.singleByte  =  doEncode;  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  0,  c  +  1);  this.singleByte  =  doEncode;  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.decode(buf,  0,  c  +  1);  this.singleByte  =  doEncode;	  timeout    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	42	None	add
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.encode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.encode(buf,  0,  c  +  1);	  timeout    	compilable	  [FE]  AssertionError  	42	18	add
212	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.encode(buf,  0,  c  +  1);  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.encode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.encode(buf,  0,  c  +  1);	  timeout    	compilable	  [FE]  AssertionError  	42	18	add
213	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  1,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.decode(buf,  1,  c  +  1);	  timeout    	compilable	  [FE]  AssertionError  	42	18	add
214	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  1,  c  +  1);  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  baseNCodec.decode(buf,  1,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    baseNCodec.decode(buf,  1,  c  +  1);	  timeout    	compilable	  [FE]  AssertionError  	42	18	add
215	[BUG]  [BUGGY]  îndecode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
216	[BUG]  [BUGGY]  rackBaseNCodec.encode(buf,  0,  c);  [CE]  cannot  find  symbol  rackBaseNCodec  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBaseNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBaseNCodec.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  rackBaseNCodec	15	None	replace
217	[BUG]  [BUGGY]  bucket.encode(b,  0,  c);  [CE]  cannot  find  symbol  bucket  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucket.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucket.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  bucket	15	None	replace
218	[BUG]  [BUGGY]  rackBindings.encode(b,  0,  c);  [CE]  cannot  find  symbol  rackBindings  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBindings.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBindings.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  rackBindings	15	None	replace
219	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  c  +  1);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  c  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	43	None	replace
220	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(b,  0,  c  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	compilable	timeout	43	1	replace
221	[BUG]  [BUGGY]  baseNCodec.encode(b,  0,  c  +  1);  timeout  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(b,  0,  c  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	compilable	timeout	43	1	replace
222	[BUG]  [BUGGY]  timeout  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,  0,  len  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	compilable	timeout	43	1	replace
223	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len  +  1);  timeout  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,  0,  len  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	compilable	timeout	43	1	replace
224	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
225	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
226	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
227	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
228	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    System.arraycopy(b,  0,  buf,  offset,  len);	  	compilable	  [FE]  AssertionError  	7	19	add
229	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  System.arraycopy(b,  0,  buf,  offset,  len);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    System.arraycopy(b,  0,  buf,  offset,  len);	  	compilable	  [FE]  AssertionError  	7	19	add
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
231	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	7	19	add
233	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	7	19	add
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
235	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
236	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
237	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
239	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
241	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
243	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  baseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,    0,    b.length);    baseNCodec.decode(buf,  0,  b.length);	  timeout    	compilable	  [FE]  AssertionError  	26	18	add
245	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  baseNCodec.decode(buf,  0,  b.length);  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  baseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    baseNCodec.decode(buf,  0,  b.length);	  timeout    	compilable	  [FE]  AssertionError  	26	18	add
246	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec.decode(buf,  0,  b.length);  [CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec.decode(buf,  0,  b.length);	  timeout    	non-compiled	[CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context	26	None	add
247	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec.decode(buf,  0,  b.length);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec.decode(buf,  0,  b.length);	  timeout    	non-compiled	[CE]  ';'  expected	26	None	add
248	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  b  =  baseNCodec.decode(buf,  0,  b.length);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  b  =  baseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  b  =  baseNCodec.decode(buf,  0,  b.length);	  timeout    	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	26	None	add
249	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  b.length);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  b.length);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	26	None	add
250	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [CE]  cannot  find  symbol  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  getBaseNCodec();	  timeout    	non-compiled	[CE]  cannot  find  symbol	26	None	add
251	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  0,  b.length);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  0,  b.length);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	26	None	add
252	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  b.length);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  b.length);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	26	None	add
253	[BUG]  [BUGGY]  cast(baseNCodec.encode(buf,  0,  c));  [CE]  'void'  type  not  allowed  here  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.encode(buf,  0,  c));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.encode(buf,  0,  c));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'void'  type  not  allowed  here	6	None	replace
254	[BUG]  [BUGGY]  bucketFactory.decodeBaseNumber(buf,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.decodeBaseNumber(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.decodeBaseNumber(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	6	None	replace
255	[BUG]  [BUGGY]  bucketFactory.encode(buf,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	6	None	replace
256	[BUG]  [BUGGY]  bucketFactory.decodeBaseNCodec(buf,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.decodeBaseNCodec(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.decodeBaseNCodec(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	6	None	replace
257	[BUG]  [BUGGY]  bucketFactory.decode(buf,  0,  c);  [CE]  cannot  find  symbol  bucketFactory  [FE]            IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucketFactory.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucketFactory.decode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  bucketFactory	6	None	replace
258	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
259	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
261	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
262	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	5	None	add
263	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
264	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
265	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
266	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	25	add
267	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,    0,    len);    baseNCodec.encode(buf,  0,  len);	  	compilable	  [FE]  AssertionError  	20	24	add
268	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  baseNCodec.encode(buf,  0,  len);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    baseNCodec.encode(buf,  0,  len);	  	compilable	  [FE]  AssertionError  	20	24	add
269	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec.encode(buf,  0,  len);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec.encode(buf,  0,  len);	  	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	20	None	add
270	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec.encode(buf,  0,  len);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec.encode(buf,  0,  len);	  	non-compiled	[CE]  ';'  expected	20	None	add
271	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	20	None	add
272	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	20	25	add
273	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	20	25	add
274	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	20	24	add
275	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	20	24	add
276	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	20	25	add
277	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  IllegalStateException  	20	25	add
278	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset,  len);  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset,  len);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	25	add
279	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset,  len);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset,  len);  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset,  len);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	20	25	add
280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	20	23	add
281	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	20	23	add
282	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  buf.length);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(b,  0,  buf.length);	      baseNCodec.encode(b,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	24	replace
283	[BUG]  [BUGGY]  baseNCodec.encode(b,  0,  buf.length);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(b,  0,  buf.length);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(b,  0,  buf.length);	      baseNCodec.encode(b,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	24	replace
284	[BUG]  [BUGGY]  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	      baseNCodec.encode(b,    0,    c);    	compilable	timeout	2	1	replace
285	[BUG]  [BUGGY]  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	      baseNCodec.encode(b,    0,    c);    	compilable	timeout	2	1	replace
286	[BUG]  [BUGGY]  rackByte.encode(buf,  0,  len);  [CE]  cannot  find  symbol  rackByte  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackByte.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackByte.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  cannot  find  symbol  rackByte	8	None	replace
287	[BUG]  [BUGGY]  rackSingleByte.encode(buf,  0,  len);  [CE]  cannot  find  symbol  rackSingleByte  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackSingleByte.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackSingleByte.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  cannot  find  symbol  rackSingleByte	8	None	replace
288	[BUG]  [BUGGY]  rackSingleByte.encode(b,  0,  len);  [CE]  cannot  find  symbol  rackSingleByte  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackSingleByte.encode(b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackSingleByte.encode(b,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  cannot  find  symbol  rackSingleByte	8	None	replace
289	[BUG]  [BUGGY]  rackBindings.encode(buf,  0,  len);  [CE]  cannot  find  symbol  rackBindings  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBindings.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBindings.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  cannot  find  symbol  rackBindings	8	None	replace
290	[BUG]  [BUGGY]  rackByte.encode(b,  0,  len);  [CE]  cannot  find  symbol  rackByte  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackByte.encode(b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackByte.encode(b,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  cannot  find  symbol  rackByte	8	None	replace
291	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(b,  0,  c);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(b,  0,  c);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	45	None	replace
292	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  readLen);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  readLen);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  readLen);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	45	None	replace
293	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  buf.length);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  buf.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  buf.length);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  incompatible  types	45	None	replace
294	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  len);  [CE]  incompatible  types  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  len);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  incompatible  types	45	None	replace
295	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  getLen());  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  getLen());  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  getLen());	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	45	None	replace
296	[BUG]  [BUGGY]  cast(baseNCodec,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
297	[BUG]  [BUGGY]  cast(baseNCodec.encode(buf,  0,  doEncode));  [CE]  no  suitable  method  found  for  encode(byte[],int,boolean)  [FE]      IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.encode(buf,  0,  doEncode));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.encode(buf,  0,  doEncode));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,boolean)	10	None	replace
298	[BUG]  [BUGGY]  cast(baseNCodec,  buf,  0,  c);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec,  buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
299	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
300	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
301	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
302	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  offset  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
303	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
304	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
305	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
306	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
307	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(DoEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [CE]  cannot  find  symbol  DoEncode  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(DoEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(DoEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	non-compiled	[CE]  cannot  find  symbol  DoEncode	18	None	add
308	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  offset  +  len);  }  else  {  offset  +=  len;  }  [CE]  no  suitable  method  found  for  encode(byte[],int)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  offset  +  len);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  offset  +  len);  }  else  {  offset  +=  len;  }	  	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int)	18	None	add
309	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
310	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
311	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
312	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
313	[BUG]  [BUGGY]  timeout  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
314	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  len);  timeout  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
315	[BUG]  [BUGGY]  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
316	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  0,  len);  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
317	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset,  b,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
318	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset,  b,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
319	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c,  len);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  c,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	34	None	replace
320	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset,  b,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
321	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  b,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
322	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
323	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
324	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(baseNCodec,  offset,  buf,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	34	25	replace
325	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  0,  c);  [FE]  ArrayStoreException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  offset,  buf,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	34	25	replace
326	[BUG]  [BUGGY]  timeout  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset,  buf,  0,  c  +  1);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
327	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c  +  1);  timeout  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  0,  c  +  1);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
328	[BUG]  [BUGGY]  castError(baseNCodec.encode(buf,  0,  c));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  castError(baseNCodec.encode(buf,  0,  c));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	castError(baseNCodec.encode(buf,  0,  c));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	30	None	replace
329	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  readLen  =  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	readLen  =  0;	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	compilable	timeout	30	1	replace
330	[BUG]  [BUGGY]  readLen  =  0;  timeout  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  readLen  =  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	readLen  =  0;	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	compilable	timeout	30	1	replace
331	[BUG]  [BUGGY]  cast(baseNCodec,  0,  readLen);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec,  0,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec,  0,  readLen);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
332	[BUG]  [BUGGY]  castError(baseNCodec,  buf,  readLen);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  castError(baseNCodec,  buf,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	castError(baseNCodec,  buf,  readLen);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
333	[BUG]  [BUGGY]  codec.encode(buf,  0,  offset);  [CE]  cannot  find  symbol  codec  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  offset);	      codec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  codec	40	None	replace
334	[BUG]  [BUGGY]  codec.encode(buf,  0,  len  +  1);  [CE]  cannot  find  symbol  codec  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  len  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  len  +  1);	      codec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  codec	40	None	replace
335	[BUG]  [BUGGY]  codec.encode(buf,  0,  len  -  1);  [CE]  cannot  find  symbol  codec  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  len  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  len  -  1);	      codec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  codec	40	None	replace
336	[BUG]  [BUGGY]  codec.encode(buf,  0,  b.length);  [CE]  cannot  find  symbol  codec  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  b.length);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  b.length);	      codec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  codec	40	None	replace
337	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
338	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
339	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  system.arraycopy(b,  offset  +  1,  buf,  0,  c);  [CE]  cannot  find  symbol  system  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  system.arraycopy(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  system.arraycopy(b,  offset  +  1,  buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol  system	35	None	add
340	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  buf,  0,  c);  [CE]  no  suitable  method  found  for  decode(byte[],int,byte[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  buf,  0,  c);	  	non-compiled	[CE]  no  suitable  method  found  for  decode(byte[],int,byte[],int,int)	35	None	add
341	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
342	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
343	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.encode(b,  offset  +  1,  buf,  0,  c);  [CE]  no  suitable  method  found  for  encode(byte[],int,byte[],int,int)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.encode(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.encode(b,  offset  +  1,  buf,  0,  c);	  	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,byte[],int,int)	35	None	add
344	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
345	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
346	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.singleByte  =  doEncode(b,  offset  +  1,  len);  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.singleByte  =  doEncode(b,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.singleByte  =  doEncode(b,  offset  +  1,  len);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	35	None	add
347	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  off  +  1,  buf,  0,  c);  [CE]  cannot  find  symbol  off  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  off  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  off  +  1,  buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol  off	35	None	add
348	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.singleByte  =  doEncode;  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.singleByte  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.singleByte  =  doEncode;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	35	None	add
349	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
350	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
351	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  baseNCodec.decode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,    0,    len);    baseNCodec.decode(buf,  0,  len);	  timeout    	compilable	  [FE]  AssertionError  	24	18	add
352	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  baseNCodec.decode(buf,  0,  len);  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  baseNCodec.decode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    baseNCodec.decode(buf,  0,  len);	  timeout    	compilable	  [FE]  AssertionError  	24	18	add
353	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec.decode(buf,  0,  len);  [CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec.decode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec.decode(buf,  0,  len);	  timeout    	non-compiled	[CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context	24	None	add
354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(buf,    0,    len);    baseNCodec.encode(buf,  0,  len);	  timeout    	compilable	  [FE]  AssertionError  	24	23	add
355	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  baseNCodec.encode(buf,  0,  len);  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    baseNCodec.encode(buf,  0,  len);	  timeout    	compilable	  [FE]  AssertionError  	24	23	add
356	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec.decode(buf,  0,  len);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec.decode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec.decode(buf,  0,  len);	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
357	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  c  =  baseNCodec.decode(buf,  0,  len);	  timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	24	None	add
358	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  len);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	24	None	add
359	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [CE]  cannot  find  symbol  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  getBaseNCodec();	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
360	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec.encode(buf,  0,  len);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec.encode(buf,  0,  len);	  timeout    	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	24	None	add
361	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset  +  1,  buf,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
362	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
363	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset  +  1,  b,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
364	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  b,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
365	[BUG]  [BUGGY]  timeout  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset  +  1,  buf,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	timeout	36	1	replace
366	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  0,  len);  timeout  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  buf,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	timeout	36	1	replace
367	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset  +  1,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
368	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
369	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	36	25	replace
370	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  c);  [FE]  ArrayStoreException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	36	25	replace
371	[BUG]  [BUGGY]  timeout  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset  +  1,  buf,  0,  c  +  1);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	timeout	36	1	replace
372	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  c  +  1);  timeout  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  0,  c  +  1);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	timeout	36	1	replace
373	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  offset  +  1,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
374	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  1,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset  +  1,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
375	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  -  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset  -  1,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
376	[BUG]  [BUGGY]  System.arraycopy(b,  offset  -  1,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  -  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  -  1,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
377	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
378	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  b,  offset,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
379	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  0,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
380	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  b,  0,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
381	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  offset  +  1,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
382	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  c,  doEncode,  len);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  c,  doEncode,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  c,  doEncode,  len);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
383	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
384	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  offset,  len,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  offset,  len,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  offset,  len,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
385	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  buffer,  doEncode);  [CE]  cannot  find  symbol  buffer  [FE]                            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  buffer,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  buffer,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  cannot  find  symbol  buffer	37	None	replace
386	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.decode(b,    0,    c);    baseNCodec.decode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	18	add
387	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  baseNCodec.decode(b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    baseNCodec.decode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	18	add
388	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec.decode(b,  0,  c);  [CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec.decode(b,  0,  c);	  	non-compiled	[CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context	22	None	add
389	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec.decode(b,  0,  c);  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec.decode(b,  0,  c);	  	non-compiled	[CE]  ';'  expected	22	None	add
390	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  getBaseNCodec();  baseNCodec.decode(b,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  getBaseNCodec();  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  b  =  getBaseNCodec();  baseNCodec.decode(b,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	22	None	add
391	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.decode(b,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.decode(b,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	22	None	add
392	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  c);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  c);	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	22	None	add
393	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getByte(buf,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getByte(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.getByte(buf,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	22	None	add
394	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getBytes(buf,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getBytes(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.getBytes(buf,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	22	None	add
395	[BUG]  [BUGGY]  rackBase.encode(buf,  0,  c);  [CE]  cannot  find  symbol  rackBase  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBase.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBase.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  rackBase	4	None	replace
396	[BUG]  [BUGGY]  rackBindings.encode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  rackBindings  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBindings.encode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBindings.encode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  rackBindings	4	None	replace
397	[BUG]  [BUGGY]  îndecode(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
398	[BUG]  [BUGGY]  rackBinding(buf,  offset,  len);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBinding(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBinding(buf,  offset,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
399	[BUG]  [BUGGY]  bucket.encode(buf,  0,  c);  [CE]  cannot  find  symbol  bucket  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucket.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucket.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  bucket	19	None	replace
400	[BUG]  [BUGGY]  rackBounds(baseNCodec,  offset,  len);  [CE]  cannot  find  symbol  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBounds(baseNCodec,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBounds(baseNCodec,  offset,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
401	[BUG]  [BUGGY]  rackBounds(buf,  offset,  len);  [CE]  cannot  find  symbol  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBounds(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBounds(buf,  offset,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
402	[BUG]  [BUGGY]  rackBinding(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBinding(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBinding(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
403	[BUG]  [BUGGY]  timeout  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  readLen  =  readLen;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	readLen  =  readLen;	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	compilable	timeout	19	1	replace
404	[BUG]  [BUGGY]  readLen  =  readLen;  timeout  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  readLen  =  readLen;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	readLen  =  readLen;	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	compilable	timeout	19	1	replace
405	[BUG]  [BUGGY]  rackBounds(b,  offset,  len);  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  rackBounds(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	rackBounds(b,  offset,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
406	[BUG]  [BUGGY]  bucket.encode(buf,  0,  len);  [CE]  cannot  find  symbol  bucket  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  bucket.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	bucket.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  bucket	19	None	replace
407	[BUG]  [BUGGY]  îndecodeBaseNonByte.encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonByte.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonByte.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
408	[BUG]  [BUGGY]  cast(baseNCodec.decode(buf,  0,  c));  [CE]  'void'  type  not  allowed  here  [FE]      IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.decode(buf,  0,  c));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.decode(buf,  0,  c));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	replace
409	[BUG]  [BUGGY]  îndecodeBaseNonByte.decode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonByte.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonByte.decode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
410	[BUG]  [BUGGY]  cast(baseNCodec.getText(),  buf,  0,  c);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.getText(),  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.getText(),  buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
411	[BUG]  [BUGGY]  îndecodeBaseNonByte.encode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonByte.encode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonByte.encode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
412	[BUG]  [BUGGY]  baseNCodec.encodeByte(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encodeByte(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encodeByte(buf,  0,  len);	  baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
413	[BUG]  [BUGGY]  BaseNCodec  baseNCodec.encode(buf,  0,  c);  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec.encode(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec.encode(buf,  0,  c);	  baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  ';'  expected	21	None	replace
414	[BUG]  [BUGGY]  baseNCodec.encodeByte(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encodeByte(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encodeByte(buf,  0,  c);	  baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
415	[BUG]  [BUGGY]  angleEdge.decodeBase64(buf,  0,  len);  [CE]  cannot  find  symbol  angleEdge  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.decodeBase64(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.decodeBase64(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  angleEdge	19	None	replace
416	[BUG]  [BUGGY]  angleEdge.encode(buf,  0,  len);  [CE]  cannot  find  symbol  angleEdge  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  angleEdge	19	None	replace
417	[BUG]  [BUGGY]  angleEdge.encodeBase64(buf,  0,  len);  [CE]  cannot  find  symbol  angleEdge  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.encodeBase64(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.encodeBase64(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  angleEdge	19	None	replace
418	[BUG]  [BUGGY]  angleEdge.encodeBase64(buf,  0,  c);  [CE]  cannot  find  symbol  angleEdge  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.encodeBase64(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.encodeBase64(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  angleEdge	19	None	replace
419	[BUG]  [BUGGY]  angleEdge.decodeBase64(buf,  0,  c);  [CE]  cannot  find  symbol  angleEdge  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.decodeBase64(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.decodeBase64(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  angleEdge	19	None	replace
420	[BUG]  [BUGGY]  îndecodeBase.encode(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  	19	None	replace
421	[BUG]  [BUGGY]  îndecodeBase.encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  	19	None	replace
422	[BUG]  [BUGGY]  angleEdge.decodeBase(buf,  0,  len);  [CE]  cannot  find  symbol  angleEdge  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.decodeBase(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.decodeBase(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  angleEdge	19	None	replace
423	[BUG]  [BUGGY]  angleEdge.decode(buf,  0,  c);  [CE]  cannot  find  symbol  angleEdge  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.decode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  angleEdge	31	None	replace
424	[BUG]  [BUGGY]  angleEdge.encode(buf,  0,  c);  [CE]  cannot  find  symbol  angleEdge  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  angleEdge	31	None	replace
425	[BUG]  [BUGGY]  angleEdge.decodeBaseCode(buf,  0,  c);  [CE]  cannot  find  symbol  angleEdge  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.decodeBaseCode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.decodeBaseCode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  angleEdge	31	None	replace
426	[BUG]  [BUGGY]  Context.codeBug();  [CE]  cannot  find  symbol  Context  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  Context.codeBug();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	Context.codeBug();	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  Context	31	None	replace
427	[BUG]  [BUGGY]  angleEdge.decodeBase(buf,  0,  c);  [CE]  cannot  find  symbol  angleEdge  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  angleEdge.decodeBase(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	angleEdge.decodeBase(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol  angleEdge	31	None	replace
428	[BUG]  [BUGGY]  wireNCodec.encode(buf,  0,  c);  [CE]  cannot  find  symbol  wireNCodec  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  wireNCodec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	wireNCodec.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  wireNCodec	30	None	replace
429	[BUG]  [BUGGY]  îndecodeBase.encode(buf,  0,  readLen);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.encode(buf,  0,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.encode(buf,  0,  readLen);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  	30	None	replace
430	[BUG]  [BUGGY]  wireNCodec.encode(buf,  0,  readLen);  [CE]  cannot  find  symbol  wireNCodec  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  wireNCodec.encode(buf,  0,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	wireNCodec.encode(buf,  0,  readLen);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  wireNCodec	30	None	replace
431	[BUG]  [BUGGY]  cast(baseNCodec.encode(buf,  0,  readLen));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.encode(buf,  0,  readLen));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.encode(buf,  0,  readLen));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	30	None	replace
432	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  =  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  =  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
433	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  =  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  =  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  =  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	18	21	add
434	[BUG]  [BUGGY]  BaseNCodec.decode(buf,  0,  c);  [CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.decode(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.decode(buf,  0,  c);	  baseNCodec.decode(b,    0,    c);    	non-compiled	[CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context	23	None	replace
435	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.read(buf,  0,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.read(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.read(buf,  0,  len);	  baseNCodec.decode(buf,    0,    len);    timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	25	None	replace
436	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  b.length);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  b.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	27	None	replace
437	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  c,  offset);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  c,  offset);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  c,  offset);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	28	None	replace
438	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  c,  len);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  c,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  c,  len);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	28	None	replace
439	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  buf.length);  [CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  buf.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  buf.length);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  non-static  method  encode(byte[],int,int)  cannot  be  referenced  from  a  static  context	28	None	replace
440	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  b);  [CE]  no  suitable  method  found  for  encode(byte[],int,byte[])  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  b);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  b);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,byte[])	28	None	replace
441	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  c,  doEncode);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,boolean)  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  c,  doEncode);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  c,  doEncode);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,boolean)	28	None	replace
442	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len  -  1);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len  -  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  len  -  1);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
443	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  ';'  expected	5	None	add
444	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
445	[BUG]  [BUGGY]  timeout  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
446	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  len);  timeout  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
447	[BUG]  [BUGGY]  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  0,  offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  0,  buf,  0,  offset);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
448	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  0,  offset);  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  0,  offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  0,  offset);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
449	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset,  buf,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
450	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset,  buf,  0,  c);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	25	replace
451	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  ';'  expected	9	None	add
452	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	non-compiled	[CE]  ';'  expected	9	None	add
453	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  len);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  len);	  	non-compiled	[CE]  incompatible  types	20	None	add
454	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBaseNCodec();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  getBaseNCodec();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
455	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  0,  len);	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	20	None	add
456	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	20	None	add
457	[BUG]  [BUGGY]  codec.encode(b,  0,  len);  [CE]  cannot  find  symbol  codec  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(b,  0,  len);	      codec.encode(buf,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  codec	40	None	replace
458	[BUG]  [BUGGY]  cast(baseNCodec.encode(b,  0,  c));  [CE]  'void'  type  not  allowed  here  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.encode(b,  0,  c));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.encode(b,  0,  c));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  'void'  type  not  allowed  here	8	None	replace
459	[BUG]  [BUGGY]  cast(baseNCodec.encode(buf,  0,  len));  [CE]  'void'  type  not  allowed  here  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  cast(baseNCodec.encode(buf,  0,  len));  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	cast(baseNCodec.encode(buf,  0,  len));	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  'void'  type  not  allowed  here	8	None	replace
460	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  0,  c);	  	non-compiled	[CE]  'else'  without  'if'	35	None	add
461	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
462	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(buf,  offset  +  1,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
463	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
464	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  baseNCodec.decode(b,  offset  +  1,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
465	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
466	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
467	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
468	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  this.baseNCodec.decode(buf,  offset  +  1,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
469	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c  +  1);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c  +  1);	  timeout    	non-compiled	[CE]  incompatible  types	42	None	add
470	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  1);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  1);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	42	None	add
471	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  codec.decode(buf,  0,  c  +  1);  [CE]  cannot  find  symbol  codec  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  codec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    codec.decode(buf,  0,  c  +  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  codec	42	None	add
472	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  =  doEncode(b,  0,  c);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  =  doEncode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  =  doEncode(b,  0,  c);	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
473	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  type  AssertionError  does  not  take  parameters  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
474	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  asEncoding();  [CE]  type  AssertionError  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  asEncoding();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  Object>  doEncode  =  asEncoding();	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
475	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAME);  [CE]  type  AssertionError  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAME);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAME);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
476	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    baseNCodec.encode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	20	add
477	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  baseNCodec.encode(b,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  baseNCodec.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    baseNCodec.encode(b,  0,  c);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	14	20	add
478	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  BaseNCodec  baseNCodec  =  getBaseNCodec();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  BaseNCodec  baseNCodec  =  getBaseNCodec();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    BaseNCodec  baseNCodec  =  getBaseNCodec();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
479	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  c,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  c,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  b,  c,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
480	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  c,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset  +  1,  buf,  c,  len);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	25	replace
481	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  c,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  c,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  c,  len);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	37	25	replace
482	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  c,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  buf,  c,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  buf,  c,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
483	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getByte(offset);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getByte(offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.getByte(offset);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
484	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getByte(offset);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getByte(offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  getByte(offset);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
485	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getBytes(offset);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getBytes(offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.getBytes(offset);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
486	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getByte(offset,  offset+len);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  baseNCodec.getByte(offset,  offset+len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  baseNCodec.getByte(offset,  offset+len);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
487	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
488	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  readLen);  }  else  {  readLen  =  0;  }	  	compilable	  [FE]  AssertionError  	29	12	add
489	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  =  doEncode(buf,  0,  readLen);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  =  doEncode(buf,  0,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    AssertionError  <  =  doEncode(buf,  0,  readLen);	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
490	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  asSingleByte.isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  type  AssertionError  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  asSingleByte.isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    AssertionError  <  Object>  doEncode  =  asSingleByte.isEnabled(Feature.QUOTE_FIELD_NAMES);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	29	None	add
491	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  readLen  =  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    readLen  =  0;	  	compilable	  [FE]  AssertionError  	29	12	add
492	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  readLen  =  0;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  readLen  =  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    readLen  =  0;	  	compilable	  [FE]  AssertionError  	29	12	add
493	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  readLen);  [CE]  type  AssertionError  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  readLen);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	29	None	add
494	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  asSingleByte.isEnabled(Feature.QUOTE_FIELD_NAME);  [CE]  type  AssertionError  does  not  take  parameters  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  AssertionError  <  Object>  doEncode  =  asSingleByte.isEnabled(Feature.QUOTE_FIELD_NAME);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    AssertionError  <  Object>  doEncode  =  asSingleByte.isEnabled(Feature.QUOTE_FIELD_NAME);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	29	None	add
495	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  c  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset  +  1,  buf,  0,  c  -  1);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
496	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  c  -  1);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  0,  c  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  0,  c  -  1);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
497	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.baseNCodec.decode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  this.baseNCodec.decode(b,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
498	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.baseNCodec.decode(b,  offset,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  this.baseNCodec.decode(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  this.baseNCodec.decode(b,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
499	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
500	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  buf,  0,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
501	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
502	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  offset,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.decode(buf,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	25	add
503	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(buf,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	24	add
504	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(buf,  offset,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  baseNCodec.encode(buf,  offset,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	24	add
505	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  inputLen);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  inputLen);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  inputLen);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	45	None	replace
506	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  off);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  off);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  off);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	45	None	replace
507	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    AssertionError  <  Object>  doEncode  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	7	None	add
508	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  AssertionError  <  Object>  doEncode  =  doEncode;  [CE]  type  AssertionError  does  not  take  parameters  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  AssertionError  <  Object>  doEncode  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    AssertionError  <  Object>  doEncode  =  doEncode;	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	7	None	add
509	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  type  AssertionError  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	7	None	add
510	[BUG]  [BUGGY]  îndecodeBaseNonByte(buf,  offset,  len);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonByte(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonByte(buf,  offset,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
511	[BUG]  [BUGGY]  îndecodeBaseNonEscaped(b,  offset,  len);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonEscaped(b,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonEscaped(b,  offset,  len);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
512	[BUG]  [BUGGY]  îndecodeBaseNonEscaped(b,  c,  doEncode);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonEscaped(b,  c,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonEscaped(b,  c,  doEncode);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
513	[BUG]  [BUGGY]  îndecodeBaseNonEscaped(b,  0,  c);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonEscaped(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonEscaped(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
514	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  b.length);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  b.length);	  timeout    	non-compiled	[CE]  incompatible  types	26	None	add
515	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  encode(buf,  0,  b.length);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  encode(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  encode(buf,  0,  b.length);	  timeout    	non-compiled	[CE]  cannot  find  symbol	26	None	add
516	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b,  0,  b.length);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  new  BaseNCodec(b,  0,  b.length);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	26	None	add
517	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  new  BaseNCodec();	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	26	None	add
518	[BUG]  [BUGGY]  BaseNCodec.decode(buf,  0,  c  +  1);  [CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.decode(buf,  0,  c  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	non-compiled	[CE]  non-static  method  decode(byte[],int,int)  cannot  be  referenced  from  a  static  context	43	None	replace
519	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }	  	non-compiled	[CE]  ';'  expected	11	None	add
520	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  b,  c,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  b,  c,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset,  b,  c,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
521	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  offset,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
522	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
523	[BUG]  [BUGGY]  System.arraycopy(b,  offset,  buf,  buffer,  doEncode);  [CE]  cannot  find  symbol  buffer  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset,  buf,  buffer,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset,  buf,  buffer,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  cannot  find  symbol  buffer	41	None	replace
524	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    BaseNCodec  baseNCodec  =  new  BaseNCodec();	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	16	None	add
525	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(readLen);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    BaseNCodec  baseNCodec  =  new  BaseNCodec(readLen);	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	16	None	add
526	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(readLen());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(readLen());  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    BaseNCodec  baseNCodec  =  new  BaseNCodec(readLen());	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
527	[BUG]  [BUGGY]  îndecodeBaseNon.encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNon.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNon.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
528	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
529	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec();	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	24	None	add
530	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =(BaseNCodec)base.read();  [CE]  cannot  find  symbol  base  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =(BaseNCodec)base.read();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =(BaseNCodec)base.read();	  timeout    	non-compiled	[CE]  cannot  find  symbol  base	24	None	add
531	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseNOffset);  [CE]  cannot  find  symbol  baseNOffset  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseNOffset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(baseNOffset);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol  baseNOffset	13	None	replace
532	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseNIndex);  [CE]  cannot  find  symbol  baseNIndex  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseNIndex);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(baseNIndex);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol  baseNIndex	13	None	replace
533	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseN);  [CE]  cannot  find  symbol  baseN  [FE]                        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseN);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(baseN);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol  baseN	13	None	replace
534	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseN,  c);  [CE]  cannot  find  symbol  baseN  [FE]                          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseN,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(baseN,  c);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol  baseN	13	None	replace
535	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseNOffset());  [CE]  cannot  find  symbol  [FE]                            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(baseNOffset());  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(baseNOffset());	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
536	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(false);  [CE]  cannot  find  symbol  [FE]                              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(false);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(false);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
537	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  baseNCodec.decode(b,  0,  c);  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  baseNCodec.decode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec  =  baseNCodec.decode(b,  0,  c);	  	non-compiled	[CE]  incompatible  types	22	None	add
538	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  baseNCodec.getByte(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  baseNCodec.getByte(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec  =  baseNCodec.getByte(buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
539	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  baseNCodec.encode(b,  0,  c);  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  baseNCodec.encode(b,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec  =  baseNCodec.encode(b,  0,  c);	  	non-compiled	[CE]  incompatible  types	22	None	add
540	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
541	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  len);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  len);	  	compilable	  [FE]  AssertionError  	38	19	add
542	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(buf,  0,  c);  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	38	None	add
543	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	38	20	add
544	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  c);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.baseNCodec.decode(buf,  0,  c);	  	compilable	  [FE]  AssertionError  	38	20	add
545	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(b,  0,  len);  [CE]  cannot  assign  a  value  to  final  variable  singleByte  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  this.singleByte  =  doEncode(b,  0,  len);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  singleByte	38	None	add
546	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  b  =  new  ByteArrayInputStream(buf,  offset,  len);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  b  =  new  ByteArrayInputStream(buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  b  =  new  ByteArrayInputStream(buf,  offset,  len);	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
547	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  =  doEncode(buf,  0,  c);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
548	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  type  AssertionError  does  not  take  parameters  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAMES);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
549	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAME);  [CE]  type  AssertionError  does  not  take  parameters  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAME);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Object>  doEncode  =  isEnabled(Feature.QUOTE_FIELD_NAME);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
550	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  asEncoding();  [CE]  type  AssertionError  does  not  take  parameters  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  Object>  doEncode  =  asEncoding();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  Object>  doEncode  =  asEncoding();	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
551	[BUG]  [BUGGY]  îndecodeBaseNonByte.encode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonByte.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonByte.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
552	[BUG]  [BUGGY]  îndecodeBase.encode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
553	[BUG]  [BUGGY]  îndecodeBaseNon.encode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNon.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNon.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
554	[BUG]  [BUGGY]  îndecodeBaseNonBounds(b,  0,  c);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNonBounds(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNonBounds(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
555	[BUG]  [BUGGY]  encodeBaseNCodec(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  encodeBaseNCodec(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	encodeBaseNCodec(buf,  0,  c);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
556	[BUG]  [BUGGY]  codec.decode(buf,  0,  c);  [CE]  cannot  find  symbol  codec  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.decode(buf,  0,  c);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codec	32	None	replace
557	[BUG]  [BUGGY]  codec.encode(buf,  0,  c  +  1);  [CE]  cannot  find  symbol  codec  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codec.encode(buf,  0,  c  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codec.encode(buf,  0,  c  +  1);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codec	32	None	replace
558	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(baseNCodec,  0,  buf,  offset,  len);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	  [FE]  ArrayStoreException  	39	25	replace
559	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  offset,  len);  [FE]  ArrayStoreException  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  0,  buf,  offset,  len);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	  [FE]  ArrayStoreException  	39	25	replace
560	[BUG]  [BUGGY]  timeout  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  0,  buf,  offset,  len  +  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
561	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len  +  1);  timeout  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len  +  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  0,  buf,  offset,  len  +  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
562	[BUG]  [BUGGY]  timeout  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  0,  buf,  offset,  len  -  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
563	[BUG]  [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len  -  1);  timeout  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  0,  buf,  offset,  len  -  1);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  0,  buf,  offset,  len  -  1);	      System.arraycopy(b,    0,    buf,    offset,    len);    	compilable	timeout	39	1	replace
564	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(c  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(c  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(c  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  ';'  expected	9	None	add
565	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  Len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  0,  Len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  0,  Len);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	45	None	replace
566	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
567	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);System.arraycopy(b,  offset  +  1,  buf,  0,  len);	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	35	25	add
568	[BUG]  [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [CE]  'else'  without  'if'  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset  +  1,  buf,  0,  c);  System.arraycopy(b,  offset  +  1,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset    +    1,    buf,    0,    c);    System.arraycopy(b,  offset  +  1,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  0,  len);	  	non-compiled	[CE]  'else'  without  'if'	35	None	add
569	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  [CE]  'else'  without  'if'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);	  	non-compiled	[CE]  'else'  without  'if'	33	None	add
570	[BUG]  [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  len,  buf,  0,  c);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  offset,  buf,  0,  c);  System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  len,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    offset,    buf,    0,    c);    System.arraycopy(b,  offset,  buf,  0,  c);System.arraycopy(b,  offset,  len,  buf,  0,  c);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	33	None	add
571	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doneEncode)  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!doneEncode)  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!doneEncode)  {  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  ';'  expected	11	None	add
572	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(singleByte)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(singleByte)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(singleByte)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	11	None	add
573	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.decode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	25	add
574	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(doEncode)  {  baseNCodec.decode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(doEncode)  {  baseNCodec.decode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	25	add
575	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(c  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(c  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(c  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  ';'  expected	5	None	add
576	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
577	[BUG]  [BUGGY]  ==  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  ==  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	==  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
578	[BUG]  [BUGGY]  }  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  }  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	}  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
579	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
580	[BUG]  [BUGGY]  [Delete]  else  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
581	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
582	[BUG]  [BUGGY]  [Delete]  else  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
583	[BUG]  [BUGGY]  ==  [Delete]  else  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  ==  [Delete]  else  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	==  [Delete]  else  if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
584	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	36	25	replace
585	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  offset  +  1,  buf,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	36	25	replace
586	[BUG]  [BUGGY]  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset  +  1,  b,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	timeout	36	1	replace
587	[BUG]  [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  len);  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset  +  1,  b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset  +  1,  b,  0,  len);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	timeout	36	1	replace
588	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  4,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(b,  offset  +  4,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
589	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  4,  buf,  0,  c);  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  4,  buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  4,  buf,  0,  c);	      System.arraycopy(b,    offset    +    1,    buf,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	36	25	replace
590	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
591	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
592	[BUG]  [BUGGY]  [Delete]  while(!doEncode)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  while(!doEncode)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  while(!doEncode)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
593	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
594	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
595	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.encode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.encode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
596	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(baseNCodec,  0,  buf,  offset,  len);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(baseNCodec,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(baseNCodec,  0,  buf,  offset,  len);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
597	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.encode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.encode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
598	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  offset);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  offset);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  offset);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
599	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  c);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  getBaseNCodec(offset,  c);	      BaseNCodec    baseNCodec    =    getBaseNCodec();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
600	[BUG]  [BUGGY]  codeBase64Codec.encode(buf,  0,  c);  [CE]  cannot  find  symbol  codeBase64Codec  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  codeBase64Codec.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	codeBase64Codec.encode(buf,  0,  c);	      codec.encode(buf,    0,    c);    	non-compiled	[CE]  cannot  find  symbol  codeBase64Codec	32	None	replace
601	[BUG]  [BUGGY]  BaseNCodec.encode(buf,  0,  c,  readLen);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec.encode(buf,  0,  c,  readLen);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec.encode(buf,  0,  c,  readLen);	  BaseNCodec.encode(buf,    0,    c);    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	28	None	replace
602	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  offset,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.encode(buf,  offset,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.encode(buf,  offset,  len);	  BaseNCodec    c    =    baseNCodec.encode(buf,    0,    len);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	44	None	replace
603	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
604	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
605	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
606	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
607	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);	  	non-compiled	[CE]  'else'  without  'if'	38	None	add
608	[BUG]  [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  systemNCodec.decode(buf,  0,  c);  [CE]  cannot  find  symbol  systemNCodec  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      System.arraycopy(b,  0,  buf,  offset,  len);  System.arraycopy(b,  0,  buf,  offset,  len);  systemNCodec.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        System.arraycopy(b,    0,    buf,    offset,    len);    System.arraycopy(b,  0,  buf,  offset,  len);  systemNCodec.decode(buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol  systemNCodec	38	None	add
609	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
610	[BUG]  [BUGGY]  [Delete]  else  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
611	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
612	[BUG]  [BUGGY]  [Delete]  else  if(c  >  0)  {  doEncode  =  false;  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(c  >  0)  {  doEncode  =  false;  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(c  >  0)  {  doEncode  =  false;  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
613	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  throw  new  IllegalStateException( " ".);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
614	[BUG]  [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  [Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	[Delete]  else  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  else  {  throw  new  IllegalStateException( " ");  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
615	[BUG]  [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  +  1,  c);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  0,  buf,  offset,  len  +  1,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  0,  buf,  offset,  len  +  1,  c);	      System.arraycopy(b,    0,    buf,    offset,    len);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	39	None	replace
616	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  len;  }	      baseNCodec.encode(buf,    0,    c);    	compilable	timeout	17	1	replace
617	[BUG]  [BUGGY]  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  len;  }  timeout  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  len;  }	      baseNCodec.encode(buf,    0,    c);    	compilable	timeout	17	1	replace
618	[BUG]  [BUGGY]  îndecodeByte.encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeByte.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeByte.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
619	[BUG]  [BUGGY]  îndecodeByte.encode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeByte.encode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeByte.encode(b,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
620	[BUG]  [BUGGY]  îndecodeBaseN.encode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseN.encode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseN.encode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	15	None	replace
621	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c);  [CE]  incompatible  types  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c);	  baseNCodec.decode(b,    0,    c);    	non-compiled	[CE]  incompatible  types	23	None	replace
622	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
623	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }	  	compilable	  [FE]  AssertionError  	7	19	add
624	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	7	19	add
625	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	7	19	add
626	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  return  null;  }  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  return  null;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  return  null;  }	  	non-compiled	[CE]  incompatible  types	7	None	add
627	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	7	19	add
628	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  0,  buf,  offset,  len);  }  if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    System.arraycopy(b,    0,    buf,    offset,    len);    }    if(doEncode)  {  System.arraycopy(b,  0,  buf,  offset,  len);  baseNCodec.decode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	7	19	add
629	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  c);  readLen  =  0;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  c);  readLen  =  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(buf,  0,  c);  readLen  =  0;	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  	30	None	replace
630	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  readLen);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  readLen);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(buf,  0,  readLen);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  	30	None	replace
631	[BUG]  [BUGGY]  îndecodeBase.encode(buf,  0,  c);  readLen  =  0;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.encode(buf,  0,  c);  readLen  =  0;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.encode(buf,  0,  c);  readLen  =  0;	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  	30	None	replace
632	[BUG]  [BUGGY]  îndecodeBase.decode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.decode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.decode(buf,  0,  c);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  	30	None	replace
633	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    	non-compiled	[CE]  cannot  find  symbol  	30	None	replace
634	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <!doEncode(b,  0,  c);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <!doEncode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <!doEncode(b,  0,  c);	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
635	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <?>  doEncode  =  doEncode(b,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  AssertionError  <?>  doEncode  =  doEncode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    AssertionError  <?>  doEncode  =  doEncode(b,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	14	None	add
636	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  int  doEncode  =  doEncode(b,  0,  c);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(b,  0,  c);  }  int  doEncode  =  doEncode(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(b,    0,    c);    }    int  doEncode  =  doEncode(b,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
637	[BUG]  [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  offset,  doEncode,  len);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(b,  offset  +  1,  buf,  offset,  doEncode,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(b,  offset  +  1,  buf,  offset,  doEncode,  len);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
638	[BUG]  [BUGGY]  System.arraycopy(c,  offset  +  1,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(c,  offset  +  1,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(c,  offset  +  1,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset    +    1,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	replace
639	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode  ||  readLen  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }	  	non-compiled	[CE]  ';'  expected	29	None	add
640	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode  ||  readLen  >  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	non-compiled	[CE]  ';'  expected	29	None	add
641	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  <  =  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  <  =  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode  ||  readLen  <  =  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
642	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  <  =  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  if(doEncode  ||  readLen  <  =  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    readLen    =    0;    }    if(doEncode  ||  readLen  <  =  0)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  readLen  =  0;  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
643	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  c  +  1);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  baseNCodec.encode(buf,  0,  c  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	non-compiled	[CE]  incompatible  types	43	None	replace
644	[BUG]  [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c  +  1);  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  baseNCodec  =  baseNCodec.decode(buf,  0,  c  +  1);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	non-compiled	[CE]  incompatible  types	43	None	replace
645	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1,  len);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  c  +  1,  len);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,int)	43	None	replace
646	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1,  doEncode);  [CE]  no  suitable  method  found  for  encode(byte[],int,int,boolean)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  c  +  1,  doEncode);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  c  +  1,  doEncode);	  baseNCodec.decode(buf,    0,    c    +    1);    timeout    	non-compiled	[CE]  no  suitable  method  found  for  encode(byte[],int,int,boolean)	43	None	replace
647	[BUG]  [BUGGY]  System.arraycopy(c,  offset,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(c,  offset,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(c,  offset,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
648	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  buf,  offset,  c,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  buf,  offset,  c,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  buf,  offset,  c,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
649	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  offset,  doEncode);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  offset,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  0,  buf,  offset,  doEncode);	      System.arraycopy(b,    offset,    buf,    c,    doEncode);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	41	None	replace
650	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.read(buf,  0,  b.length);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.read(buf,  0,  b.length);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.read(buf,  0,  b.length);	  baseNCodec.decode(buf,    0,    b.length);    timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	27	None	replace
651	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  b.length);  BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    b.length);    BaseNCodec  baseNCodec  =  new  BaseNCodec(b.length,  len);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	26	None	add
652	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  decode(buf,  0,  c  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  decode(buf,  0,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  baseNCodec  =  decode(buf,  0,  c  +  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol	42	None	add
653	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	42	None	add
654	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset  +  len,  c  +  1);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  c  +  1);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset  +  len,  c  +  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    c    +    1);    BaseNCodec  baseNCodec  =  new  BaseNCodec(offset  +  len,  c  +  1);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	42	None	add
655	[BUG]  [BUGGY]  GuvernedByte  b  =  getCommonByte(c).encode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  GuvernedByte  b  =  getCommonByte(c).encode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	GuvernedByte  b  =  getCommonByte(c).encode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
656	[BUG]  [BUGGY]  GuvernedByte  b  =  getGetter(c).encode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  GuvernedByte  b  =  getGetter(c).encode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	GuvernedByte  b  =  getGetter(c).encode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
657	[BUG]  [BUGGY]  GuvernedByte  b  =  getCommonByte(c).getDecodedByte();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  GuvernedByte  b  =  getCommonByte(c).getDecodedByte();  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	GuvernedByte  b  =  getCommonByte(c).getDecodedByte();	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
658	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len  -  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	baseNCodec.encode(buf,  0,  len  -  1);	  baseNCodec.encode(buf,    0,    len);    	compilable	timeout	21	1	replace
659	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len  -  1);  timeout  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len  -  1);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,  0,  len  -  1);	  baseNCodec.encode(buf,    0,    len);    	compilable	timeout	21	1	replace
660	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(!doEncode)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  if(!doEncode)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    if(!doEncode)  {  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	non-compiled	[CE]  ';'  expected	18	None	add
661	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(baseNCodec,  offset,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	34	25	replace
662	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  offset,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  offset,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	34	25	replace
663	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(baseNCodec,  0,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	34	25	replace
664	[BUG]  [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  0,  len);  [FE]  ArrayStoreException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(baseNCodec,  0,  buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(baseNCodec,  0,  buf,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	  [FE]  ArrayStoreException  	34	25	replace
665	[BUG]  [BUGGY]  timeout  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	System.arraycopy(buf,  offset,  b,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
666	[BUG]  [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  len);  timeout  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  System.arraycopy(buf,  offset,  b,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	System.arraycopy(buf,  offset,  b,  0,  len);	      System.arraycopy(b,    offset,    buf,    0,    c);    	compilable	timeout	34	1	replace
667	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  offset,  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  offset,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec  =  new  BaseNCodec(buf,  offset,  len);	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	22	None	add
668	[BUG]  [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  builder.append(buf,  0,  c);  [CE]  cannot  find  symbol  builder  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(b,  0,  c);  BaseNCodec  baseNCodec  =  builder.append(buf,  0,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(b,    0,    c);    BaseNCodec  baseNCodec  =  builder.append(buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol  builder	22	None	add
669	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  baseNCodec.read(b,  0,  len);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  baseNCodec.read(b,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  baseNCodec.read(b,  0,  len);	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
670	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  baseNCodec.read(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  baseNCodec.read(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  baseNCodec.read(buf,  0,  len);	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
671	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]                AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec(offset,  offset  +  len);	  timeout    	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	24	None	add
672	[BUG]  [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBase();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.decode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBase();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.decode(buf,    0,    len);    BaseNCodec  baseNCodec  =  getBase();	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
673	[BUG]  [BUGGY]  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  len);  [CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  BaseNCodec  c  =  baseNCodec.decode(buf,  0,  len);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	BaseNCodec  c  =  baseNCodec.decode(buf,  0,  len);	  baseNCodec.decode(buf,    0,    len);    timeout    	non-compiled	[CE]  variable  c  is  already  defined  in  method  read(byte[],int,int)	25	None	replace
674	[BUG]  [BUGGY]  îndecodeBase.decode(buf,  0,  len);  [CE]  cannot  find  symbol  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBase.decode(buf,  0,  len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBase.decode(buf,  0,  len);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    else    {    offset    +=    len;    }    	non-compiled	[CE]  cannot  find  symbol  	19	None	replace
675	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }	      baseNCodec.encode(b,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	20	replace
676	[BUG]  [BUGGY]  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	if(!doEncode)  {  baseNCodec.encode(b,  0,  c);  }	      baseNCodec.encode(b,    0,    c);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	20	replace
677	[BUG]  [BUGGY]  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }	      baseNCodec.encode(b,    0,    c);    	compilable	timeout	2	1	replace
678	[BUG]  [BUGGY]  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }  timeout  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  offset,  len);  }	      baseNCodec.encode(b,    0,    c);    	compilable	timeout	2	1	replace
679	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getByte(offset,  offset+len);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  getByte(offset,  offset+len);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  getByte(offset,  offset+len);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
680	[BUG]  [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  readByte(b,  0,  c);  [CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(b,  0,  c);  BaseNCodec  b  =  readByte(b,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(b,    0,    c);    BaseNCodec  b  =  readByte(b,  0,  c);	  	non-compiled	[CE]  variable  b  is  already  defined  in  method  read(byte[],int,int)	1	None	add
681	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	3	20	add
682	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(!doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	3	20	add
683	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <?>  doEncode  =  doEncode(buf,  0,  c);  [CE]  type  AssertionError  does  not  take  parameters  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <?>  doEncode  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <?>  doEncode  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
684	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	3	12	add
685	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.decode(buf,  0,  c);  }	  	compilable	  [FE]  AssertionError  	3	12	add
686	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  BYTE>  doEncode  =  doEncode(buf,  0,  c);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <  BYTE>  doEncode  =  doEncode(buf,  0,  c);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <  BYTE>  doEncode  =  doEncode(buf,  0,  c);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
687	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <?>  doEncode  =  doEncode;  [CE]  type  AssertionError  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  AssertionError  <?>  doEncode  =  doEncode;  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    AssertionError  <?>  doEncode  =  doEncode;	  	non-compiled	[CE]  type  AssertionError  does  not  take  parameters	3	None	add
688	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	3	12	add
689	[BUG]  [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    if(doEncode)  {  baseNCodec.encode(buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	3	12	add
690	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  len,  readLen);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  len,  readLen);  }	  	compilable	  [FE]  AssertionError  	16	20	add
691	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  len,  readLen);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  len,  readLen);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  1,  buf,  len,  readLen);  }	  	compilable	  [FE]  AssertionError  	16	20	add
692	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset  +  len,  readLen);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset  +  len,  readLen);  }	  	compilable	  [FE]  AssertionError  	16	20	add
693	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset  +  len,  readLen);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset  +  len,  readLen);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset  +  len,  buf,  offset  +  len,  readLen);  }	  	compilable	  [FE]  AssertionError  	16	20	add
694	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	16	19	add
695	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  System.arraycopy(b,  offset,  buf,  0,  len);  }	  	compilable	  [FE]  AssertionError  	16	19	add
696	[BUG]  [BUGGY]  timeout  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  break;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  break;  }	  	compilable	timeout	16	1	add
697	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  break;  }  timeout  [FE]          AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  break;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  break;  }	  	compilable	timeout	16	1	add
698	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	add	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	21	add
699	[BUG]  [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [FE]  ArrayIndexOutOfBoundsException  [FE]            AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]      baseNCodec.encode(buf,  0,  c);  if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	        baseNCodec.encode(buf,    0,    c);    if(doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {  offset  +=  len;  }	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	16	21	add
700	[BUG]  [BUGGY]  îndecode(buf,  0,  doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecode(buf,  0,  doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecode(buf,  0,  doEncode)  {  baseNCodec.encode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
701	[BUG]  [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  c);  baseNCodec.decode(buf,  0,  doEncode);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecodeBaseNCodec.encode(buf,  0,  c);  baseNCodec.decode(buf,  0,  doEncode);  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecodeBaseNCodec.encode(buf,  0,  c);  baseNCodec.decode(buf,  0,  doEncode);	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  cannot  find  symbol  	4	None	replace
702	[BUG]  [BUGGY]  îndecode(buf,  0,  doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  îndecode(buf,  0,  doEncode)  {  baseNCodec.decode(buf,  0,  c);  }  [BUGGY]    baseNCodec.decode(buf,  0,  c);  }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	îndecode(buf,  0,  doEncode)  {  baseNCodec.decode(buf,  0,  c);  }	      if(doEncode)    {    baseNCodec.encode(buf,    0,    c);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
703	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]    AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec();	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	20	None	add
704	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBase();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  getBase();  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  getBase();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
705	[BUG]  [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset  +  len,  c);  [CE]  BaseNCodec  is  abstract;  cannot  be  instantiated  [FE]        AssertionError    [CONTEXT]    if  (doEncode)  {  baseNCodec.encode(buf,  0,  c);  }  else  {    [BUGGY]  baseNCodec.encode(buf,  0,  len);  BaseNCodec  baseNCodec  =  new  BaseNCodec(offset  +  len,  c);  [BUGGY]    }  [CLASS]  BaseNCodecInputStream  [METHOD]  read  [RETURN_TYPE]  int  byte[]  b  int  offset  int  len  [VARIABLES]  byte[]  b  buf  singleByte  boolean  doEncode  BaseNCodec  baseNCodec  int  c  len  offset  readLen  	projects/Codec12/src/main/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java	0.28005601680560194	119	119	12	replace	baseNCodec.encode(buf,    0,    len);    BaseNCodec  baseNCodec  =  new  BaseNCodec(offset  +  len,  c);	  	non-compiled	[CE]  BaseNCodec  is  abstract;  cannot  be  instantiated	20	None	add
