bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch(status,  _cfgPrettyPrinter.getTypeDesc())  {  [CE]  ')'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status,  _cfgPrettyPrinter.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status,  _cfgPrettyPrinter.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    status.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
2	[BUG]  [BUGGY]  switch(status.getTypeDesc())  {  [CE]  int  cannot  be  dereferenced  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    status.getTypeDesc())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
3	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  b,  status.getTypeDesc())  {  [CE]  ')'  expected  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  b,  status.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  b,  status.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    status.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
4	[BUG]  [BUGGY]  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  orphaned  case	37	None	replace
5	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  duplicate  case  label  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  duplicate  case  label	37	None	replace
6	[BUG]  [BUGGY]  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  duplicate  case  label  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  duplicate  case  label	37	None	replace
7	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK)  {	  switch(status    &    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	35	1	replace
8	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK)  {	  switch(status    &    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	35	1	replace
9	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  /  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  /  JsonWriteContext.STATUS_EXPECT_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	5	1	replace
10	[BUG]  [BUGGY]  switch(status  /  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  /  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  /  JsonWriteContext.STATUS_EXPECT_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	5	1	replace
11	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.FIELD_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.FIELD_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	5	None	replace
12	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
14	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
15	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
16	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  BYTE_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  BYTE_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	10	1	replace
17	[BUG]  [BUGGY]  switch(status  &  BYTE_COMMA)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  BYTE_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  BYTE_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	10	1	replace
18	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  -  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  -  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	10	1	replace
19	[BUG]  [BUGGY]  switch(status  -  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  -  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  -  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	10	1	replace
20	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
21	[BUG]  [BUGGY]  if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
22	[BUG]  [BUGGY]  if(b  ==  BYTE_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(b  ==  BYTE_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b  ==  BYTE_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
23	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
24	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
25	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
26	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  }  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  }	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
27	[BUG]  [BUGGY]  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  _cfgPrettyPrinter.asUnquotedUTF8();	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
28	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  }  else  {  status  =  JsonWriteContext.STATUS_OK_AFTER_SPACE;  }  [CE]  orphaned  case  [FE]                        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  }  else  {  status  =  JsonWriteContext.STATUS_OK_AFTER_SPACE;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  }  else  {  status  =  JsonWriteContext.STATUS_OK_AFTER_SPACE;  }	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
29	[BUG]  [BUGGY]  b  =  BYTE_QUOTE;  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_QUOTE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_QUOTE;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_QUOTE;    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
30	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  }  [CE]  illegal  start  of  expression  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_QUOTE;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
31	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  [CE]  illegal  start  of  expression  [FE]                        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_QUOTE;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
32	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }  [CE]  illegal  start  of  expression  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
33	[BUG]  [BUGGY]  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
34	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status!=    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
35	[BUG]  [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    Switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
36	[BUG]  [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	Switch(status  &  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    Switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
37	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
38	[BUG]  [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [CE]  illegal  start  of  expression  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
41	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  }  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    }    	non-compiled	[CE]  orphaned  case	52	None	replace
42	[BUG]  [BUGGY]  switch(status)  {  }  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status)  {  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status)  {  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    }    	non-compiled	[CE]  orphaned  case	52	None	replace
43	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  }  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    }    	non-compiled	[CE]  orphaned  case	52	None	replace
44	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  switch(status    &    JsonWriteContext.STATUS_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	6	1	replace
45	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  switch(status    &    JsonWriteContext.STATUS_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	6	1	replace
46	[BUG]  [BUGGY]  switch(_outputStream,  _cfgPrettyPrinter.getTypeDesc())  {  [CE]  ')'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_outputStream,  _cfgPrettyPrinter.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_outputStream,  _cfgPrettyPrinter.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    _outputStream.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	48	None	replace
47	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.toByteArray())  {  [CE]  ')'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.toByteArray())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  _outputStream.toByteArray())  {	  switch(_cfgPrettyPrinter,    _outputStream.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	48	None	replace
48	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.readLine())  {  [CE]  ')'  expected  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.readLine())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  _outputStream.readLine())  {	  switch(_cfgPrettyPrinter,    _outputStream.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	48	None	replace
49	[BUG]  [BUGGY]  int  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  int  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	int  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
50	[BUG]  [BUGGY]  int  status  &  BYTE_COMMA)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  int  status  &  BYTE_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	int  status  &  BYTE_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
51	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.status)  {  [CE]  cannot  find  symbol  status  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.status)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.status)  {	  switch(_cfgPrettyPrinter.type)    {    	non-compiled	[CE]  cannot  find  symbol  status	27	None	replace
52	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.valueType)  {  [CE]  cannot  find  symbol  valueType  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.valueType)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.valueType)  {	  switch(_cfgPrettyPrinter.type)    {    	non-compiled	[CE]  cannot  find  symbol  valueType	27	None	replace
53	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	43	None	replace
54	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
55	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  Switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  Switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    Switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
56	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
57	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COLON;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COLON;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COLON;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
58	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
59	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  if(b    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
60	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_SPACE:    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
61	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [CE]  case,  default,  or  '}'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_SPACE:    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
62	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	case  JsonWriteContext.STATUS_OK_AFTER_SPACE:	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_SPACE:    	non-compiled	[CE]  orphaned  case	45	None	replace
63	[BUG]  [BUGGY]  b  =  BYTE_COMMA;  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_COMMA;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
64	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	55	None	replace
65	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	55	None	replace
66	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
67	[BUG]  [BUGGY]  ||  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
68	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  b)  {  [CE]  ')'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  b)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.getTypeDesc(),  b)  {	  switch(_cfgPrettyPrinter.getTypeDesc(),    status)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
69	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  typeMsg)  {  [CE]  ')'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  typeMsg)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.getTypeDesc(),  typeMsg)  {	  switch(_cfgPrettyPrinter.getTypeDesc(),    status)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
70	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.getValueDesc(),  status)  {  [CE]  ')'  expected  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.getValueDesc(),  status)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.getValueDesc(),  status)  {	  switch(_cfgPrettyPrinter.getTypeDesc(),    status)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
71	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
72	[BUG]  [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
73	[BUG]  [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
74	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
75	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
76	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
77	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_CAPACITY)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_CAPACITY)  {	  switch(status    &    JsonWriteContext.STATUS_BACKSLASH)    {    	compilable	  [FE]  JsonGenerationException  	34	1	replace
78	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_CAPACITY)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_CAPACITY)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_CAPACITY)  {	  switch(status    &    JsonWriteContext.STATUS_BACKSLASH)    {    	compilable	  [FE]  JsonGenerationException  	34	1	replace
79	[BUG]  [BUGGY]  switch(b,  _cfgPrettyPrinter.getTypeDesc())  {  [CE]  ')'  expected  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(b,  _cfgPrettyPrinter.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(b,  _cfgPrettyPrinter.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    b.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	9	None	replace
80	[BUG]  [BUGGY]  switch(b.getTypeDesc())  {  [CE]  byte  cannot  be  dereferenced  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(b.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(b.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    b.getTypeDesc())    {    	non-compiled	[CE]  byte  cannot  be  dereferenced	9	None	replace
81	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  b,  status)  {  [CE]  ')'  expected  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  b,  status)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  b,  status)  {	  switch(_cfgPrettyPrinter,    b.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	9	None	replace
82	[BUG]  [BUGGY]  b  =  BYTE_BACKSLASH;  break;  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_BACKSLASH;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_BACKSLASH;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
83	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  }  [CE]  illegal  start  of  expression  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
84	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  [CE]  illegal  start  of  expression  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
85	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  b)  {  [CE]  ')'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  b)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  b)  {	  switch(_cfgPrettyPrinter,    status)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
86	[BUG]  [BUGGY]  switch(status,  _cfgPrettyPrinter)  {  [CE]  ')'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status,  _cfgPrettyPrinter)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status,  _cfgPrettyPrinter)  {	  switch(_cfgPrettyPrinter,    status)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
87	[BUG]  [BUGGY]  if(b  ==  BYTE_COMMA)  {  [CE]  orphaned  case  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(b  ==  BYTE_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b  ==  BYTE_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
88	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_PARAM)    {    	compilable	  [FE]  JsonGenerationException  	31	1	replace
89	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_PARAM)    {    	compilable	  [FE]  JsonGenerationException  	31	1	replace
90	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  -  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  -  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_PARAM)    {    	compilable	  [FE]  JsonGenerationException  	31	1	replace
91	[BUG]  [BUGGY]  switch(status  -  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [FE]  JsonGenerationException  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  -  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  -  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_PARAM)    {    	compilable	  [FE]  JsonGenerationException  	31	1	replace
92	[BUG]  [BUGGY]  if(b!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(b!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
93	[BUG]  [BUGGY]  b  =  BYTE_SPACE;  break;  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_SPACE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_SPACE;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  orphaned  case	46	None	replace
94	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_SPACE;  break;  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_SPACE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_SPACE;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
95	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_SPACE;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_SPACE;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_SPACE;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
96	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  b  =  BYTE_QUOTE;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  b  =  BYTE_QUOTE;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  b  =  BYTE_QUOTE;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
97	[BUG]  [BUGGY]  b  =  BYTE_0;  break;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_0;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_0;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
98	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  }  [CE]  illegal  start  of  expression  [FE]                        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
99	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  [CE]  illegal  start  of  expression  [FE]                          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_BACKSLASH;  [CE]  orphaned  case  [FE]                            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_BACKSLASH;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_BACKSLASH;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
101	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
102	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  expression  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
103	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
104	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
105	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    	non-compiled	[CE]  orphaned  case	14	None	replace
106	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  [CE]  illegal  start  of  expression  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
108	[BUG]  [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
109	[BUG]  [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
110	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
111	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.types,  status)  {  [CE]  ')'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.types,  status)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.types,  status)  {	  switch(_cfgPrettyPrinter.types)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
112	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.types())  {  [CE]  cannot  find  symbol  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.types())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.types())  {	  switch(_cfgPrettyPrinter.types)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
113	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
114	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  Switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  Switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    Switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
115	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  ||(status  &  JsonWriteContext.STATUS_OK_COMMA))  {  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  ||(status  &  JsonWriteContext.STATUS_OK_COMMA))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    ||(status  &  JsonWriteContext.STATUS_OK_COMMA))  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
116	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  b  =  BYTE_COMMA;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
117	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  ||(status  &  JsonWriteContext.STATUS_OK_COMMA));  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  ||(status  &  JsonWriteContext.STATUS_OK_COMMA));  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    ||(status  &  JsonWriteContext.STATUS_OK_COMMA));	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
118	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(_cfgPrettyPrinter!=  null)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
119	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
120	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
121	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  orphaned  case	13	None	replace
122	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
123	[BUG]  [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  ';'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    Switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
124	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {  [CE]  orphaned  case  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
125	[BUG]  [BUGGY]  BYTE_0  =  BYTE_0;  break;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  BYTE_0  =  BYTE_0;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	BYTE_0  =  BYTE_0;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
126	[BUG]  [BUGGY]  ByTE_0  =  BYTE_0;  break;  [CE]  orphaned  case  [FE]                        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ByTE_0  =  BYTE_0;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	ByTE_0  =  BYTE_0;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
127	[BUG]  [BUGGY]  BYTE_QUOTE  =  BYTE_QUOTE;  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  BYTE_QUOTE  =  BYTE_QUOTE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	BYTE_QUOTE  =  BYTE_QUOTE;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_QUOTE;    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
128	[BUG]  [BUGGY]  ByTE_QUOTE  =  BYTE_QUOTE;  break;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ByTE_QUOTE  =  BYTE_QUOTE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	ByTE_QUOTE  =  BYTE_QUOTE;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_QUOTE;    break;    }    	non-compiled	[CE]  orphaned  case	50	None	replace
129	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
130	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
131	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [CE]  case,  default,  or  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	  	non-compiled	[CE]  case,  default,  or  	4	None	add
132	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  break;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
133	[BUG]  [BUGGY]  int  status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  int  status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	int  status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
134	[BUG]  [BUGGY]  int  status  &  JsonWriteContext.STATUS_OPTIONAL_COMMA)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  int  status  &  JsonWriteContext.STATUS_OPTIONAL_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	int  status  &  JsonWriteContext.STATUS_OPTIONAL_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
135	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_AS_BACKSLASH)  {  [CE]  cannot  find  symbol  STATUS_AS_BACKSLASH  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_AS_BACKSLASH)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_AS_BACKSLASH)  {	  switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_AS_BACKSLASH	20	None	replace
136	[BUG]  [BUGGY]  BYTE_COMMA  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  BYTE_COMMA  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	BYTE_COMMA  =  BYTE_COMMA;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
137	[BUG]  [BUGGY]  ByTE_COMMA  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ByTE_COMMA  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	ByTE_COMMA  =  BYTE_COMMA;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	49	None	replace
138	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
139	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  }  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    	non-compiled	[CE]  orphaned  case	14	None	replace
140	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    	non-compiled	[CE]  orphaned  case	14	None	replace
141	[BUG]  [BUGGY]  if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  b  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  b  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  b  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  orphaned  case	23	None	replace
142	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_BACKSLASH)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_BACKSLASH)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OPTIONAL_BACKSLASH)  {	  if(b    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	22	None	replace
143	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_SPACE;  break;  [CE]  case,  default,  or  '}'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_SPACE;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_SPACE;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
144	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_BACKSLASH;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_BACKSLASH;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_BACKSLASH;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
145	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [CE]  :  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  :  expected	53	None	replace
146	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
147	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_SPACE:    	non-compiled	[CE]  orphaned  case	45	None	replace
148	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_SPACE:    	non-compiled	[CE]  orphaned  case	45	None	replace
149	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_AFTER)  {	  switch(status    &    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	18	1	replace
150	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER)  {	  switch(status    &    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	18	1	replace
151	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
152	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_CANCEL)  {  [CE]  cannot  find  symbol  STATUS_CANCEL  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_CANCEL)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_CANCEL)  {	  switch(status    &    JsonWriteContext.STATUS_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL	41	None	replace
153	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  }  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    }    	non-compiled	[CE]  orphaned  case	52	None	replace
154	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  }  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    }    	non-compiled	[CE]  orphaned  case	52	None	replace
155	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OPTIONAL_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
156	[BUG]  [BUGGY]  b  =  _cfgPrettyPrinter.asUnquotedUTF8(status);  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  _cfgPrettyPrinter.asUnquotedUTF8(status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  _cfgPrettyPrinter.asUnquotedUTF8(status);  break;	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
157	[BUG]  [BUGGY]  b  =  _cfgPrettyPrinter.asSerialize(raw);  break;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  _cfgPrettyPrinter.asSerialize(raw);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  _cfgPrettyPrinter.asSerialize(raw);  break;	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
158	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_BACKSLASH)  {  [CE]  cannot  find  symbol  STATUS_OPTIONAL_BACKSLASH  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_BACKSLASH)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OPTIONAL_BACKSLASH)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OPTIONAL_BACKSLASH	28	None	replace
159	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  +  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  +  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	10	1	replace
160	[BUG]  [BUGGY]  switch(status  +  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  +  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  +  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	10	1	replace
161	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OBJECT_NAME)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_NAME  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OBJECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OBJECT_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_NAME	35	None	replace
162	[BUG]  [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	Switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    Switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
163	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  duplicate  case  label  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  duplicate  case  label	37	None	replace
164	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {  [CE]  cannot  find  symbol  STATUS_OPTIONAL_SIZE  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OPTIONAL_SIZE	39	None	replace
165	[BUG]  [BUGGY]  ByTE_BACKSLASH  =  BYTE_BACKSLASH;  break;  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ByTE_BACKSLASH  =  BYTE_BACKSLASH;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	ByTE_BACKSLASH  =  BYTE_BACKSLASH;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
166	[BUG]  [BUGGY]  b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
167	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.getCharacterIndex())  {  [CE]  ')'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.getCharacterIndex())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  _outputStream.getCharacterIndex())  {	  switch(_cfgPrettyPrinter,    _outputStream.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	48	None	replace
168	[BUG]  [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {  [CE]  ';'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  Switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	Switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SIZE)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    Switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
169	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	5	1	replace
170	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	5	1	replace
171	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  b.getType())  {  [CE]  ')'  expected  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  b.getType())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  b.getType())  {	  switch(_cfgPrettyPrinter,    b.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	9	None	replace
172	[BUG]  [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
173	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  0)  {  [CE]  ')'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  0)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.getTypeDesc(),  0)  {	  switch(_cfgPrettyPrinter.getTypeDesc(),    status)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
174	[BUG]  [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
175	[BUG]  [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
176	[BUG]  [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
177	[BUG]  [BUGGY]  ||(status  [Delete]  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||(status  [Delete]  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||(status  [Delete]  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
178	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  case  JsonWriteContext.STATUS_OK_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  case  JsonWriteContext.STATUS_OK_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    case  JsonWriteContext.STATUS_OK_COMMA:  b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
179	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  ||  status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  ||  status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    ||  status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
180	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  int  status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  int  status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    int  status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
181	[BUG]  [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  orphaned  case	13	None	replace
182	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
183	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    if(status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
184	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_COMMA)    {    if(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  break;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	19	None	add
185	[BUG]  [BUGGY]  b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
186	[BUG]  [BUGGY]  b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_BACKSLASH;  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_BACKSLASH;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_BACKSLASH;  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_BACKSLASH;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
187	[BUG]  [BUGGY]  b  =  BYTE_BACKSLASH;  break;case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_BACKSLASH;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_BACKSLASH;  break;case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_BACKSLASH;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_BACKSLASH;  break;case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_BACKSLASH;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  orphaned  case	33	None	replace
188	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_SPACE:    	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	replace
189	[BUG]  [BUGGY]  int  status  =  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  int  status  =  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	int  status  =  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	38	None	replace
190	[BUG]  [BUGGY]  int  status  =  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  int  status  =  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	int  status  =  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
191	[BUG]  [BUGGY]  if(b  ==  null)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(b  ==  null)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b  ==  null)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
192	[BUG]  [BUGGY]  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_EXPECT_NAME:  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
193	[BUG]  [BUGGY]  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_COMMA;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_COMMA;    break;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
194	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COLON;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COLON;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COLON;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
195	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_BACKSLASH;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_BACKSLASH;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_BACKSLASH;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
196	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	1	None	replace
197	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_COMMA;    break;    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
198	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ASSIGN)  {  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ASSIGN)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_ASSIGN)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  orphaned  case	44	None	replace
199	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN)    {    	non-compiled	[CE]  orphaned  case	40	None	replace
200	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	54	None	replace
201	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
202	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	24	None	replace
203	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_BACKSLASH;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_BACKSLASH;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_BACKSLASH;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
204	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_QUOTE;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_QUOTE;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_QUOTE;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b    =    BYTE_SPACE;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	46	None	replace
205	[BUG]  [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  ||  status  ||  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	||  status  ||  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||    status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
206	[BUG]  [BUGGY]  b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_BACKSLASH;  break;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_BACKSLASH;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_BACKSLASH;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
207	[BUG]  [BUGGY]  b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  orphaned  case  [FE]                        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  BYTE_0;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    b    =    BYTE_0;    break;    }    	non-compiled	[CE]  orphaned  case	17	None	replace
208	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  case,  default,  or  '}'  expected	55	None	replace
209	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  orphaned  case  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    break;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
210	[BUG]  [BUGGY]  switch(status,  b.getTypeDesc())  {  [CE]  ')'  expected  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status,  b.getTypeDesc())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status,  b.getTypeDesc())  {	  switch(_cfgPrettyPrinter,    b.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	9	None	replace
211	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  b.getCharacterIndex())  {  [CE]  ')'  expected  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter,  b.getCharacterIndex())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  b.getCharacterIndex())  {	  switch(_cfgPrettyPrinter,    b.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	9	None	replace
212	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.values())  {  [CE]  cannot  find  symbol  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.values())  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.values())  {	  switch(_cfgPrettyPrinter.types)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
213	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.class)  {  [CE]  cannot  find  symbol  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.class)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.class)  {	  switch(_cfgPrettyPrinter.type)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
214	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  orphaned  case  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  orphaned  case	15	None	replace
215	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
216	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
217	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  }  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
218	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  b  =  BYTE_	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
219	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  }	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  orphaned  case	37	None	replace
220	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COLON;  break;  [CE]  duplicate  case  label  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COLON;  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COLON;  break;	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case    JsonWriteContext.STATUS_OK_AFTER_COMMA:    b    =    BYTE_COMMA;    break;    	non-compiled	[CE]  duplicate  case  label	37	None	replace
221	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SYNTHETIC)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SYNTHETIC)  {	  switch(status    &    JsonWriteContext.STATUS_OPTIONAL_SYNTHETIC)    {    	compilable	  [FE]  JsonGenerationException  	47	1	replace
222	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SYNTHETIC)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SYNTHETIC)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SYNTHETIC)  {	  switch(status    &    JsonWriteContext.STATUS_OPTIONAL_SYNTHETIC)    {    	compilable	  [FE]  JsonGenerationException  	47	1	replace
223	[BUG]  [BUGGY]  b  =  _cfgPrettyPrinter.asUTF8();  break;  [CE]  orphaned  case  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  _cfgPrettyPrinter.asUTF8();  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  _cfgPrettyPrinter.asUTF8();  break;	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
224	[BUG]  [BUGGY]  b  =  _cfgPrettyPrinter.writeUTF8(status);  break;  [CE]  orphaned  case  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  b  =  _cfgPrettyPrinter.writeUTF8(status);  break;  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  _cfgPrettyPrinter.writeUTF8(status);  break;	  b    =    _cfgPrettyPrinter.asUnquotedUTF8();    break;    	non-compiled	[CE]  orphaned  case	16	None	replace
225	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.type,  status)  {  [CE]  ')'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;      [BUGGY]  switch(_cfgPrettyPrinter.type,  status)  {  [BUGGY]      case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.type,  status)  {	  switch(_cfgPrettyPrinter,    status)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
