bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] break; [FE] AssertionError [CONTEXT]  byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { [BUGGY] break; [BUGGY] }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  }  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	136	136	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { [BUGGY] [BUGGY] break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  }  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	136	136	2	add	
3	[BUG] [BUGGY] throw new IllegalArgumentException("Length "+length+" must be at least 2"); [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ [BUGGY] throw new IllegalArgumentException("Length "+length+" must be at least 2"); [BUGGY] } if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ [BUGGY] [BUGGY] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	add	
5	[BUG] [BUGGY] throw new IllegalArgumentException(  exceptionMessage(buffer, offset, length, start, currentByte)); [FE] AssertionError [CONTEXT] trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ [BUGGY] throw new IllegalArgumentException(      exceptionMessage(buffer, offset, length, start, currentByte)); [BUGGY] exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	140	141	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ [BUGGY] [BUGGY] throw new IllegalArgumentException(      exceptionMessage(buffer, offset, length, start, currentByte)); exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	140	141	2	add	
7	[BUG] [BUGGY] String string = new String(buffer, offset, length); [FE] AssertionError [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) {        [BUGGY] String string = new String(buffer, offset, length); [BUGGY]  string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	245	245	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) {        [BUGGY] [BUGGY] String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	245	245	2	add	
9	[BUG] [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [FE] AssertionError [CONTEXT] final int length, int current, final byte currentByte) {        String string = new String(buffer, offset, length); [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed  final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	247	248	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final int length, int current, final byte currentByte) {        String string = new String(buffer, offset, length); [BUGGY] [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed  final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	247	248	2	add	
11	[BUG] [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [FE] AssertionError [CONTEXT]        String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	248	248	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]        String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed [BUGGY] [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	248	248	2	add	
13	[BUG] [BUGGY] return s; [FE] AssertionError [CONTEXT]       String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] return s; [BUGGY] } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	249	249	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]       String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] [BUGGY] return s; } [CLASS] TarUtils 1 [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	249	249	2	add	
15	[BUG] [BUGGY] longresult = 0; [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { [BUGGY] longresult = 0; [BUGGY] int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	102	102	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { [BUGGY] [BUGGY] longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	102	102	2	add	
17	[BUG] [BUGGY] int end = offset + length; [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; [BUGGY] int end = offset + length; [BUGGY] int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	103	103	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; [BUGGY] [BUGGY] int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	103	103	2	add	
19	[BUG] [BUGGY] int start = offset; [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; [BUGGY] int start = offset; [BUGGY]  if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }   [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	104	104	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; [BUGGY] [BUGGY] int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }   [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	104	104	2	add	
21	[BUG] [BUGGY] if (length < 2){ [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; [BUGGY] if (length < 2){ [BUGGY] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	106	106	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; [BUGGY] [BUGGY] if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	106	106	2	add	
23	[BUG] [BUGGY] if (buffer[start] == 0) { [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } [BUGGY] if (buffer[start] == 0) { [BUGGY] return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	110	110	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } [BUGGY] [BUGGY] if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	110	110	2	add	
25	[BUG] [BUGGY] while (start < end){ [FE] AssertionError [CONTEXT] if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  [BUGGY] while (start < end){ [BUGGY] if (buffer[start] == ' '){ start++; } else { break; } }     [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	115	115	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  [BUGGY] [BUGGY] while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } }     [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	115	115	2	add	
27	[BUG] [BUGGY] if (buffer[start] == ' '){ [FE] AssertionError [CONTEXT] if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ [BUGGY] if (buffer[start] == ' '){ [BUGGY] start++; } else { break; } }      [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	116	116	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ [BUGGY] [BUGGY] if (buffer[start] == ' '){ start++; } else { break; } }      [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	116	116	2	add	
29	[BUG] [BUGGY] start++; [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ [BUGGY] start++; [BUGGY] } else { break; } }     byte trailer = buffer[end - 1]; [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	117	117	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ [BUGGY] [BUGGY] start++; } else { break; } }     byte trailer = buffer[end - 1]; [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	117	117	2	add	
31	[BUG] [BUGGY] byte trailer = buffer[end - 1]; [FE] AssertionError [CONTEXT] start++; } else { break; } }     [BUGGY] byte trailer = buffer[end - 1]; [BUGGY] while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	127	127	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] start++; } else { break; } }     [BUGGY] [BUGGY] byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	127	127	2	add	
33	[BUG] [BUGGY] while (start < end && (trailer == 0 || trailer == ' ')) { [FE] AssertionError [CONTEXT] } else { break; } }     byte trailer = buffer[end - 1]; [BUGGY] while (start < end && (trailer == 0 || trailer == ' ')) { [BUGGY] end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	128	128	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } else { break; } }     byte trailer = buffer[end - 1]; [BUGGY] [BUGGY] while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	128	128	2	add	
35	[BUG] [BUGGY] end--; [FE] AssertionError [CONTEXT] break; } }     byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { [BUGGY] end--; [BUGGY] trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	129	129	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] break; } }     byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { [BUGGY] [BUGGY] end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	129	129	2	add	
37	[BUG] [BUGGY] trailer = buffer[end - 1]; [FE] AssertionError [CONTEXT] } }     byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; [BUGGY] trailer = buffer[end - 1]; [BUGGY] } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	130	130	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } }     byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; [BUGGY] [BUGGY] trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	130	130	2	add	
39	[BUG] [BUGGY] for ( ;start < end; start++) { [FE] AssertionError [CONTEXT]     byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } [BUGGY] for ( ;start < end; start++) { [BUGGY] final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	133	133	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]     byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } [BUGGY] [BUGGY] for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	133	133	2	add	
41	[BUG] [BUGGY] final byte currentByte = buffer[start]; [FE] AssertionError [CONTEXT]    byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { [BUGGY] final byte currentByte = buffer[start]; [BUGGY] if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	134	134	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]    byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { [BUGGY] [BUGGY] final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	134	134	2	add	
43	[BUG] [BUGGY] if (currentByte == 0) { [FE] AssertionError [CONTEXT]   byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; [BUGGY] if (currentByte == 0) { [BUGGY] break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	135	135	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; [BUGGY] [BUGGY] if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	135	135	2	add	
45	[BUG] [BUGGY] if (currentByte < '0' || currentByte > '7'){ [FE] AssertionError [CONTEXT] end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  [BUGGY] if (currentByte < '0' || currentByte > '7'){ [BUGGY] throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	139	139	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] end--; trailer = buffer[end - 1]; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  [BUGGY] [BUGGY] if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	139	139	2	add	
47	[BUG] [BUGGY] result = (result << 3) + (currentByte - '0'); // convert from ASCII // CheckStyle:MagicNumber ON } [FE] AssertionError [CONTEXT] for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } [BUGGY] result = (result << 3) + (currentByte - '0'); // convert from ASCII   // CheckStyle:MagicNumber ON    } [BUGGY]  } return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	143	145	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte == 0) { break; }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } [BUGGY] [BUGGY] result = (result << 3) + (currentByte - '0'); // convert from ASCII   // CheckStyle:MagicNumber ON    }  } return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	143	145	2	add	
49	[BUG] [BUGGY] return result; [FE] AssertionError [CONTEXT] }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } [BUGGY] return result; [BUGGY] } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	147	147	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } [BUGGY] [BUGGY] return result; } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	147	147	2	add	
51	[BUG] [BUGGY] return buffer[offset] == 1; [FE] AssertionError [CONTEXT] public static boolean parseBoolean(final byte[] buffer, final int offset) { [BUGGY] return buffer[offset] == 1; [BUGGY] } [CLASS] TarUtils 1 [METHOD] parseBoolean [RETURN_TYPE] boolean  final byte[] buffer final int offset [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	232	232	2	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean parseBoolean(final byte[] buffer, final int offset) { [BUGGY] [BUGGY] return buffer[offset] == 1; } [CLASS] TarUtils 1 [METHOD] parseBoolean [RETURN_TYPE] boolean  final byte[] buffer final int offset [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.4082482904638631	232	232	2	add	
53	[BUG] [BUGGY] return 0L; [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { [BUGGY] return 0L; [BUGGY] }  while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.35355339059327373	111	111	2	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } if (buffer[start] == 0) { [BUGGY] [BUGGY] return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } } [CLASS] TarUtils 1 [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.35355339059327373	111	111	2	add	
55	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static final int BYTE_MASK = 255; [CLASS] TarUtils 1  [VARIABLES] 	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.2886751345948129	40	40	2	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static final int BYTE_MASK = 255; [CLASS] TarUtils 1  [VARIABLES] 	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.2886751345948129	40	40	2	add	
57	[BUG] [BUGGY] static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() { [FE] AssertionError [CONTEXT] [BUGGY] static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() { [BUGGY] public boolean canEncode(String name) { return true; } public ByteBuffer encode(String name) { final int length = name.length(); byte[] buf = new byte[length];  for (int i = 0; i < length; ++i) { buf[i] = (byte) name.charAt(i); } [CLASS] TarUtils 1  [VARIABLES] 	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.2886751345948129	47	47	2	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() { public boolean canEncode(String name) { return true; } public ByteBuffer encode(String name) { final int length = name.length(); byte[] buf = new byte[length];  for (int i = 0; i < length; ++i) { buf[i] = (byte) name.charAt(i); } [CLASS] TarUtils 1  [VARIABLES] 	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.2886751345948129	47	47	2	add	
59	[BUG] [BUGGY] return ""; [FE] AssertionError [CONTEXT] for (; len > 0; len--) { if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } [BUGGY] return ""; [BUGGY] } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	303	303	2	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (; len > 0; len--) { if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } [BUGGY] [BUGGY] return ""; } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	303	303	2	add	
61	[BUG] [BUGGY] long storedSum = 0; [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { [BUGGY] long storedSum = 0; [BUGGY] long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	605	605	2	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { [BUGGY] [BUGGY] long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	605	605	2	add	
63	[BUG] [BUGGY] long unsignedSum = 0; [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; [BUGGY] long unsignedSum = 0; [BUGGY] long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	606	606	2	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; [BUGGY] [BUGGY] long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	606	606	2	add	
65	[BUG] [BUGGY] long signedSum = 0; [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; [BUGGY] long signedSum = 0; [BUGGY]  int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	607	607	2	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; [BUGGY] [BUGGY] long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	607	607	2	add	
67	[BUG] [BUGGY] int digits = 0; [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; [BUGGY] int digits = 0; [BUGGY] for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	609	609	2	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; [BUGGY] [BUGGY] int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	609	609	2	add	
69	[BUG] [BUGGY] for (int i = 0; i < header.length; i++) { [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; [BUGGY] for (int i = 0; i < header.length; i++) { [BUGGY] byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	610	610	2	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; [BUGGY] [BUGGY] for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	610	610	2	add	
71	[BUG] [BUGGY] byte b = header[i]; [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { [BUGGY] byte b = header[i]; [BUGGY] if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	611	611	2	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { [BUGGY] [BUGGY] byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	611	611	2	add	
73	[BUG] [BUGGY] if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; [BUGGY] if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { [BUGGY] if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	612	612	2	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; [BUGGY] [BUGGY] if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	612	612	2	add	
75	[BUG] [BUGGY] if ('0' <= b && b <= '7' && digits++ < 6) { [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { [BUGGY] if ('0' <= b && b <= '7' && digits++ < 6) { [BUGGY] storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; }  [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	613	613	2	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { [BUGGY] [BUGGY] if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; }  [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	613	613	2	add	
77	[BUG] [BUGGY] storedSum = storedSum * 8 + b - '0'; [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { [BUGGY] storedSum = storedSum * 8 + b - '0'; [BUGGY] } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	614	614	2	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { [BUGGY] [BUGGY] storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	614	614	2	add	
79	[BUG] [BUGGY] } else if (digits > 0) { [FE] AssertionError [CONTEXT] long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; [BUGGY] } else if (digits > 0) { [BUGGY] digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	615	615	2	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] long storedSum = 0; long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; [BUGGY] [BUGGY] } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	615	615	2	add	
81	[BUG] [BUGGY] digits = 6; // only look at the first octal digit sequence } [FE] AssertionError [CONTEXT] long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { [BUGGY] digits = 6; // only look at the first octal digit sequence    } [BUGGY] } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	616	617	2	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] long unsignedSum = 0; long signedSum = 0; int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { [BUGGY] [BUGGY] digits = 6; // only look at the first octal digit sequence    } } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	616	617	2	add	
83	[BUG] [BUGGY] b = ' '; [FE] AssertionError [CONTEXT] int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } [BUGGY] b = ' '; [BUGGY] } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	618	618	2	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } [BUGGY] [BUGGY] b = ' '; } unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	618	618	2	add	
85	[BUG] [BUGGY] unsignedSum += 0xff & b; [FE] AssertionError [CONTEXT] for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } [BUGGY] unsignedSum += 0xff & b; [BUGGY] signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	620	620	2	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } [BUGGY] [BUGGY] unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	620	620	2	add	
87	[BUG] [BUGGY] signedSum += b; [FE] AssertionError [CONTEXT] byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; [BUGGY] signedSum += b; [BUGGY] } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	621	621	2	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] byte b = header[i]; if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; [BUGGY] [BUGGY] signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	621	621	2	add	
89	[BUG] [BUGGY] return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 } [FE] AssertionError [CONTEXT] storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } [BUGGY] return storedSum == unsignedSum || storedSum == signedSum    || storedSum > unsignedSum; // COMPRESS-177  } [BUGGY] || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	624	626	2	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' '; } unsignedSum += 0xff & b; signedSum += b; } [BUGGY] [BUGGY] return storedSum == unsignedSum || storedSum == signedSum    || storedSum > unsignedSum; // COMPRESS-177  } || storedSum > unsignedSum; // COMPRESS-177 } [CLASS] TarUtils 1 [METHOD] verifyCheckSum [RETURN_TYPE] boolean  byte[] header [VARIABLES] byte[] header boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK bits current digits end i idx len length limit off offset remaining start long signedSum storedSum unsignedSum byte b  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.25	624	626	2	add	
91	[BUG] [BUGGY] return parseOctal(buffer, offset, length); [FE] AssertionError [CONTEXT] public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { if ((buffer[offset] & 0x80) == 0) { [BUGGY] return parseOctal(buffer, offset, length); [BUGGY] } final boolean negative = buffer[offset] == (byte) 0xff; if (length < 9) { return parseBinaryLong(buffer, offset, length, negative); } return parseBinaryBigInteger(buffer, offset, length, negative); } [CLASS] TarUtils 1 [METHOD] parseOctalOrBinary [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean negative ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.23570226039551587	171	171	2	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { if ((buffer[offset] & 0x80) == 0) { [BUGGY] [BUGGY] return parseOctal(buffer, offset, length); } final boolean negative = buffer[offset] == (byte) 0xff; if (length < 9) { return parseBinaryLong(buffer, offset, length, negative); } return parseBinaryBigInteger(buffer, offset, length, negative); } [CLASS] TarUtils 1 [METHOD] parseOctalOrBinary [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean negative ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK end i length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.23570226039551587	171	171	2	add	
93	[BUG] [BUGGY] return parseName(buffer, offset, length, DEFAULT_ENCODING); [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { try { [BUGGY] return parseName(buffer, offset, length, DEFAULT_ENCODING); [BUGGY] } catch (IOException ex) { try { return parseName(buffer, offset, length, FALLBACK_ENCODING); } catch (IOException ex2) {  throw new RuntimeException(ex2); } } } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer IOException ex ex2 boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.23570226039551587	264	264	2	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { try { [BUGGY] [BUGGY] return parseName(buffer, offset, length, DEFAULT_ENCODING); } catch (IOException ex) { try { return parseName(buffer, offset, length, FALLBACK_ENCODING); } catch (IOException ex2) {  throw new RuntimeException(ex2); } } } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer IOException ex ex2 boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING int BYTE_MASK current end i length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.23570226039551587	264	264	2	add	
95	[BUG] [BUGGY] int len = length; [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { [BUGGY] int len = length; [BUGGY] for (; len > 0; len--) { if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.22360679774997896	292	292	2	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { [BUGGY] [BUGGY] int len = length; for (; len > 0; len--) { if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.22360679774997896	292	292	2	add	
97	[BUG] [BUGGY] for (; len > 0; len--) { [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { int len = length; [BUGGY] for (; len > 0; len--) { [BUGGY] if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } return ""; [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.22360679774997896	293	293	2	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { int len = length; [BUGGY] [BUGGY] for (; len > 0; len--) { if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } return ""; [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.22360679774997896	293	293	2	add	
99	[BUG] [BUGGY] if (buffer[offset + len - 1] != 0) { [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { int len = length; for (; len > 0; len--) { [BUGGY] if (buffer[offset + len - 1] != 0) { [BUGGY] break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } return ""; } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.22360679774997896	294	294	2	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { int len = length; for (; len > 0; len--) { [BUGGY] [BUGGY] if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); } return ""; } [CLASS] TarUtils 1 [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length ZipEncoding encoding [VARIABLES] byte[] b buffer boolean ZipEncoding DEFAULT_ENCODING FALLBACK_ENCODING encoding int BYTE_MASK current end i len length offset start  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.22360679774997896	294	294	2	add	
