bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  offset);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. "  +  length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. "  +  length);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2: ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2: ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
8	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
10	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  end);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  end);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   "  +  length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   "  +  length);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
15	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
17	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2   ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2   ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  buffer.length);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    buffer.length);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
19	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  buffer.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    buffer.length);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  offset  +  length);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    buffer.length);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  of ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  of ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    of   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  of ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  of ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    of   ");    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of "  +  offset);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of "  +  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of "  +  offset);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    of   ");    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);  return  0L;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  return  0L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  return  0L;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
27	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  return  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  return  0;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  return  0;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
29	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  return  0L;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);  return  0L;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  return  0L;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  return  0L;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  0L;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
34	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  return  0L;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  return  0L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  end);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  end);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
41	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  end);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  end,  length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  end,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
43	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  0,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
44	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length,  2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  length,  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  length,  2);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
45	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  length,  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  length,  buffer.length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
46	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  offset,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  offset,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
47	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2: ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2: ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2: ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  >  2   ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  >  2   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  >  2   ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
56	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  [Delete]  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	[Delete]	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
57	[BUG]  [BUGGY]  allowNonLocalFunction( "Octal "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNonLocalFunction( "Octal "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNonLocalFunction( "Octal "))  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
58	[BUG]  [BUGGY]  allowNonLocalFunction(length,  end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNonLocalFunction(length,  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNonLocalFunction(length,  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
59	[BUG]  [BUGGY]  allowNonLocalSideEffects(end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNonLocalSideEffects(end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNonLocalSideEffects(end)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
60	[BUG]  [BUGGY]  allowNonLocalSideEffects(length,  end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNonLocalSideEffects(length,  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNonLocalSideEffects(length,  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
61	[BUG]  [BUGGY]  allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNonLocalFunction(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
62	[BUG]  [BUGGY]  allowNonLocalSide(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNonLocalSide(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNonLocalSide(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2: ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2: ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2: "  +  length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2: "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2: "  +  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
67	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length: "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length: "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length: "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length: "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  start);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  start);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
70	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ",  end);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  length,  end);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  length,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  length,  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  end);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  buffer,  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  this.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  this.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  this.length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
75	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  start);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ",  start);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2   ",  end);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2   ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2   ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  this.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  this.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  this.length);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
79	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ",  end);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
80	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  this.length,  end);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  this.length,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  this.length,  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  At  least  2  hours. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  At  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  At  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
83	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
84	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  offset  does  not  exist. ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  offset  does  not  exist. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  offset  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
85	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  offset  is  less  than  2  hours. ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  offset  is  less  than  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  offset  is  less  than  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
86	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2: ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2: ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
90	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
91	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
93	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "]  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "]  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "]  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
95	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
96	[BUG]  [BUGGY]  Parchet.getInstance().parseOctal(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.getInstance().parseOctal(buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.getInstance().parseOctal(buffer,  start,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
97	[BUG]  [BUGGY]  Parchet.getInstance().parseStandardOctal(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.getInstance().parseStandardOctal(buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.getInstance().parseStandardOctal(buffer,  start,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
98	[BUG]  [BUGGY]  Parchet.getInstance().parse(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.getInstance().parse(buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.getInstance().parse(buffer,  start,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
99	[BUG]  [BUGGY]  Parchet.getInstance().parseOctal(buffer,  start  +  offset,  length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.getInstance().parseOctal(buffer,  start  +  offset,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.getInstance().parseOctal(buffer,  start  +  offset,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
100	[BUG]  [BUGGY]  Parchet.getInstance().parseStandardOctal(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.getInstance().parseStandardOctal(buffer,  offset,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.getInstance().parseStandardOctal(buffer,  offset,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
101	[BUG]  [BUGGY]  Parchet.getInstance().parseOctal(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.getInstance().parseOctal(buffer,  offset,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.getInstance().parseOctal(buffer,  offset,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
103	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
104	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.0 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.0 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.5 ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.5 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.5 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2   ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2   ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2: ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2: ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
110	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
111	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
112	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.n ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.n ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.n ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
113	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
114	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
115	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(end  <  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(end  <  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(end  <  length)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
116	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  end,  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  2);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  2);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
124	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2: ");  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2: ");	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
125	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
126	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  hours. ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
127	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2: "  +  length);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2: "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2: "  +  length);	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
134	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length,  end);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  length,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
135	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
136	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
137	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
138	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
139	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
140	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2. ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
141	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  more. ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  more. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  more. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
142	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
143	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  of ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  of ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  of ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
144	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  characters. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  characters. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  characters. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
145	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  hours. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
146	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  end);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
147	[BUG]  [BUGGY]  return  parseOctal(buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  start,  length);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
148	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  2);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  length,  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  length,  2);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
149	[BUG]  [BUGGY]  return  parseOctal(buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  end,  length);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
150	[BUG]  [BUGGY]  return  parseOctal(buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  0,  length);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
151	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  length  -  start);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
152	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  length,  buffer.length);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
153	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
154	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
155	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
156	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  end);  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  end);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. "  +  length);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. "  +  length);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
158	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
159	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  offset);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  offset);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2    or    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
160	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
161	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ ",  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ ",  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ ",  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
163	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
164	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
165	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
166	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
167	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
168	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length:   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length:   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length:   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
169	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length:  length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length:  length   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length:  length   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
170	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length:  length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length:  length   "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length:  length   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
171	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
172	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSortedException( " ");  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsSortedException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsSortedException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
173	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
174	[BUG]  [BUGGY]  aughtInvalidArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtInvalidArgumentException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtInvalidArgumentException( " ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
175	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSurrogate( "msg.octal.length ");  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsSurrogate( "msg.octal.length ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsSurrogate( "msg.octal.length ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
176	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSurrogate( "parseOctal ");  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsSurrogate( "parseOctal ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsSurrogate( "parseOctal ");	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
177	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
178	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  more. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  more. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  more. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
179	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  of ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  of ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
180	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
181	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  end);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
182	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  length,  2);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
183	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  length,  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  length,  buffer.length);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
184	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  0,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  0,  length);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
185	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
186	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ",  end);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
188	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "End  ' "+length+ "'  must  be  >  2  or  1 ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "End  ' "+length+ "'  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "End  ' "+length+ "'  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
189	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
190	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
191	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  more. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  more. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  more. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
192	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  less  than  2. ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
193	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2: ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2: ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
194	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  characters. ");  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  characters. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  characters. ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
195	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.0 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.0 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
196	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  3.0 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  3.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  3.0 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
197	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
198	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.xml. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.xml. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.xml. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
199	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  offset);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 "  +  offset);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    offset);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
200	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length,  end);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  length,  end);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  buffer.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  buffer.length);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
202	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ",  end,  length);  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ",  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ",  end,  length);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
203	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  end  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  end  +  1);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  end  +  1);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
204	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  0 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
205	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
206	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
207	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
209	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  hours. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
210	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
211	[BUG]  [BUGGY]  allowMissing(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowMissing(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowMissing(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
212	[BUG]  [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
213	[BUG]  [BUGGY]  allowNull(buffer,  start,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNull(buffer,  start,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNull(buffer,  start,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
214	[BUG]  [BUGGY]  allowNull(buffer,  start  +  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNull(buffer,  start  +  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNull(buffer,  start  +  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
215	[BUG]  [BUGGY]  allowNull(buffer,  start  +  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNull(buffer,  start  +  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNull(buffer,  start  +  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
216	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
219	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
220	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  2;  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  2;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  2;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
222	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
223	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
224	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
225	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
227	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
228	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2  hours. ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
230	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  return  0L;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
231	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
232	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2: ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2: ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
233	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2.0 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
234	[BUG]  [BUGGY]  if(length  <  2)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  2)  {  return  0;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  2)  {  return  0;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
235	[BUG]  [BUGGY]  if(length  <  =  2)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  =  2)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  =  2)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
236	[BUG]  [BUGGY]  if(length  <  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  0)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  0)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
237	[BUG]  [BUGGY]  if(end  <  2)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(end  <  2)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(end  <  2)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
238	[BUG]  [BUGGY]  if(length  <  1)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  1)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  1)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
239	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.handleMissingException( " ");	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
240	[BUG]  [BUGGY]  if(length  <  1)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  1)  {  return  0;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  1)  {  return  0;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
241	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatementsException( " ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsStatementsException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsStatementsException( " ");	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
242	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
243	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnsupportedOperationException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwUnsupportedOperationException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwUnsupportedOperationException( " ");	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
244	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatement();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtExceptionHandler.throwAsStatement();  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtExceptionHandler.throwAsStatement();	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
245	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
246	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
247	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  more. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  more. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  more. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
248	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  hours. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
249	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
250	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ",  end);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
251	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
252	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  1 ");  [CE]  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    1   ");    	non-compiled	[CE]  	63	None	replace
253	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1. ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    1   ");    	non-compiled	[CE]  	63	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
255	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.5 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.5 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.5 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
256	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.0 ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.0 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  	24	None	replace
257	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.xml ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.xml ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.xml ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  	64	None	replace
258	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.0 ");  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.0 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  	64	None	replace
259	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.5 ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.5 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.5 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  	64	None	replace
260	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
261	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ",  end);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
262	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2. ");  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2    or    2   ");    	non-compiled	[CE]  	11	None	replace
263	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 "  +  length);  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2       "    +    length);    	non-compiled	[CE]  	4	None	replace
264	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. "  +  length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours. "  +  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2       "    +    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
265	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. "  +  length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. "  +  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2       "    +    length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
266	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
267	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2: ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2: ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
268	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  two. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  two. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  two. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
269	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
270	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
271	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  and  can't  parseOctal. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  and  can't  parseOctal. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  and  can't  parseOctal. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
272	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  and  can  not  parseOctal. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  and  can  not  parseOctal. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  and  can  not  parseOctal. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
273	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2: ");  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2: ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
274	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  return  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  return  0;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  return  0;	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
276	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  end,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
277	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
278	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  2);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  +  2);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
279	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
280	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2. ");  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2    or    2   ");    	non-compiled	[CE]  >  expected	41	None	replace
281	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  2 ");  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2    or    2   ");    	non-compiled	[CE]  	41	None	replace
282	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2    or    2   ");    	non-compiled	[CE]  	41	None	replace
283	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  2 ");  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  	37	None	replace
284	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "  must  be  at  least  2  or  2 ");  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  >  expected	37	None	replace
285	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 "  +  length);  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2  or  2 "  +  length);	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  >  expected	37	None	replace
286	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.n ");  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.n ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.n ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  >  expected	64	None	replace
287	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3.0 ");  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3.0 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3.0 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  >  expected	64	None	replace
288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.xml. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.xml. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.xml. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
289	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 "  +  length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
290	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 "  +  buffer.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 "  +  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
291	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.x ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.x ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.x ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
292	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
293	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwable  t  =  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
294	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2  hours. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
295	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    end);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
296	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0;	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
297	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0L  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0L  +  1;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);  return  0L  +  1;	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
298	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset);  return  0L;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  end,  offset);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    end,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
299	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
300	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
301	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  1 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  less  than  2  or  1 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
302	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0. ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
303	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  start);  [CE]  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  length  -  start);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  	34	None	replace
304	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  1);  [CE]  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  length  -  1);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  length  -  1);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  	34	None	replace
305	[BUG]  [BUGGY]  Parchet.checkState(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.checkState(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.checkState(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
306	[BUG]  [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
307	[BUG]  [BUGGY]  ParchetState.checkState(length  <  =  0);  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(length  <  =  0);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(length  <  =  0);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
308	[BUG]  [BUGGY]  ParchetState.checkNotNull(buffer);  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkNotNull(buffer);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkNotNull(buffer);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
309	[BUG]  [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(length  <  2)  {  throw  new  IllegalArgumentException( ". ");  }	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
310	[BUG]  [BUGGY]  Parchet.checkState(length  <  2)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.checkState(length  <  2)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.checkState(length  <  2)  {  throw  new  IllegalArgumentException( ". ");  }	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
311	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of "  +  buffer);  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of "  +  buffer);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of "  +  buffer);	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    of   ");    	non-compiled	[CE]  	10	None	replace
312	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ",  end);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
313	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ",  end);  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours. ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  	20	None	replace
314	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ",  start);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ",  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2. ",  start);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  offset,  end);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  offset,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  offset,  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ",  end);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  or  2. ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
317	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  	68	None	replace
318	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  return  0L;  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  	68	None	replace
319	[BUG]  [BUGGY]  if(length  <  =  0)  {  return  0L;  }  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  =  0)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  =  0)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  	31	None	replace
320	[BUG]  [BUGGY]  if(end  <  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(end  <  0)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(end  <  0)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
321	[BUG]  [BUGGY]  parent.parseOctal(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  parent.parseOctal(buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	parent.parseOctal(buffer,  start,  length);	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
322	[BUG]  [BUGGY]  parent.parse(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  parent.parse(buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	parent.parse(buffer,  start,  length);	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
323	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
324	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
325	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  return  0L;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  end,  start);  return  0L;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
326	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1   ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1   ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
327	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
328	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  1 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  1 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
329	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  hours. ",  end);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  hours. ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  hours. ",  end);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
330	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  start);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  start);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
331	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ",  offset);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
332	[BUG]  [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(length  <  2)  {  throw  new  IllegalStateException( " ");  }	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
333	[BUG]  [BUGGY]  ParchetState.checkState(end  <  =  -1)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(end  <  =  -1)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(end  <  =  -1)  {  throw  new  IllegalStateException( " ");  }	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
334	[BUG]  [BUGGY]  ParchetState.checkState(length  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(length  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(length  <  =  0)  {  throw  new  IllegalStateException( " ");  }	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
335	[BUG]  [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalStateException( " ".trim());  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  ParchetState.checkState(length  <  2)  {  throw  new  IllegalStateException( " ".trim());  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	ParchetState.checkState(length  <  2)  {  throw  new  IllegalStateException( " ".trim());  }	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  buffer.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  buffer.length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 "  +  buffer.length);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   "    +    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
337	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2  or  2 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  less  than  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
338	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
339	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  hours. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
340	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  3rd ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  3rd ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  at  least  2  or  3rd ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
341	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  2);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
342	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  offset);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  offset);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
343	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
344	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
345	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires  error: ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires  error: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires  error: ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
346	[BUG]  [BUGGY]  Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.checkState(length  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
347	[BUG]  [BUGGY]  Parchet.checkState(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.checkState(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.checkState(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
348	[BUG]  [BUGGY]  allowNegate(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNegate(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNegate(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
349	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(length);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).initCause(length);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
350	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " "));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " "));  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " "));	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
351	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(result);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(result);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).initCause(result);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
353	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
354	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  less  than  2 ");  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  	59	None	replace
355	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  at  least  2  hours. ");  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:   "+length+ "  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "length:       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  	59	None	replace
356	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  1 ");  [CE]  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  	54	None	replace
357	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  3 ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  	54	None	replace
358	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwable  t  =  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  	15	None	replace
359	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ",  start);  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ",  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  1 ",  start);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  	15	None	replace
360	[BUG]  [BUGGY]  Parchet.checkState(end  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.checkState(end  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.checkState(end  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
361	[BUG]  [BUGGY]  Parchet.checkState(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Parchet.checkState(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Parchet.checkState(end  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
362	[BUG]  [BUGGY]  allowNegate(end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNegate(end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNegate(end)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
363	[BUG]  [BUGGY]  allowNegate(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  allowNegate(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	allowNegate(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
364	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(end);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).initCause(end);	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
365	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
366	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
367	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length[ "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length[ "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length[ "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
368	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length= "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length= "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length= "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
369	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length:  length[ "+length+ "]  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length:  length[ "+length+ "]  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length:  length[ "+length+ "]  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length:    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
370	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  offset  does  not  exist. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  offset  does  not  exist. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  offset  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
371	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  does  not  exist. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  does  not  exist. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
372	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  is  less  than  1. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  is  less  than  1. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  is  less  than  1. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
373	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  is  less  than  2  hours. ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  is  less  than  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Please  check  that  the  end  of  the  buffer  is  less  than  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
374	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  1 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
375	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  more ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  more ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  more ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
376	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
377	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2.   ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2.   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  >  2.   ");	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
378	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  offset);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  offset);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  offset);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
379	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ",  end);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
380	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2  or  more. ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2  or  more. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2  or  more. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
381	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2  or  more ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2  or  more ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  less  than  2  or  more ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
382	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
383	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2  and  can  not  parse   ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2  and  can  not  parse   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2  and  can  not  parse   ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
384	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  start);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  length  -  start);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
385	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  start);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  start);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
386	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  length  +  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  length  +  2);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
387	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2  or  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
388	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2  or  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
389	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.x ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.x ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2.x ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
390	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length[ "+length+ "]  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
391	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Please  check  that  the  offset  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Please  check  that  the  offset  does  not  exist. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Please  check  that  the  offset  does  not  exist. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
392	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "' "+length+ "'  must  be  at  least  2  hours. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "' "+length+ "'  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "' "+length+ "'  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
393	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  2)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  2)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  2)  {  return  0L;  }	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
394	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  =  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  =  0)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  If(length  <  =  0)  {  return  0L;  }	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
395	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  1 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
396	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "]  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "]  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "]  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
397	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1);  [CE]  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  length  -  1);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  	52	None	replace
398	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  start);  [CE]  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  start);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  	52	None	replace
399	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
400	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  +  2);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  +  2);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  length  +  2);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
401	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  return  0L;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    end);    return    0L;    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
402	[BUG]  [BUGGY]  aught(IllegalArgumentException.class))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(IllegalArgumentException.class))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(IllegalArgumentException.class))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
403	[BUG]  [BUGGY]  aught(IllegalArgumentException.class,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(IllegalArgumentException.class,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(IllegalArgumentException.class,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
404	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")));  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")));	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
405	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(null);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(null);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).initCause(null);	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
406	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ ",  end  must  be  >  2  or  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ ",  end  must  be  >  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ ",  end  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
407	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ",  end);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ",  end);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ ",  end  must  be  >  2  or  1 ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ ",  end  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ ",  end  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
409	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    1   ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
410	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).return  0L;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).return  0L;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).return  0L;	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
411	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).return  0;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).return  0;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).return  0;	  if(length    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
412	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2.0. ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2.0. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2.0. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
413	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2.   ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2.   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2.   ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
414	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ". "));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ". "));  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ". "));	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
415	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
416	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
417	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2nd. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2nd. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2nd. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
418	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ". "));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ". "));  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ". "));	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
419	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  end  must  be  >  2 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  end  must  be  >  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  end  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
421	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
422	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
423	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2  or  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2  or  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
424	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
425	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  3 ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2  or  3 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
426	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2 ",  end);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  >  2 ",  end);	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
427	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  length   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  length   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  length   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
428	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  length:   "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  length:   "+length+ "  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  length:   "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
429	[BUG]  [BUGGY]  if(length  <  =  1)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  if(length  <  =  1)  {  return  0L;  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	if(length  <  =  1)  {  return  0L;  }	  if(length    <    2)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
430	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  less  than  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
431	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2: ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
432	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  2,  length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  2,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  2,  length);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
433	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  start,  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  start,  2);	  result    =    parseOctal(buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
434	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length  [ "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
435	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2 ",  end);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2 ",  end);	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
436	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  2);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
437	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Restricted: ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Restricted: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Restricted: ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
438	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires: ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
439	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires  an  error: ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires  an  error: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2.  Requires  an  error: ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2.   ");    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
440	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte[ "+length+ "]  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Byte[ "+length+ "]  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Byte[ "+length+ "]  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "length[   "+length+   "]    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
441	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
442	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2 ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  	17	None	replace
443	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length: "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of  length: "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  of  length: "+length+ "  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
444	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2nd. ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2nd. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2nd. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  	23	None	replace
445	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  end  must  be  less  than  2 ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  end  must  be  less  than  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  end  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  	55	None	replace
446	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ",  end);  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  	55	None	replace
447	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.  Requires: ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.  Requires: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2.  Requires: ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2    or    2.   ");    	non-compiled	[CE]  	64	None	replace
448	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ").toString()))  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	70	None	replace
449	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
450	[BUG]  [BUGGY]  aught(false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(false)  {  throw  new  IllegalArgumentException( " ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
451	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  [ "+length+ "  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    [   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
452	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ",  end);  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
453	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Try  again. ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Try  again. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Try  again. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  	25	None	replace
454	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Should  be  done. ");  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Should  be  done. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  hours.  Should  be  done. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  	25	None	replace
455	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2nd. ");  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2nd. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length  ' "+length+ "'  must  be  at  least  2nd. ");	  throw    new    IllegalArgumentException(   "length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  	40	None	replace
456	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
457	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  end);  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 "  +  end);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   "    +    length);    	non-compiled	[CE]  	65	None	replace
458	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  end  +  1);  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  end  +  1);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  end  +  1);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  	26	None	replace
459	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  length);  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ",  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ",    end);    	non-compiled	[CE]  	26	None	replace
460	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  1);  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  length  -  1);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  length  -  1);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  	30	None	replace
461	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  2);  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  result  =  parseOctal(buffer,  offset,  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	result  =  parseOctal(buffer,  offset,  2);	  result    =    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  	30	None	replace
462	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  must  be  at  least  2  or  2 ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ ",  must  be  at  least  2  or  2 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of "+length+ ",  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  	3	None	replace
463	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  3 ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  	14	None	replace
464	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  4 ");  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  4 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  2  or  4 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    2   ");    	non-compiled	[CE]  	14	None	replace
465	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2   ");  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2   ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2   ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2    or    2   ");    	non-compiled	[CE]  	41	None	replace
466	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  3 ");  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  less  than  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    less    than    2    or    2   ");    	non-compiled	[CE]  	41	None	replace
467	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2  hours. ");  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2  hours. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ ",  must  be  at  least  2  hours. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  	21	None	replace
468	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Try  again. ");  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Try  again. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Try  again. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  	21	None	replace
469	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Should  be  in  the  range  [ "+offset+ "]. ");  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Should  be  in  the  range  [ "+offset+ "]. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2  hours.  Should  be  in  the  range  [ "+offset+ "]. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2    hours.   ");    	non-compiled	[CE]  	21	None	replace
470	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  end);  [CE]  [FE]            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  end);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  	45	None	replace
471	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  length);  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ",  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    less    than    2   ");    	non-compiled	[CE]  	45	None	replace
472	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. "  +  length);  [CE]  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. "  +  length);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2       "    +    length);    	non-compiled	[CE]  	4	None	replace
473	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Example: ");  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Example: ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Example: ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  	56	None	replace
474	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Resolved. ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Resolved. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Resolved. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  	56	None	replace
475	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Relatively. ");  [CE]  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Relatively. ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  less  than  2.  Relatively. ");	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    less    than    2.   ");    	non-compiled	[CE]  	56	None	replace
476	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0;  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  	50	None	replace
477	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0L  +  length;  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0L  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  return  0L  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    end);    return    0L;    	non-compiled	[CE]  	50	None	replace
478	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [CE]  [FE]                AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  end);	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  	8	None	replace
479	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [CE]  [FE]                  AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  3 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  	8	None	replace
480	[BUG]  [BUGGY]  aughtInvalidByteException( " ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtInvalidByteException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtInvalidByteException( " ");	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
481	[BUG]  [BUGGY]  aughtInvalidOctalException( " ");  [CE]  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtInvalidOctalException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtInvalidOctalException( " ");	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
482	[BUG]  [BUGGY]  aughtInvalidByte(length,  buffer,  start,  length);  [CE]  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtInvalidByte(length,  buffer,  start,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtInvalidByte(length,  buffer,  start,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
483	[BUG]  [BUGGY]  aughtInvalidByte(length,  buffer,  0,  length);  [CE]  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtInvalidByte(length,  buffer,  0,  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtInvalidByte(length,  buffer,  0,  length);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
484	[BUG]  [BUGGY]  aughtInvalidByte(length,  buffer,  0,  start);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtInvalidByte(length,  buffer,  0,  start);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtInvalidByte(length,  buffer,  0,  start);	  if(length    <    2)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
485	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ",  end);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ",  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  0 ",  end);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
486	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  1,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  1,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  1,  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
487	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  length);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  length);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
488	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  length,  end);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  length,  end);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 "  +  length,  end);	  throw    new    IllegalArgumentException(   "Length    of    length       "+length+   "    must    be    at    least    2   ",    end);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
489	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
490	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start  +  length);  end  =  offset  +  length;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  0,  buffer,  start  +  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
491	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  return  parseOctal(buffer,  offset,  length  +  2);  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	return  parseOctal(buffer,  offset,  length  +  2);	  return    parseOctal(buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
492	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  result;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  result;  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  result;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0L;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
493	[BUG]  [BUGGY]  aughtException( " ");  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  aughtException( " ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	aughtException( " ");	  if(length    <    2)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
494	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1  or  1 ");  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1  or  1 ");  [BUGGY]      }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  >  1  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    >    2    or    1   ");    	non-compiled	[CE]  not  a  statement	15	None	replace
