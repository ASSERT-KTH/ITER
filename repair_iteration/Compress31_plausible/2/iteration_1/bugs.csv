bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]          AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "length   "+length+ "  must  be  at  least  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]    [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	  	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]    AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ");  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length  of  length   "+length+ "  must  be  at  least  2 ");	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  length);  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  length);  [BUGGY]  }  if  (buffer[start]  ==  0)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress31/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	107	107	2	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  length);	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
