bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	39	None	add
2	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	39	None	add
3	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    String  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	39	None	add
4	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  int  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  int  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    int  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	39	None	add
5	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	39	None	add
6	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  not  a  statement	39	None	add
7	[BUG]  [BUGGY]  return  labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&    LabelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
8	[BUG]  [BUGGY]  return  n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());	  return    n.hasChildren()    &&    LabelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  LabelName	90	None	replace
9	[BUG]  [BUGGY]  n  =  n.getFirstChild()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild()  &&  labelName.equals(n.getFirstChild().getString());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	125	None	replace
10	[BUG]  [BUGGY]  n  =  n.getLastChild()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getLastChild()  &&  labelName.equals(n.getFirstChild().getString());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	125	None	replace
11	[BUG]  [BUGGY]  n  =  n.getLastChild()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getLastChild()  ||  labelName.equals(n.getFirstChild().getString());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	125	None	replace
12	[BUG]  [BUGGY]  n  =  n.getFirstChild()  ||  labelName.equals(n.getLastChild().getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild()  ||  labelName.equals(n.getLastChild().getString());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	125	None	replace
13	[BUG]  [BUGGY]  n.removeChild(labelName,  label);  [CE]  cannot  find  symbol  label  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  label);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  label);	  n.removeChild(labelName,    labelName);    	non-compiled	[CE]  cannot  find  symbol  label	67	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	118	3	replace
15	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	118	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getType()  ==  Token.RETURN  ||  labelName.equals(n.getLastChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	118	2	replace
17	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getType()  ==  Token.RETURN  ||  labelName.equals(n.getLastChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	118	2	replace
18	[BUG]  [BUGGY]  return  labelName.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	118	3	replace
20	[BUG]  [BUGGY]  return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	118	3	replace
21	[BUG]  [BUGGY]  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    Return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	136	None	replace
22	[BUG]  [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    Return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
23	[BUG]  [BUGGY]  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    Return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	136	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	86	3	replace
25	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	86	3	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	80	3	replace
27	[BUG]  [BUGGY]  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	80	3	replace
28	[BUG]  [BUGGY]  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();	          labelName    =    n.getFirstChild().getString();    labelName    =    n.getfirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	95	None	replace
29	[BUG]  [BUGGY]  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getfirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getfirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  n.getFirstChild().getString();  labelName  =  n.getfirstChild().getString();	          labelName    =    n.getFirstChild().getString();    labelName    =    n.getfirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	95	None	replace
30	[BUG]  [BUGGY]  LabelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  n.getFirstChild().getString();	          labelName    =    n.getFirstChild().getString();    labelName    =    n.getfirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	95	None	replace
31	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString();  this.labelName  =  n.getfirstChild().getString();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString();  this.labelName  =  n.getfirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getString();  this.labelName  =  n.getfirstChild().getString();	          labelName    =    n.getFirstChild().getString();    labelName    =    n.getfirstChild().getString();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	95	None	replace
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	140	3	add
33	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	140	3	add
34	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  LabelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  [CE]  cannot  find  symbol  LabelName  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  LabelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    LabelName  =  n.getFirstChild().getString()  +   ":   "  +  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	140	None	add
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
36	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
38	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
39	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
40	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
41	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    int  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	70	None	add
42	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	70	None	add
43	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getNext();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getNext();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
44	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getNext();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getNext();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getNext();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
45	[BUG]  [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	77	None	replace
46	[BUG]  [BUGGY]  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	51	None	replace
47	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	51	None	replace
48	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	51	None	replace
49	[BUG]  [BUGGY]  n.removeChild(labelName);  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	51	None	replace
50	[BUG]  [BUGGY]  LabelName  labelName  =  type,  n.getFirstChild().getString();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  type,  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  type,  n.getFirstChild().getString();	  LabelName    labelName    =    n,    n.getFirstChild().getString();    	non-compiled	[CE]  ';'  expected	108	None	replace
51	[BUG]  [BUGGY]  return  labelName.equals(n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.equals(n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.equals(n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	89	None	replace
52	[BUG]  [BUGGY]  return  LabelName.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  LabelName.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  LabelName.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  LabelName	89	None	replace
53	[BUG]  [BUGGY]  Integer  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Integer  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Integer  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Integer    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	121	None	replace
54	[BUG]  [BUGGY]  int  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  int  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	int  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Integer    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	121	None	replace
55	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Node  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Integer    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	121	None	replace
56	[BUG]  [BUGGY]  Number  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Number  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Number  n  =  n.getFirstChild();	          n    =    n.getFirstChild();    Integer    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	121	None	replace
57	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	41	None	add
58	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	41	None	add
59	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  Return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  Return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    Return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  ';'  expected	41	None	add
60	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	41	None	add
61	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.getFirstChild().hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  LabelName	41	None	add
62	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getNext().getString());  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getNext().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getNext().getString());	  	non-compiled	[CE]  unreachable  statement	41	None	add
63	[BUG]  [BUGGY]  n.removeChild(labelName);  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
64	[BUG]  [BUGGY]  n.removeChild(labelName,  null);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  null);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  null);	  n.removeChild(labelName,    name);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getLastChild().getString();    labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	11	3	add
66	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getLastChild().getString();    labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	11	3	add
67	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString();  LabelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  LabelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getLastChild().getString();    LabelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	11	None	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getLastChild().getString();    labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	11	3	add
69	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getLastChild().getString();    labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	11	3	add
70	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString();  String  labelName  =  n.getLastChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  String  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getLastChild().getString();    String  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	11	None	add
71	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString();  LabelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString();  LabelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getLastChild().getString();    LabelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	11	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	137	3	replace
73	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	137	3	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
75	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
77	[BUG]  [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
79	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
80	[BUG]  [BUGGY]  return!labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
81	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(labelName.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(labelName.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(labelName.getFirstChild().getString());	  return!n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
82	[BUG]  [BUGGY]  return!n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());	  return!n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  LabelName	91	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	Preconditions.checkState(n.getType()  ==  Token.RETURN);	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	75	3	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Preconditions.checkState(n.getType()  ==  Token.RETURN);	          n    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	75	3	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
86	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
88	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
89	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getString()  + ": "  +  n.getLastChild();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getString()  + ": "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getString()  + ": "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
90	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
91	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
92	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.hasChildren()  &&  labelName.equals(n.getString());	  return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	6	3	replace
93	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getString());	  return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	6	3	replace
94	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	6	3	replace
95	[BUG]  [BUGGY]  return  labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	6	3	replace
96	[BUG]  [BUGGY]  return  n.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol  LabelName	129	None	replace
97	[BUG]  [BUGGY]  return  n.hasChildren()  &&  LabelName.equals(labelName.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  LabelName.equals(labelName.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  LabelName.equals(labelName.getLastChild().getString());	  return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
98	[BUG]  [BUGGY]  LabelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  n.getLastChild().getString();	          labelName    =    n.getFirstChild().getString();    LabelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	45	None	replace
99	[BUG]  [BUGGY]  LabelName  =  labelName.getFirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  labelName.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  labelName.getFirstChild().getString();	          labelName    =    n.getFirstChild().getString();    LabelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	45	None	replace
100	[BUG]  [BUGGY]  &&  labelName.equals(n.getString()  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString()  +  1);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString()  +  1);	  &&    labelName.equals(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
101	[BUG]  [BUGGY]  &&  labelName.equals(n.getString(),  type);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString(),  type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString(),  type);	  &&    labelName.equals(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
102	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	5	None	add
103	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	5	None	add
104	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  Return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  Return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    Return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  ';'  expected	5	None	add
105	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  LabelName	5	None	add
106	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getNext().getString());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getNext().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getNext().getString());	  	non-compiled	[CE]  unreachable  statement	5	None	add
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    labelName.equals(n.getFirstChild    	compilable	  [FE]  AssertionFailedError  	19	3	replace
108	[BUG]  [BUGGY]  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    labelName.equals(n.getFirstChild    	compilable	  [FE]  AssertionFailedError  	19	3	replace
109	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    labelName.equals(n.getFirstChild    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
110	[BUG]  [BUGGY]  n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    labelName.equals(n.getFirstChild    	non-compiled	[CE]  not  a  statement	19	None	replace
111	[BUG]  [BUGGY]  ||  labelName.equals(n.getLastChild().getString()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  ||  labelName.equals(n.getLastChild().getString()))  {  return  true;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	||  labelName.equals(n.getLastChild().getString()))  {  return  true;	  &&    labelName.equals(n.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	134	3	replace
113	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	134	3	replace
114	[BUG]  [BUGGY]  LabelName  l  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  l  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  l  =  n.getFirstChild().getString();	  labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
115	[BUG]  [BUGGY]  LabelName  labelName  =  type.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  type.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  type.getFirstChild().getString();	  LabelName    labelName    =    n,    type.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
116	[BUG]  [BUGGY]  LabelName  labelName  =  n,  type.getLastChild().getString();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  type.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  type.getLastChild().getString();	  LabelName    labelName    =    n,    type.getFirstChild().getString();    	non-compiled	[CE]  ';'  expected	4	None	replace
117	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	57	None	add
118	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	57	None	add
119	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  Return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  Return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    Return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  ';'  expected	57	None	add
120	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	57	None	add
121	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    String  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	57	None	add
122	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getfirstChild().getString());  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getfirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&!labelName.equals(n.getfirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	57	None	add
123	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild().getQualifiedName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild().getQualifiedName());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild().getQualifiedName());	  &&    labelName.equals(n.getFirstChild().getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
124	[BUG]  [BUGGY]  &&  labelName.equals(n.getString().getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString().getQualifiedName());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString().getQualifiedName());	  &&    labelName.equals(n.getFirstChild().getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
125	[BUG]  [BUGGY]  return  n.getChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
126	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n    =    n.getFirstChild().getLastChild();    n  =  n.getFirstChild().getLastChild();	  	compilable	  [FE]  RuntimeException  	119	3	add
127	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    n  =  n.getFirstChild().getLastChild();	  	compilable	  [FE]  RuntimeException  	119	3	add
128	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  int  n  =  n.getFirstChild().getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  int  n  =  n.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    int  n  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	119	None	add
129	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  Node  n  =  n.getFirstChild().getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  Node  n  =  n.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    Node  n  =  n.getFirstChild().getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	119	None	add
130	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getfirstChild().getLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getfirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    n  =  n.getfirstChild().getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	119	None	add
131	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    n  =  n.getFirstChild().getLastChild());	  	non-compiled	[CE]  ';'  expected	119	None	add
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n.getLastChild().getString();	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	compilable	  [FE]  RuntimeException  	81	3	replace
133	[BUG]  [BUGGY]  n.getLastChild().getString();  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getLastChild().getString();	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	compilable	  [FE]  RuntimeException  	81	3	replace
134	[BUG]  [BUGGY]  n.getType()  ==  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.EXPR_RESULT)  {	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	81	None	replace
135	[BUG]  [BUGGY]  n.getType()  ==  Token.RETURN)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.RETURN)  {  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.RETURN)  {	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	81	None	replace
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n.getFirstChild().getString();	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	compilable	  [FE]  RuntimeException  	81	3	replace
137	[BUG]  [BUGGY]  n.getFirstChild().getString();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getFirstChild().getString();	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	compilable	  [FE]  RuntimeException  	81	3	replace
138	[BUG]  [BUGGY]  n.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.EXPR_RESULT);	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	81	None	replace
139	[BUG]  [BUGGY]  Label  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Label  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Label  labelName  =  n.getFirstChild().getString();	          labelName    =    n.getFirstChild().getString();    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
140	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
141	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
142	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    LabelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	43	None	add
143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
144	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
145	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  String  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  String  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    String  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	43	None	add
146	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    LabelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	43	None	add
147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getNext().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getNext().getString();  labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
148	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getNext().getString();  labelName  =  n.getFirstChild().getString();  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getNext().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getNext().getString();  labelName  =  n.getFirstChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
149	[BUG]  [BUGGY]  &&  LabelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  LabelName.equals(n.getLastChild().getString());	  &&    LabelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
150	[BUG]  [BUGGY]  &&  LabelName.equals(labelName.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  LabelName.equals(labelName.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  LabelName.equals(labelName.getFirstChild().getString());	  &&    LabelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
151	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	60	3	replace
152	[BUG]  [BUGGY]  return  labelName.equals(n.getLastChild().getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	60	3	replace
153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getLastChild().setString(labelName);  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n.getLastChild().setString(labelName);	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    String    labelName    =    n.getLastChild().getString();    	compilable	  [FE]  RuntimeException  	88	3	replace
154	[BUG]  [BUGGY]  n.getLastChild().setString(labelName);  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getLastChild().setString(labelName);  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getLastChild().setString(labelName);	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    String    labelName    =    n.getLastChild().getString();    	compilable	  [FE]  RuntimeException  	88	3	replace
155	[BUG]  [BUGGY]  n  =  n.getLastChild().getString();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getLastChild().getString();	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    String    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  incompatible  types	88	None	replace
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getFirstChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getFirstChild().getString()    +    1;    labelName  =  n.getFirstChild().getString()  +  1;	  	compilable	  [FE]  RuntimeException  	13	3	add
157	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getFirstChild().getString()  +  1;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getFirstChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +    1;    labelName  =  n.getFirstChild().getString()  +  1;	  	compilable	  [FE]  RuntimeException  	13	3	add
158	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  LabelName  =  n.getFirstChild().getString()  +  1;  [CE]  cannot  find  symbol  LabelName  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  LabelName  =  n.getFirstChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +    1;    LabelName  =  n.getFirstChild().getString()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  LabelName	13	None	add
159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getLastChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getFirstChild().getString()    +    1;    labelName  =  n.getLastChild().getString()  +  1;	  	compilable	  [FE]  RuntimeException  	13	3	add
160	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getLastChild().getString()  +  1;  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getLastChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +    1;    labelName  =  n.getLastChild().getString()  +  1;	  	compilable	  [FE]  RuntimeException  	13	3	add
161	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  String  labelName  =  n.getFirstChild().getString()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  String  labelName  =  n.getFirstChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +    1;    String  labelName  =  n.getFirstChild().getString()  +  1;	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	13	None	add
162	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getfirstChild().getString()  +  1;  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  labelName  =  n.getfirstChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +    1;    labelName  =  n.getfirstChild().getString()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
163	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  nameName  =  n.getFirstChild().getString()  +  1;  [CE]  cannot  find  symbol  nameName  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  +  1;  nameName  =  n.getFirstChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getString()    +    1;    nameName  =  n.getFirstChild().getString()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  nameName	13	None	add
164	[BUG]  [BUGGY]  n.removeChild(labelName,  type,  labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  type,  labelName);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  type,  labelName);	  n.removeChild(labelName,    type);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
165	[BUG]  [BUGGY]  n.removeChild(labelName,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  n);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  n);	  n.removeChild(labelName,    type);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
166	[BUG]  [BUGGY]  n.removeChild(labelName,  n,  type);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  n,  type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  n,  type);	  n.removeChild(labelName,    type);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
167	[BUG]  [BUGGY]  n.removeChild(labelName,  labelName,  type);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  labelName,  type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  labelName,  type);	  n.removeChild(labelName,    type);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
168	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Node  n  =  n.getFirstChild();  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	73	None	replace
169	[BUG]  [BUGGY]  n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	82	None	replace
170	[BUG]  [BUGGY]  n.getFirstChild().getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getFirstChild().getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getFirstChild().getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	82	None	replace
171	[BUG]  [BUGGY]  n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	82	None	replace
172	[BUG]  [BUGGY]  n.removeChild(type);  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type);  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type);  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&!   "labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	147	None	replace
173	[BUG]  [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&! "labelName.equals(n.getFirstChild().getString());  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&! "labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  return  n.hasChildren()  &&! "labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&!   "labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  unclosed  string  literal	147	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	8	3	replace
175	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	8	3	replace
176	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getFirstChild().getString()))  {  return  false;	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
177	[BUG]  [BUGGY]  &&  labelName.equals(n.getString())||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString())||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString())||  labelName.equals(n.getFirstChild().getString()))  {  return  false;	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
178	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getFirstChild().getString()))  {  return  false;	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getFirstChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
179	[BUG]  [BUGGY]  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
180	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
181	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
182	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	18	None	replace
183	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getLastChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getLastChild().getString();	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	18	None	replace
184	[BUG]  [BUGGY]  n.getFirstChild().setString(labelName);  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getFirstChild().setString(labelName);  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getFirstChild().setString(labelName);  String  labelName  =  n.getFirstChild().getString();	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	18	None	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	101	3	replace
186	[BUG]  [BUGGY]  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	101	3	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	101	3	replace
188	[BUG]  [BUGGY]  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	101	3	replace
189	[BUG]  [BUGGY]  LabelName  labelName  =  n.getLastChild().getLabelName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getLastChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getLastChild().getLabelName();	  LabelName    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
190	[BUG]  [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getLabelName();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  type.getFirstChild().getLabelName();	  LabelName    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  ';'  expected	3	None	replace
191	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLabelName()  + ": ";  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLabelName()  + ": ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getLabelName()  + ": ";	  LabelName    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
192	[BUG]  [BUGGY]  LabelName  labelName  =  type.getFirstChild().getLabelName();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  type.getFirstChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  type.getFirstChild().getLabelName();	  LabelName    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
193	[BUG]  [BUGGY]  n.removeChild(labelName)||  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName)||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName)||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    type)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	non-compiled	[CE]  not  a  statement	55	None	replace
194	[BUG]  [BUGGY]  n.removeChild(labelName)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    type)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	non-compiled	[CE]  ';'  expected	55	None	replace
195	[BUG]  [BUGGY]  ||  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    type)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
196	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getLastChild()  +  1;	  LabelName    labelName    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
197	[BUG]  [BUGGY]  LabelName  labelName  =  type.getFirstChild().getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  type.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  type.getFirstChild().getLastChild();	  LabelName    labelName    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
198	[BUG]  [BUGGY]  LabelName  labelName  =  n.getLastChild().getFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getLastChild().getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getLastChild().getFirstChild();	  LabelName    labelName    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
199	[BUG]  [BUGGY]  n.removeChild(label);  [CE]  cannot  find  symbol  label  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(label);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(label);	  n.removeChild(type);    	non-compiled	[CE]  cannot  find  symbol  label	69	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n    	compilable	  [FE]  AssertionFailedError  	116	3	replace
201	[BUG]  [BUGGY]  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n    	compilable	  [FE]  AssertionFailedError  	116	3	replace
202	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
203	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n    	compilable	  [FE]  AssertionFailedError  	116	3	replace
205	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n    	compilable	  [FE]  AssertionFailedError  	116	3	replace
206	[BUG]  [BUGGY]  n  =  n.getFirstChild()  &&  labelName.equals(n.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild()  &&  labelName.equals(n.getLastChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild()  &&  labelName.equals(n.getLastChild());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	126	None	replace
207	[BUG]  [BUGGY]  n  =  n.getLastChild()  ||  labelName.equals(n.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild()  ||  labelName.equals(n.getFirstChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getLastChild()  ||  labelName.equals(n.getFirstChild());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	126	None	replace
208	[BUG]  [BUGGY]  n  =  n.getFirstChild()  ||  labelName.equals(n.getLastChild(),  type);  [CE]  no  suitable  method  found  for  equals(Node,int)  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild()  ||  labelName.equals(n.getLastChild(),  type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild()  ||  labelName.equals(n.getLastChild(),  type);	  n    =    n.getFirstChild()    ||    labelName.equals(n.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,int)	126	None	replace
209	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  false;	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
210	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())||  labelName.equals(n.getLastChild().getString()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())||  labelName.equals(n.getLastChild().getString()))  {  return  true;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())||  labelName.equals(n.getLastChild().getString()))  {  return  true;	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
211	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  ||  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  ||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
212	[BUG]  [BUGGY]  |  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  |  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	|  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
213	[BUG]  [BUGGY]  ||  labelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	||  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
214	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	117	None	add
215	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    return  n.getType()!=  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	117	None	add
216	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  Return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  Return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    Return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  ';'  expected	117	None	add
217	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  not  a  statement	117	None	add
218	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()  ==  Token.RETURN  &&  LabelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()  ==  Token.RETURN  &&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    return  n.getType()  ==  Token.RETURN  &&  LabelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  LabelName	117	None	add
219	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	117	None	add
220	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	59	None	add
221	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  not  a  statement	59	None	add
222	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    String  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	59	None	add
223	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getLastChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getLastChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    String  labelName  =  n.getLastChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	59	None	add
224	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	59	None	add
225	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getLastChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    String  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	59	None	add
226	[BUG]  [BUGGY]  String  labelName  =  n.getLastChild().getString()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getLastChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getLastChild().getString()  +  1;	  String    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	27	None	replace
227	[BUG]  [BUGGY]  String  labelName  =  n.getLastChild().getString()  + ": ";  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getLastChild().getString()  + ": ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getLastChild().getString()  + ": ";	  String    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	27	None	replace
228	[BUG]  [BUGGY]  String  labelName  =  n.getLastChild().getString()  + "; ";  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getLastChild().getString()  + "; ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getLastChild().getString()  + "; ";	  String    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	27	None	replace
229	[BUG]  [BUGGY]  String  labelName  =  n.getLastChild().getLabelName();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getLastChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getLastChild().getLabelName();	  String    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	123	None	replace
230	[BUG]  [BUGGY]  Label  labelName  =  n.getFirstChild().getLabelName();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Label  labelName  =  n.getFirstChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Label  labelName  =  n.getFirstChild().getLabelName();	  String    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
231	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getLabelName()  + ": ";  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getLabelName()  + ": ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getLabelName()  + ": ";	  String    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	123	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getFirstChild().getFirstChild();	  n    =    n.getFirstChild().getLastChild();    	compilable	  [FE]  AssertionFailedError  	120	3	replace
233	[BUG]  [BUGGY]  n  =  n.getFirstChild().getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild().getFirstChild();	  n    =    n.getFirstChild().getLastChild();    	compilable	  [FE]  AssertionFailedError  	120	3	replace
234	[BUG]  [BUGGY]  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	138	None	replace
235	[BUG]  [BUGGY]  return!labelName.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
236	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return!labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	138	3	replace
237	[BUG]  [BUGGY]  return!labelName.equals(n.getLastChild().getString());  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	138	3	replace
238	[BUG]  [BUGGY]  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&  LabelName.equals(n.getLastChild().get  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&  LabelName.equals(n.getLastChild().get  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&  LabelName.equals(n.getLastChild().get	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	138	None	replace
239	[BUG]  [BUGGY]  ||  labelName.equals(n.getLastChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  ||  labelName.equals(n.getLastChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	||  labelName.equals(n.getLastChild().getString()))  {  return  false;	  &&    labelName.equals(n.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getString());	  return!n.hasChildren()    &&!labelName.equals(n.getString());    	compilable	  [FE]  AssertionFailedError  	97	3	replace
241	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getString());	  return!n.hasChildren()    &&!labelName.equals(n.getString());    	compilable	  [FE]  AssertionFailedError  	97	3	replace
242	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getString());	  return!n.hasChildren()    &&!labelName.equals(n.getString());    	compilable	  [FE]  RuntimeException  	97	3	replace
243	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getString());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getString());	  return!n.hasChildren()    &&!labelName.equals(n.getString());    	compilable	  [FE]  RuntimeException  	97	3	replace
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getString());	  return!n.hasChildren()    &&    labelName.equals(n.getString());    	compilable	  [FE]  AssertionFailedError  	10	3	replace
245	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getString());	  return!n.hasChildren()    &&    labelName.equals(n.getString());    	compilable	  [FE]  AssertionFailedError  	10	3	replace
246	[BUG]  [BUGGY]  &&  labelName.equals(n.getParent().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getParent().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getParent().getString());	  &&    labelName.equals(n.getNext().getString());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
247	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	7	None	add
248	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  not  a  statement	7	None	add
249	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  Return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  Return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    Return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  ';'  expected	7	None	add
250	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  LabelName	7	None	add
251	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	7	None	add
252	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(N.getLastChild().getString());  [CE]  cannot  find  symbol  N  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(N.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&  labelName.equals(N.getLastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  N	7	None	add
253	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren())    {    return!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	148	3	replace
254	[BUG]  [BUGGY]  return!labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren())    {    return!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	148	3	replace
255	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild();  n  =  n.getLastChild());	          n    =    n.getFirstChild();    n    =    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	76	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	53	3	replace
257	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	53	3	replace
258	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  return!n.hasChildren()  &&  labelName.equals(n.getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  return!n.hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    return!n.hasChildren()  &&  labelName.equals(n.getString());	  	non-compiled	[CE]  unreachable  statement	9	None	add
259	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
260	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
261	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    String  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	9	None	add
262	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  return!n.hasChildren()  &&  labelName.equals(n.getString());  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  return!n.hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    String  labelName  =  n.getFirstChild().getString();  return!n.hasChildren()  &&  labelName.equals(n.getString());	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	9	None	add
263	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  int  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  int  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    int  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	9	None	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	98	3	replace
265	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	98	3	replace
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getFirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n    =    n.getFirstChild().getNext();    n  =  n.getFirstChild().getNext();	  	compilable	  [FE]  RuntimeException  	25	3	add
267	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getFirstChild().getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getFirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    n  =  n.getFirstChild().getNext();	  	compilable	  [FE]  RuntimeException  	25	3	add
268	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  int  n  =  n.getFirstChild().getNext();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  int  n  =  n.getFirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    int  n  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	25	None	add
269	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getLastChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n    =    n.getFirstChild().getNext();    n  =  n.getLastChild().getNext();	  	compilable	  [FE]  RuntimeException  	25	3	add
270	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getLastChild().getNext();  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getLastChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    n  =  n.getLastChild().getNext();	  	compilable	  [FE]  RuntimeException  	25	3	add
271	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  Node  n  =  n.getFirstChild().getNext();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  Node  n  =  n.getFirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    Node  n  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	25	None	add
272	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  Integer  n  =  n.getFirstChild().getNext();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  Integer  n  =  n.getFirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    Integer  n  =  n.getFirstChild().getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	25	None	add
273	[BUG]  [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    Return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	139	None	replace
274	[BUG]  [BUGGY]  n.getLastChild().getString()  =  labelName.equals(n.getLastChild().getString());  [CE]  unexpected  type  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getLastChild().getString()  =  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getLastChild().getString()  =  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    Return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  unexpected  type	139	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	42	3	replace
276	[BUG]  [BUGGY]  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	42	3	replace
277	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	42	3	replace
278	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	42	3	replace
279	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  return!n.hasChildren()  &&!labelName.equals(n.getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  return!n.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    return!n.hasChildren()  &&!labelName.equals(n.getString());	  	non-compiled	[CE]  unreachable  statement	96	None	add
280	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	96	None	add
281	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	96	None	add
282	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    String  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	96	None	add
283	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  int  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  int  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    int  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	96	None	add
284	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	96	None	add
285	[BUG]  [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
286	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n    =    n.getLastChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	21	3	add
287	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	21	3	add
288	[BUG]  [BUGGY]  n  =  n.getLastChild();  int  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  int  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    int  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	21	None	add
289	[BUG]  [BUGGY]  n  =  n.getLastChild();  Integer  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  Integer  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    Integer  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	21	None	add
290	[BUG]  [BUGGY]  n  =  n.getLastChild();  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  Node  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    Node  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	21	None	add
291	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n    =    n.getLastChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	3	add
292	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	21	3	add
293	[BUG]  [BUGGY]  n  =  n.getLastChild();  (n  =  n.getLastChild();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  (n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    (n  =  n.getLastChild();	  	non-compiled	[CE]  ')'  expected	21	None	add
294	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  return  n.hasChildren()  &&!labelName.equals(n.getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  return  n.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    return  n.hasChildren()  &&!labelName.equals(n.getString());	  	non-compiled	[CE]  unreachable  statement	61	None	add
295	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  n.hasChildren()  &&!labelName.equals(n.getString());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  n.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    n.hasChildren()  &&!labelName.equals(n.getString());	  	non-compiled	[CE]  not  a  statement	61	None	add
296	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  Return  n.hasChildren()  &&!labelName.equals(n.getString());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  Return  n.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    Return  n.hasChildren()  &&!labelName.equals(n.getString());	  	non-compiled	[CE]  ';'  expected	61	None	add
297	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getString());  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    String  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getString());	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	61	None	add
298	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  int  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getString());  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  int  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    int  labelName  =  n.getFirstChild().getString();  return  n.hasChildren()  &&!labelName.equals(n.getString());	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	61	None	add
299	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  String  labelName  =  n.getFirstChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    String  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	61	None	add
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getLastChild().getNext();	  n    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	26	3	replace
301	[BUG]  [BUGGY]  n  =  n.getLastChild().getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getLastChild().getNext();	  n    =    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	26	3	replace
302	[BUG]  [BUGGY]  n  =  n.getFirstChild().getString();  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild().getString();	  n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  incompatible  types	26	None	replace
303	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild().getNext()  +  1;	  n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	26	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getLastChild().getQualifiedName();	  labelName    =    n.getFirstChild().getQualifiedName();    	compilable	  [FE]  AssertionFailedError  	93	3	replace
305	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getQualifiedName();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getLastChild().getQualifiedName();	  labelName    =    n.getFirstChild().getQualifiedName();    	compilable	  [FE]  AssertionFailedError  	93	3	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getFirstChild().getQualifiedName()  +  1;	  labelName    =    n.getFirstChild().getQualifiedName();    	compilable	  [FE]  AssertionFailedError  	93	3	replace
307	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getQualifiedName()  +  1;	  labelName    =    n.getFirstChild().getQualifiedName();    	compilable	  [FE]  AssertionFailedError  	93	3	replace
308	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	63	None	add
309	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  not  a  statement	63	None	add
310	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.getFirstChild().hasChildren()  &&  LabelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  LabelName	63	None	add
311	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelsName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  labelsName  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelsName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelsName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol  labelsName	63	None	add
312	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  int  labelName  =  n.getFirstChild().getLastChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  int  labelName  =  n.getFirstChild().getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    int  labelName  =  n.getFirstChild().getLastChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	63	None	add
313	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getLastChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  String  labelName  =  n.getLastChild().getString();  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    String  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	63	None	add
314	[BUG]  [BUGGY]  n  =  n.getNext()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getNext()  ||  labelName.equals(n.getFirstChild().getString());	  n    =    n.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	24	None	replace
315	[BUG]  [BUGGY]  n  =  n.getNext()  ||  labelName.equals(n.getLastChild().getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getNext()  ||  labelName.equals(n.getLastChild().getString());	  n    =    n.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	24	None	replace
316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	46	3	add
317	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	46	3	add
318	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    LabelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	46	None	add
319	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	46	3	add
320	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	46	3	add
321	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  String  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  String  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    String  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	46	None	add
322	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  LabelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  LabelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    LabelName  =  n.getLastChild().getString();  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	46	None	add
323	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  n  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [CE]  incompatible  types  [FE]              RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  n  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    n  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  incompatible  types	46	None	add
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  RuntimeException  	87	3	replace
325	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  RuntimeException  	87	3	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.NAME)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.NAME)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	87	3	replace
327	[BUG]  [BUGGY]  if(type  ==  Token.NAME)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.NAME)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.NAME)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	87	3	replace
328	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ",: "  +  n.getLastChild();	  String    labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	132	None	replace
329	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ".: "  +  n.getLastChild();	  String    labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	132	None	replace
330	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();	  String    labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	132	None	replace
331	[BUG]  [BUGGY]  String  labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getLastChild().getString()  + ": "  +  n.getFirstChild();	  String    labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	132	None	replace
332	[BUG]  [BUGGY]  n.removeChild(labelName);  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	16	None	replace
333	[BUG]  [BUGGY]  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	16	None	replace
334	[BUG]  [BUGGY]  String  labelName  =  n.getLastChild().getQualifiedName();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getLastChild().getQualifiedName();	  String    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	30	None	replace
335	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getQualifiedName()  +  1;	  String    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	30	None	replace
336	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getQualifiedName(type);  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getQualifiedName(type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getQualifiedName(type);	  String    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	30	None	replace
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	114	3	replace
338	[BUG]  [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	114	3	replace
339	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	143	None	replace
340	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	143	None	replace
341	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	143	None	replace
342	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	143	None	replace
343	[BUG]  [BUGGY]  n.removeChild(type,  labelName,  name);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type,  labelName,  name);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type,  labelName,  name);	  n.removeChild(type,    labelName);    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
344	[BUG]  [BUGGY]  n.removeChild(type,  labelName,  this);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type,  labelName,  this);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type,  labelName,  this);	  n.removeChild(type,    labelName);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	66	None	replace
345	[BUG]  [BUGGY]  n.removeChild(type,  labelName,  parent);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type,  labelName,  parent);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type,  labelName,  parent);	  n.removeChild(type,    labelName);    	non-compiled	[CE]  cannot  find  symbol  parent	66	None	replace
346	[BUG]  [BUGGY]  n.removeChild(type,  labelName,  false);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type,  labelName,  false);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type,  labelName,  false);	  n.removeChild(type,    labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
347	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getFirstChild();  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	109	3	replace
349	[BUG]  [BUGGY]  n  =  n.getFirstChild();  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild();  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	109	3	replace
350	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild().getQualifiedName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getLastChild().getQualifiedName();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
351	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild().getLabelName();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getLastChild().getLabelName();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
352	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild(),  labelName.getString();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild(),  labelName.getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getLastChild(),  labelName.getString();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  ';'  expected	107	None	replace
353	[BUG]  [BUGGY]  return  labelName.hasChildren()  &&!labelName.equals(n.getString());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.hasChildren()  &&!labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.hasChildren()  &&!labelName.equals(n.getString());	  return    n.hasChildren()    &&!labelName.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
354	[BUG]  [BUGGY]  LabelName  labelName  =  n.getLastChild().getQualifiedName();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getLastChild().getQualifiedName();	  LabelName    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
355	[BUG]  [BUGGY]  LabelName  labelName  =  n,  n.getLastChild().getString();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  n.getLastChild().getString();	  LabelName    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  ';'  expected	1	None	replace
356	[BUG]  [BUGGY]  n.removeChild(labelName);  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	84	None	replace
357	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getQualifiedName()  +  1;	  LabelName    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
358	[BUG]  [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getQualifiedName();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  type.getFirstChild().getQualifiedName();	  LabelName    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  ';'  expected	2	None	replace
359	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName()  + ": ";  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName()  + ": ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getQualifiedName()  + ": ";	  LabelName    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
360	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getFirstChild().getQualifiedName();    labelName  =  n.getFirstChild().getQualifiedName();	  	compilable	  [FE]  AssertionFailedError  	92	3	add
361	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getFirstChild().getQualifiedName();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getQualifiedName();    labelName  =  n.getFirstChild().getQualifiedName();	  	compilable	  [FE]  AssertionFailedError  	92	3	add
362	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  LabelName  =  n.getFirstChild().getQualifiedName();  [CE]  cannot  find  symbol  LabelName  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  LabelName  =  n.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getQualifiedName();    LabelName  =  n.getFirstChild().getQualifiedName();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	92	None	add
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName    =    n.getFirstChild().getQualifiedName();    labelName  =  n.getLastChild().getQualifiedName();	  	compilable	  [FE]  AssertionFailedError  	92	3	add
364	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getLastChild().getQualifiedName();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getLastChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getQualifiedName();    labelName  =  n.getLastChild().getQualifiedName();	  	compilable	  [FE]  AssertionFailedError  	92	3	add
365	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  String  labelName  =  n.getFirstChild().getQualifiedName();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  String  labelName  =  n.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getQualifiedName();    String  labelName  =  n.getFirstChild().getQualifiedName();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	92	None	add
366	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  n  =  n.getFirstChild().getQualifiedName();  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  n  =  n.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getQualifiedName();    n  =  n.getFirstChild().getQualifiedName();	  	non-compiled	[CE]  incompatible  types	92	None	add
367	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString());	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
368	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getFirstChild().getString());	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
369	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild().getString())||  labelName.equals(n.getLastChild().getString());	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
370	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	64	3	replace
371	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  RuntimeException  	64	3	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	64	3	replace
373	[BUG]  [BUGGY]  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	64	3	replace
374	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	72	3	add
375	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	72	3	add
376	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	72	3	add
377	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getLastChild();  n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	72	3	add
378	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  int  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  int  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    int  n  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	72	None	add
379	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  Node  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    Node  n  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	72	None	add
380	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
381	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  +  2;  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  +  2;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  +  2;	  String    labelName    =    n.getFirstChild().getString()    +    1;    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	28	None	replace
382	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",  type: ";  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",  type: ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ",  type: ";	  String    labelName    =    n.getFirstChild().getString()    +   ":   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	29	None	replace
383	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ".: ";  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ".: ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ".: ";	  String    labelName    =    n.getFirstChild().getString()    +   ":   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	29	None	replace
384	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ": "+labelName;  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ": "+labelName;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ": "+labelName;	  String    labelName    =    n.getFirstChild().getString()    +   ":   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	29	None	replace
385	[BUG]  [BUGGY]  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	          labelName    =    n.getFirstChild().getString();    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	47	None	replace
386	[BUG]  [BUGGY]  LabelName  =  labelName.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  labelName.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  labelName.getLastChild().getString();	          labelName    =    n.getFirstChild().getString();    LabelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	48	None	replace
387	[BUG]  [BUGGY]  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	78	None	replace
388	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	78	None	replace
389	[BUG]  [BUGGY]  n.removeChild(labelName);  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName);  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName);  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	78	None	replace
390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getLastChild().getString()  +  1;	  labelName    =    n.getFirstChild().getString()    +    1;    	compilable	  [FE]  RuntimeException  	14	3	replace
391	[BUG]  [BUGGY]  labelName  =  n.getLastChild().getString()  +  1;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getLastChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getLastChild().getString()  +  1;	  labelName    =    n.getFirstChild().getString()    +    1;    	compilable	  [FE]  RuntimeException  	14	3	replace
392	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n    =    n.getNext();    n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	23	3	add
393	[BUG]  [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	23	3	add
394	[BUG]  [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).checkState(type  ==  Token.RETURN);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).checkState(type  ==  Token.RETURN);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ((  AssertionFailedError)n).checkState(type  ==  Token.RETURN);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
395	[BUG]  [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).returnType  ==  Token.RETURN);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).returnType  ==  Token.RETURN);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ((  AssertionFailedError)n).returnType  ==  Token.RETURN);	  	non-compiled	[CE]  not  a  statement	23	None	add
396	[BUG]  [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).setLabelName(labelName);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).setLabelName(labelName);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ((  AssertionFailedError)n).setLabelName(labelName);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
397	[BUG]  [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).checkState(labelName!=  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).checkState(labelName!=  null);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ((  AssertionFailedError)n).checkState(labelName!=  null);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
398	[BUG]  [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).returnType  ==  Token.RETURN)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ((  AssertionFailedError)n).returnType  ==  Token.RETURN)  {  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ((  AssertionFailedError)n).returnType  ==  Token.RETURN)  {	  	non-compiled	[CE]  not  a  statement	23	None	add
399	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	127	None	add
400	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  not  a  statement	127	None	add
401	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
402	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
403	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
404	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getType()  ==  Token.FUNCTION)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
405	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  return  n.hasChildren()  &&! "return ".equals(n.getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  return  n.hasChildren()  &&! "return ".equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    return  n.hasChildren()  &&! "return ".equals(n.getString());	  	non-compiled	[CE]  unreachable  statement	61	None	add
406	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  return  n.hasChildren()  &&!labelName.equals(ngetString());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  return  n.hasChildren()  &&!labelName.equals(ngetString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    return  n.hasChildren()  &&!labelName.equals(ngetString());	  	non-compiled	[CE]  cannot  find  symbol	61	None	add
407	[BUG]  [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  type.getFirstChild().getLastChild();	  LabelName    labelName    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
408	[BUG]  [BUGGY]  LabelName  labelName  =  n,  n.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  n.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  n.getFirstChild().getLastChild();	  LabelName    labelName    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
409	[BUG]  [BUGGY]  LabelName  labelName  =  node.getFirstChild().getLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  node.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  node.getFirstChild().getLastChild();	  LabelName    labelName    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
410	[BUG]  [BUGGY]  return!n.hasChildren()  &&!LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&!LabelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&!   "labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  LabelName	147	None	replace
411	[BUG]  [BUGGY]  return  n.hasChildren()  &&!LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&!LabelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&!   "labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  LabelName	147	None	replace
412	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  Return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  Return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    Return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  ';'  expected	59	None	add
413	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	59	None	add
414	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&! "return ".equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&! "return ".equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&! "return ".equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	59	None	add
415	[BUG]  [BUGGY]  n  =  n.getFirstChild();  (n  =  n.getLastChild();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  (n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild();  (n  =  n.getLastChild();	          n    =    n.getFirstChild();    (n    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	122	None	replace
416	[BUG]  [BUGGY]  n  =  n.getLastChild();  (n  =  n.getFirstChild();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  (n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getLastChild();  (n  =  n.getFirstChild();	          n    =    n.getFirstChild();    (n    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	122	None	replace
417	[BUG]  [BUGGY]  &&  LabelName.equals(n.getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  LabelName.equals(n.getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  LabelName.equals(n.getString());	  &&    LabelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	114	3	replace
419	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	114	3	replace
420	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(type  ==  Token.RETURN)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(type  ==  Token.RETURN)  {  return  true;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(type  ==  Token.RETURN)  {  return  true;  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
421	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
422	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.get  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.get  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.get	  	non-compiled	[CE]  ')'  expected	9	None	add
423	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
424	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.getString  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.getString  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return!n.hasChildren()  &&  labelName.equals(n.getString	  	non-compiled	[CE]  ')'  expected	9	None	add
425	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
426	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild()))  {  return  true;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild()))  {  return  true;	  &&    labelName.equals(n.getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
427	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild()))  {  return  false;	  &&    labelName.equals(n.getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
428	[BUG]  [BUGGY]  &&  labelName.equals(n.getString())||  labelName!=  null)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString())||  labelName!=  null)  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString())||  labelName!=  null)  {  return  false;	  &&    labelName.equals(n.getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
429	[BUG]  [BUGGY]  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(name);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(name);	  n.removeChild(type);    	non-compiled	[CE]  cannot  find  symbol  name	69	None	replace
430	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
431	[BUG]  [BUGGY]  &&  labelName.equals(n.getQualifiedName().getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getQualifiedName().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getQualifiedName().getString());	  &&    labelName.equals(n.getfirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
432	[BUG]  [BUGGY]  Return  labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Return  labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Return  labelName.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	89	None	replace
433	[BUG]  [BUGGY]  LabelName  labelName  =  n.getfirstChild().getLabelName();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getfirstChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getfirstChild().getLabelName();	  LabelName    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
434	[BUG]  [BUGGY]  LabelName  labelName  =  node.getFirstChild().getLabelName();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  node.getFirstChild().getLabelName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  node.getFirstChild().getLabelName();	  LabelName    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
435	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getfirstChild();  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getfirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getfirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
436	[BUG]  [BUGGY]  LabelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();	          labelName    =    n.getFirstChild().getString();    LabelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol  LabelName	48	None	replace
437	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
438	[BUG]  [BUGGY]  return  labelName.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
439	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  Return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  Return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    Return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  ';'  expected	63	None	add
440	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getlastChild().getString());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getlastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getlastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
441	[BUG]  [BUGGY]  String  labelName  =  n.getfirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getfirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getfirstChild().getString();	  String    labelName    =    n.getFirstChild().getString()    +    1;    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	28	None	replace
442	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild().getString())&&  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild().getString())&&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild().getString())&&  labelName.equals(n.getFirstChild().getString());	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
443	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	57	None	add
444	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&! "return ".equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&! "return ".equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&! "return ".equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	57	None	add
445	[BUG]  [BUGGY]  LabelName  labelName  =  n,  n.getFirstChild().getQualifiedName();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  n.getFirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  n.getFirstChild().getQualifiedName();	  LabelName    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  ';'  expected	2	None	replace
446	[BUG]  [BUGGY]  n.removeChild(type,  labelName,  null);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type,  labelName,  null);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type,  labelName,  null);	  n.removeChild(type,    labelName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	42	3	replace
448	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getFirstChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	42	3	replace
449	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getfirstChild().getString());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getfirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getfirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
450	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName(type);  [CE]  method  getQualifiedName  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName(type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getQualifiedName(type);	  labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  method  getQualifiedName  in  class  Node  cannot  be  applied  to  given  types;	93	None	replace
451	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	41	None	add
452	[BUG]  [BUGGY]  &&  labelName.equals(n.getString().getString());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString().getString());	  &&    labelName.equals(n.getLastChild().getString()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
453	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getLabelName()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getLabelName()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getLabelName()  +  1;	  String    labelName    =    n.getFirstChild().getLabelName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	123	None	replace
454	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    type)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	non-compiled	[CE]  ';'  expected	55	None	replace
455	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  type)  {  return!n.hasChildren()  &&  labelName.equals	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    type)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	non-compiled	[CE]  ';'  expected	55	None	replace
456	[BUG]  [BUGGY]  n.removeChild(labelName,  JSError.make(sourceName,  type,  labelName));  [CE]  cannot  find  symbol  sourceName  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  JSError.make(sourceName,  type,  labelName));  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  JSError.make(sourceName,  type,  labelName));	  n.removeChild(labelName,    type);    	non-compiled	[CE]  cannot  find  symbol  sourceName	65	None	replace
457	[BUG]  [BUGGY]  n.removeChild(labelName,  toString());  [CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  toString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  toString());	  n.removeChild(labelName,    type);    	non-compiled	[CE]  non-static  method  toString()  cannot  be  referenced  from  a  static  context	65	None	replace
458	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getQualifiedName(labelName);  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getQualifiedName(labelName);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getQualifiedName(labelName);	  String    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	30	None	replace
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getFirstChild();  n  =  n.getNext();	          n    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	71	3	replace
460	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getNext();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild();  n  =  n.getNext();	          n    =    n.getFirstChild();    n    =    n.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	71	3	replace
461	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  ||  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  ||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
462	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	51	None	replace
463	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  labelName.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  return  labelName.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getType()    ==    Token.RETURN    &&    labelName.equals(n.getLastChild().getString());    return  labelName.getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	117	None	add
464	[BUG]  [BUGGY]  n  =  n.getfirstChild()  &&  labelName.equals(n.getLastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getfirstChild()  &&  labelName.equals(n.getLastChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getfirstChild()  &&  labelName.equals(n.getLastChild());	  n    =    n.getFirstChild()    ||    labelName.equals(n.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
465	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild()  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  n.getFirstChild().getLastChild()  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    n  =  n.getFirstChild().getLastChild()	  	non-compiled	[CE]  ';'  expected	119	None	add
466	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  ||  labelName.equals(n.getfirstChild().getString());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  return  n.hasChildren()  ||  labelName.equals(n.getfirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    return  n.hasChildren()  ||  labelName.equals(n.getfirstChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
467	[BUG]  [BUGGY]  return  n.getChildren().size()  ==  1  &&  labelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getChildren().size()  ==  1  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getChildren().size()  ==  1  &&  labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
468	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getlastChild().getString());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.hasChildren()  &&  labelName.equals(n.getlastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.hasChildren()  &&  labelName.equals(n.getlastChild().getString());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
469	[BUG]  [BUGGY]  LabelName  labelName  =  n.getLastChild().getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getLastChild().getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getLastChild().getFirstChild().getString();	  LabelName    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
470	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
471	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	127	None	add
472	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unreachable  statement	127	None	add
473	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  false;  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
474	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getfirstChild().getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  n.getfirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    n  =  n.getfirstChild().getNext();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
475	[BUG]  [BUGGY]  return  labelName.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  labelName.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  labelName.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
476	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getfirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getfirstChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
477	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(!n.hasChildren()  &&  labelName.equals(n.getFirstChild	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  ')'  expected	143	None	replace
478	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	58	3	replace
479	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getType()  ==  Token.RETURN  &&!labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	58	3	replace
480	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getString();  LabelName  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getString();  LabelName  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getString();  LabelName  labelName  =  n.getFirstChild().getString();	          labelName    =    n.getFirstChild().getString();    LabelName    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
481	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getString();  this.labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getString();  this.labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getString();  this.labelName  =  n.getFirstChild().getString();	          labelName    =    n.getFirstChild().getString();    LabelName    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
482	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getfirstChild().getQualifiedName();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getQualifiedName();  labelName  =  n.getfirstChild().getQualifiedName();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName    =    n.getFirstChild().getQualifiedName();    labelName  =  n.getfirstChild().getQualifiedName();	  	non-compiled	[CE]  cannot  find  symbol	92	None	add
483	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(type  ==  Token.RETURN)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(type  ==  Token.RETURN)  {  return  true;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(type  ==  Token.RETURN)  {  return  true;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
484	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(type  ==  Token.RETURN)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(type  ==  Token.RETURN)  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(type  ==  Token.RETURN)  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
485	[BUG]  [BUGGY]  return!labelName.hasChildren()  &&  labelName.equals(n.getFirstChild(),  n.getString());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.hasChildren()  &&  labelName.equals(n.getFirstChild(),  n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.hasChildren()  &&  labelName.equals(n.getFirstChild(),  n.getString());	  return!labelName.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  return!n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getFirstChild();  return!n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    ||    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	104	3	replace
487	[BUG]  [BUGGY]  n  =  n.getFirstChild();  return!n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  return!n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild();  return!n.hasChildren()  ||  labelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    ||    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	104	3	replace
488	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ": "  +  Token.name(type);  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ": "  +  Token.name(type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ": "  +  Token.name(type);	  String    labelName    =    n.getFirstChild().getString()    +   ":   ";    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	29	None	replace
489	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
490	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  n.getLastChild().getString();	  	compilable	  [FE]  RuntimeException  	43	3	add
491	[BUG]  [BUGGY]  &&  labelName.equals(n.getPrevious().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getPrevious().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getPrevious().getString());	  &&    labelName.equals(n.getNext().getString());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
492	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  LabelName  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  cannot  find  symbol  LabelName	46	None	add
493	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getfirstChild().getString();  labelName  =  n.getLastChild().getString();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getfirstChild().getString();  labelName  =  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getfirstChild().getString();  labelName  =  n.getLastChild().getString();	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
494	[BUG]  [BUGGY]  LabelName  labelName  =  n,  n.getFirstChild().getLastChild().getString();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  n.getFirstChild().getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  n.getFirstChild().getLastChild().getString();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  ';'  expected	107	None	replace
495	[BUG]  [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getLastChild().getString();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n,  type.getFirstChild().getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n,  type.getFirstChild().getLastChild().getString();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  ';'  expected	107	None	replace
496	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild(),  n.getLastChild().getString();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild(),  n.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild(),  n.getLastChild().getString();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  ';'  expected	107	None	replace
497	[BUG]  [BUGGY]  LabelName  labelName  =  node.getFirstChild().getLastChild().getString();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  node.getFirstChild().getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  node.getFirstChild().getLastChild().getString();	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
498	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getString());	  return!n.hasChildren()    &&    labelName.equals(n.getString());    	compilable	  [FE]  RuntimeException  	10	3	replace
499	[BUG]  [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getString());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getType()  ==  Token.RETURN  &&  labelName.equals(n.getString());	  return!n.hasChildren()    &&    labelName.equals(n.getString());    	compilable	  [FE]  RuntimeException  	10	3	replace
500	[BUG]  [BUGGY]  return!labelName.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.hasChildren()  &&  LabelName.equals(n.getLastChild().getString());	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return!n.hasChildren()    &&    LabelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	Preconditions.checkState(n.getType()  ==  Token.RETURN);  n  =  n.getFirstChild();  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	73	3	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.RETURN);  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Preconditions.checkState(n.getType()  ==  Token.RETURN);  n  =  n.getFirstChild();  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	73	3	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  n  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getFirstChild();  n  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	73	3	replace
504	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild();  n  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getFirstChild();  n  =(n.getLastChild()  ==  null)?  null  :  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	73	3	replace
505	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  return!n.hasChildren()  &&  labelName.equals(n.getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  return!n.hasChildren()  &&  labelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    return!n.hasChildren()  &&  labelName.equals(n.getString());	  	non-compiled	[CE]  unreachable  statement	96	None	add
506	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&! "labelName.equals(n.getString());  }  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&! "labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&! "labelName.equals(n.getString());  }	  	non-compiled	[CE]  unclosed  string  literal	96	None	add
507	[BUG]  [BUGGY]  &&  labelName.equals(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getLastChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getLastChild());	  &&    labelName.equals(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
508	[BUG]  [BUGGY]  &&  labelName.equals(n.getString())&&  type  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getString())&&  type  ==  Token.EXPR_RESULT;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getString())&&  type  ==  Token.EXPR_RESULT;	  &&    labelName.equals(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getParent();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.getParent();	  n    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	24	3	replace
510	[BUG]  [BUGGY]  n  =  n.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getParent();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.getParent();	  n    =    n.getNext();    	compilable	  [FE]  AssertionFailedError  	24	3	replace
511	[BUG]  [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ||  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
512	[BUG]  [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString()))  {  return  true;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ||  labelName.equals(n.getFirstChild().getString()))  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
513	[BUG]  [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
514	[BUG]  [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getFirstChild().getString()))  {  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ||  labelName.equals(n.getFirstChild().getString()))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
515	[BUG]  [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  ||  labelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    ||  labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
516	[BUG]  [BUGGY]  return!n.hasChildren()  &&  LabelName.equals(labelName.getFirstChild(),  n.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  LabelName.equals(labelName.getFirstChild(),  n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  LabelName.equals(labelName.getFirstChild(),  n.getString());	  return!n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
517	[BUG]  [BUGGY]  &&  LabelName.equals(n.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  LabelName.equals(n.getFirstChild().getString()))  {  return  false;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  LabelName.equals(n.getFirstChild().getString()))  {  return  false;	  &&    labelName.equals(n.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
518	[BUG]  [BUGGY]  Neighbor  n  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Neighbor  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Neighbor  n  =  n.getFirstChild();  n  =  n.getLastChild();	          n    =    n.getFirstChild();    n    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
519	[BUG]  [BUGGY]  n.removeChild(type,  LabelName);  [CE]  cannot  find  symbol  LabelName  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(type,  LabelName);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(type,  LabelName);	  n.removeChild(type);    	non-compiled	[CE]  cannot  find  symbol  LabelName	69	None	replace
520	[BUG]  [BUGGY]  n.removeChild(labelName,  Token.RETURN);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.removeChild(labelName,  Token.RETURN);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.removeChild(labelName,  Token.RETURN);	  n.removeChild(labelName,    type);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	n  =  n.removeFirstChild();	  n    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	22	3	replace
522	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n  =  n.removeFirstChild();	  n    =    n.getLastChild();    	compilable	  [FE]  AssertionFailedError  	22	3	replace
523	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	57	None	add
524	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	57	None	add
525	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild	  	non-compiled	[CE]  ')'  expected	57	None	add
526	[BUG]  [BUGGY]  &&  LabelName.equals(n.getFirstChild().getString()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  LabelName.equals(n.getFirstChild().getString()))  {  return  true;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  LabelName.equals(n.getFirstChild().getString()))  {  return  true;	  &&    labelName.equals(n.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
527	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString()))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString()))  {  return  true;  }  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString()))  {  return  true;  }	  &&    labelName.equals(n.getLastChild().getString()))    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
528	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	7	None	add
529	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild	  	non-compiled	[CE]  ')'  expected	7	None	add
530	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild	  	non-compiled	[CE]  ')'  expected	7	None	add
531	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  [0];  [CE]  array  required,  but  String  found  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  [0];  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getString()  [0];	  labelName    =    n.getFirstChild().getString()    +    1;    	non-compiled	[CE]  array  required,  but  String  found	14	None	replace
532	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  *  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getString()  *  1;	  labelName    =    n.getFirstChild().getString()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	14	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild    	compilable	  [FE]  AssertionFailedError  	110	2	replace
534	[BUG]  [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild    	compilable	  [FE]  AssertionFailedError  	110	2	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild    	compilable	  [FE]  AssertionFailedError  	110	3	replace
536	[BUG]  [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild    	compilable	  [FE]  AssertionFailedError  	110	3	replace
537	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getFirstChild().getString();  LabelName  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getFirstChild().getString();    LabelName  labelName  =  n.getFirstChild().getString();  labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
538	[BUG]  [BUGGY]  n.getType()  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	81	None	replace
539	[BUG]  [BUGGY]  n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	81	None	replace
540	[BUG]  [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",  null: "  +  n.getLastChild();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  String  labelName  =  n.getFirstChild().getString()  + ",  null: "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	String  labelName  =  n.getFirstChild().getString()  + ",  null: "  +  n.getLastChild();	  String    labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	132	None	replace
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null)  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	114	2	replace
542	[BUG]  [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null)  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	114	2	replace
543	[BUG]  [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  null.getLastChild().getString();  [CE]  <null>  cannot  be  dereferenced  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          labelName    =    n.getFirstChild().getString();    labelName  =  n.getLastChild().getString();  labelName  =  n.getFirstChild().getString();  labelName  =  null.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                labelName        =        n.getFirstChild().getString();        labelName    =    n.getLastChild().getString();    labelName  =  n.getFirstChild().getString();  labelName  =  null.getLastChild().getString();	  	non-compiled	[CE]  <null>  cannot  be  dereferenced	46	None	add
544	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    return  n.getLastChild().hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	  	non-compiled	[CE]  unreachable  statement	41	None	add
545	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  true;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  true;	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
546	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  false;  }  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())&&  labelName.equals(n.getLastChild().getString()))  {  return  false;  }	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString()))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
547	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  return!n.hasChildren()  &&  LabelName.equals(n.getString());  [CE]  cannot  find  symbol  LabelName  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  return!n.hasChildren()  &&  LabelName.equals(n.getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    return!n.hasChildren()  &&  LabelName.equals(n.getString());	  	non-compiled	[CE]  cannot  find  symbol  LabelName	9	None	add
548	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return  false;  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getString());  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&    labelName.equals(n.getString());    if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getString());  }  else  {  return  false;  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
549	[BUG]  [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  no.getFirstChild().getLastChild();  [CE]  cannot  find  symbol  no  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getLastChild();  n  =  no.getFirstChild().getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getLastChild();    n  =  no.getFirstChild().getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  no	119	None	add
550	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChildDesc().getString());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChild().getString());  return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChildDesc().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    return  n.getFirstChild().hasChildren()  &&  labelName.equals(n.getLastChildDesc().getString());	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
551	[BUG]  [BUGGY]  LabelName  l  =  n.getFirstChild().getString();  labelName  =  l.getLastChild().getString();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  l  =  n.getFirstChild().getString();  labelName  =  l.getLastChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  l  =  n.getFirstChild().getString();  labelName  =  l.getLastChild().getString();	          labelName    =    n.getFirstChild().getString();    labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
552	[BUG]  [BUGGY]  &&  LabelName.equals(n.getFirstChild().getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  LabelName.equals(n.getFirstChild().getQualifiedName());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  LabelName.equals(n.getFirstChild().getQualifiedName());	  &&    LabelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	99	3	replace
554	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	99	3	replace
555	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  no.getLastChild();  [CE]  cannot  find  symbol  no  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  n  =  no.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    n  =  no.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  no	21	None	add
556	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getLastChild();    n  =  n.getLastChild());	  	non-compiled	[CE]  ';'  expected	21	None	add
557	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	143	2	replace
558	[BUG]  [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	143	2	replace
559	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	143	3	replace
560	[BUG]  [BUGGY]  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString()))  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	143	3	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(!n.hasChildren())  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(!n.hasChildren())  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	143	2	replace
562	[BUG]  [BUGGY]  if(!n.hasChildren())  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]            RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(!n.hasChildren())  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(!n.hasChildren())  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  AssertionFailedError  	143	2	replace
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.NAME)  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.NAME)  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	146	3	replace
564	[BUG]  [BUGGY]  if(type  ==  Token.NAME)  {  return!n.hasChildren();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.NAME)  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.NAME)  {  return!n.hasChildren();  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	146	3	replace
565	[BUG]  [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  this.labelName  =  n.getFirstChild().getString();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  this.labelName  =  n.getFirstChild().getString();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getNext();    n  =  n.getNext();  this.labelName  =  n.getFirstChild().getString();	  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	23	None	add
566	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(!labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(!labelName.equals(n.getFirstChild().getString()))  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren())    {    return!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	148	3	replace
567	[BUG]  [BUGGY]  if(!labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(!labelName.equals(n.getFirstChild().getString()))  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(!labelName.equals(n.getFirstChild().getString()))  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(!n.hasChildren())    {    return!labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	148	3	replace
568	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(labelName  ==  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(labelName  ==  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(labelName  ==  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	59	None	add
569	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	59	None	add
570	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getFirstChild()!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(n.getFirstChild()!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(n.getFirstChild()!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	59	None	add
571	[BUG]  [BUGGY]  return!labelName.hasChildren()  &&  labelName.equals(n,  n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.hasChildren()  &&  labelName.equals(n,  n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.hasChildren()  &&  labelName.equals(n,  n.getFirstChild().getString());	  return!labelName.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
572	[BUG]  [BUGGY]  return!labelName.isQuotedString()  &&  labelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!labelName.isQuotedString()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!labelName.isQuotedString()  &&  labelName.equals(n.getFirstChild().getString());	  return!labelName.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
573	[BUG]  [BUGGY]  labelName  = "return  null. "  +  Token.name(n.getFirstChild().getString());  [CE]  method  name  in  class  Token  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  = "return  null. "  +  Token.name(n.getFirstChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  = "return  null. "  +  Token.name(n.getFirstChild().getString());	  labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  method  name  in  class  Token  cannot  be  applied  to  given  types;	12	None	replace
574	[BUG]  [BUGGY]  labelName  = "return  null. "  +  Token.name(n.getLastChild().getString());  [CE]  method  name  in  class  Token  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  = "return  null. "  +  Token.name(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  = "return  null. "  +  Token.name(n.getLastChild().getString());	  labelName    =    n.getLastChild().getString();    	non-compiled	[CE]  method  name  in  class  Token  cannot  be  applied  to  given  types;	12	None	replace
575	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  = "RETURN ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  = "RETURN ";	  labelName    =    n.getLastChild().getString();    	compilable	  [FE]  AssertionFailedError  	12	3	replace
576	[BUG]  [BUGGY]  labelName  = "RETURN ";  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  = "RETURN ";  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  = "RETURN ";	  labelName    =    n.getLastChild().getString();    	compilable	  [FE]  AssertionFailedError  	12	3	replace
577	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  }  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	18	None	replace
578	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  }  else  {  return  false;  }  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  String  labelName  =  n.getFirstChild().getString();  }  else  {  return  false;  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	18	None	replace
579	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  string  labelName  =  n.getFirstChild().getString();  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  string  labelName  =  n.getFirstChild().getString();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  string  labelName  =  n.getFirstChild().getString();  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    String    labelName    =    n.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
580	[BUG]  [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  LabelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getFirstChild().getString())&&  LabelName.equals(n.getLastChild().getString());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getFirstChild().getString())&&  LabelName.equals(n.getLastChild().getString());	  &&    labelName.equals(n.getFirstChild().getString())||    labelName.equals(n.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
581	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
583	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]                RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	105	3	replace
584	[BUG]  [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName!=  null)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  true;  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    else    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
585	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
586	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild	  	non-compiled	[CE]  ')'  expected	5	None	add
587	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().get  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().get  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().get	  	non-compiled	[CE]  ')'  expected	5	None	add
588	[BUG]  [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return!n.hasChildren();  }  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return!n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return!n.hasChildren();  }	  	non-compiled	[CE]  unreachable  statement	5	None	add
589	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	61	None	add
590	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	61	None	add
591	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    &&!labelName.equals(n.getString());    if(labelName!=  null)  {  return  n.hasChildren()  &&!labelName.equals(n.getString());  }  else  {  return  n.hasChildren()  &&!labelName.equals(n.getFirstChild	  	non-compiled	[CE]  ')'  expected	61	None	add
592	[BUG]  [BUGGY]  Return  n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  Return  n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	Return  n.hasChildren()  &&  LabelName.equals(labelName,  n.getFirstChild().getString());	  return    n.hasChildren()    &&    LabelName.equals(labelName.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	89	None	replace
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	60	3	replace
594	[BUG]  [BUGGY]  return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().hasChildren()  &&!labelName.equals(n.getLastChild().getString());	  return    n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	60	3	replace
595	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild()  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getLastChild();  n  =  n.getFirstChild();  n  =  n.getLastChild()  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getLastChild();    n  =  n.getFirstChild();  n  =  n.getLastChild()	  	non-compiled	[CE]  ';'  expected	72	None	add
596	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
597	[BUG]  [BUGGY]  labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	labelName  =  n.getFirstChild().getString()  + ",   "  +  n.getLastChild();	  labelName    =    n.getFirstChild().getString()    +   ":   "    +    n.getLastChild();    	compilable	  [FE]  RuntimeException  	141	3	replace
598	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(labelName  ==  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(labelName  ==  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(labelName  ==  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
599	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&! "labelName.equals(n.getLastChild().getString());  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  return!n.hasChildren()  &&! "labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    return!n.hasChildren()  &&! "labelName.equals(n.getLastChild().getString());	  	non-compiled	[CE]  unclosed  string  literal	127	None	add
600	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(!n.hasChildren())  {  return!labelName.equals(n.getLastChild().getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getLastChild().getString());  if(!n.hasChildren())  {  return!labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getLastChild().getString());    if(!n.hasChildren())  {  return!labelName.equals(n.getLastChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
601	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName  ==  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName  ==  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(labelName  ==  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	96	None	add
602	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(!n.hasChildren())  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(!n.hasChildren())  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(!n.hasChildren())  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	96	None	add
603	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getString());  if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()    &&!labelName.equals(n.getString());    if(labelName!=  null)  {  return!n.hasChildren()  &&!labelName.equals(n.getString());  }	  	non-compiled	[CE]  unreachable  statement	96	None	add
604	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.hasChildren()  &&!labelName.equals(n.getLastChild());	  return    n.hasChildren()    &&!labelName.equals(n.getString());    	compilable	  [FE]  RuntimeException  	62	3	replace
605	[BUG]  [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  &&!labelName.equals(n.getLastChild());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.hasChildren()  &&!labelName.equals(n.getLastChild());	  return    n.hasChildren()    &&!labelName.equals(n.getString());    	compilable	  [FE]  RuntimeException  	62	3	replace
606	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  node.getFirstChild().getNext();  [CE]  cannot  find  symbol  node  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n  =  n.getFirstChild().getNext();  n  =  node.getFirstChild().getNext();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n    =    n.getFirstChild().getNext();    n  =  node.getFirstChild().getNext();	  	non-compiled	[CE]  cannot  find  symbol  node	25	None	add
607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	134	3	replace
608	[BUG]  [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	134	3	replace
609	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren();  }  else  {  return  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren();  }  else  {  return  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	134	3	replace
610	[BUG]  [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren();  }  else  {  return  labelName.equals(n.getFirstChild().getString());  }  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren();  }  else  {  return  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren();  }  else  {  return  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	134	3	replace
611	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild().getString()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getLastChild().getString()  +  1;  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getLastChild().getString()  +  1;	  LabelName    labelName    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
612	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	compilable	  [FE]  AssertionFailedError  	82	3	replace
613	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  else  {  return  false;  }	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	compilable	  [FE]  AssertionFailedError  	82	3	replace
614	[BUG]  [BUGGY]  n.getType()  ==  Token.RETURN;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  n.getType()  ==  Token.RETURN;  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	n.getType()  ==  Token.RETURN;	  return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.FUNCTION)    {    return!n.hasChildren()    &&!labelName.equals(n.getFirstChild().getString());    }    else    {    return    n.hasChildren()    &&    	non-compiled	[CE]  not  a  statement	82	None	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	87	3	replace
616	[BUG]  [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.EXPR_RESULT)  {  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    if(labelName!=    null)    {    return    n.hasChildren()    &&    labelName.equals(n.getLastChild().getString());    }    	compilable	  [FE]  AssertionFailedError  	87	3	replace
617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	64	3	replace
618	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.getFirstChild().getType()  ==  Token.RETURN  &&  labelName.equals(n.getLastChild().getString());	  return    n.getFirstChild().hasChildren()    &&    labelName.equals(n.getLastChild().getString());    	compilable	  [FE]  AssertionFailedError  	64	3	replace
619	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	103	2	replace
620	[BUG]  [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(type  ==  Token.RETURN)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(type  ==  Token.RETURN)  {  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(labelName    ==    null)    {    return!n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    }    	compilable	  [FE]  RuntimeException  	103	2	replace
621	[BUG]  [BUGGY]  (n  =  n.getFirstChild();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  (n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	(n  =  n.getFirstChild();	          n    =    n.getFirstChild();    (n    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	122	None	replace
622	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.isReturn()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return  n.isReturn()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	40	3	replace
623	[BUG]  [BUGGY]  return  n.isReturn()  &&  labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.isReturn()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return  n.isReturn()  &&  labelName.equals(n.getFirstChild().getString());	  return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    	compilable	  [FE]  RuntimeException  	40	3	replace
624	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getParent();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getParent();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
625	[BUG]  [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getParent();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]          n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getParent();  n  =  n.getFirstChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	                n        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getParent();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	70	3	add
626	[BUG]  [BUGGY]  int  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  int  n  =  n.getLastChild();  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	int  n  =  n.getLastChild();	          n    =    n.getFirstChild();    int    n    =    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  matchingExitNode(Node,int,String)	74	None	replace
627	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName(type);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName(type);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getQualifiedName(type);	  LabelName    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
628	[BUG]  [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName(labelName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  LabelName  labelName  =  n.getFirstChild().getQualifiedName(labelName);  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	LabelName  labelName  =  n.getFirstChild().getQualifiedName(labelName);	  LabelName    labelName    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
629	[BUG]  [BUGGY]  &&  labelName.equals(n.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  &&  labelName.equals(n.getNext());  [BUGGY]      return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	&&  labelName.equals(n.getNext());	  &&    labelName.equals(n.getString());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
630	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
631	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(labelName  ==  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(labelName  ==  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(labelName  ==  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
632	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(n.getType()  ==  Token.RETURN)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
633	[BUG]  [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren();  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  if(labelName!=  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren();  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return    n.hasChildren()    ||    labelName.equals(n.getFirstChild().getString());    if(labelName!=  null)  {  return  n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  }  else  {  return  n.hasChildren();  }	  	non-compiled	[CE]  unreachable  statement	39	None	add
634	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	111	3	replace
635	[BUG]  [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {        [BUGGY]  if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  [BUGGY]      }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	if(labelName  ==  null  ||  labelName.equals(n.getFirstChild().getString()))  {  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }	  return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    if(n.getType()    ==    Token.RETURN)    {    return!n.hasChildren()    &&    labelName.equals(n.getFirstChild().getString());    }    else    {    return!n.hasChildren()    &&    labelName.equals(n.get    	compilable	  [FE]  AssertionFailedError  	111	3	replace
