bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    LabelName  labelName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    LabelName  labelName  =  n.getFirstChild().getString();  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    LabelName  labelName  =  n.getFirstChild().getString();		non-compiled	[CE]  cannot  find  symbol	8	None	add
2	[BUG]  [BUGGY]    &&  labelName.equals(n.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    &&  labelName.equals(n.getFirstChild().getString());		non-compiled	[CE]  illegal  start  of  expression	8	None	add
3	[BUG]  [BUGGY]    &&  labelName.equals(n.getFirstChild().getString()))  {  return  true;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    &&  labelName.equals(n.getFirstChild().getString()))  {  return  true;  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    &&  labelName.equals(n.getFirstChild().getString()))  {  return  true;		non-compiled	[CE]  illegal  start  of  expression	8	None	add
4	[BUG]  [BUGGY]    String  labelName  =  n.getFirstChild().getString();  [CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    String  labelName  =  n.getFirstChild().getString();  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    String  labelName  =  n.getFirstChild().getString();		non-compiled	[CE]  variable  labelName  is  already  defined  in  method  matchingExitNode(Node,int,String)	8	None	add
5	[BUG]  [BUGGY]    &&  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    &&  labelName.equals(n.getFirstChild().getString()))  {  return  false;  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    &&  labelName.equals(n.getFirstChild().getString()))  {  return  false;		non-compiled	[CE]  illegal  start  of  expression	8	None	add
6	[BUG]  [BUGGY]    &&  labelName.equals(n.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    &&  labelName.equals(n.getLastChild().getString());  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    &&  labelName.equals(n.getLastChild().getString());		non-compiled	[CE]  illegal  start  of  expression	8	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  AssertionFailedError  	7	3	replace
8	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  AssertionFailedError  	7	3	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  RuntimeException  	7	2	replace
10	[BUG]  [BUGGY]  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  ||  labelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  RuntimeException  	7	2	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  AssertionFailedError  	7	3	replace
12	[BUG]  [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  labelName.equals(n.getLastChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  AssertionFailedError  	7	3	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  AssertionFailedError  	7	3	replace
14	[BUG]  [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&!labelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	compilable	  [FE]  AssertionFailedError  	7	3	replace
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    labelName  =  n.getFirstChild().getString();  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	    labelName  =  n.getFirstChild().getString();		compilable	  [FE]  RuntimeException  	8	3	add
16	[BUG]  [BUGGY]    labelName  =  n.getFirstChild().getString();  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    labelName  =  n.getFirstChild().getString();  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    labelName  =  n.getFirstChild().getString();		compilable	  [FE]  RuntimeException  	8	3	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    n  =  n.getFirstChild();  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	add	    n  =  n.getFirstChild();		compilable	  [FE]  AssertionFailedError  	8	3	add
18	[BUG]  [BUGGY]    n  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    n  =  n.getFirstChild();  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    n  =  n.getFirstChild();		compilable	  [FE]  AssertionFailedError  	8	3	add
19	[BUG]  [BUGGY]  return!n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [CE]  cannot  find  symbol  LabelName  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]  return!n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());  [BUGGY]  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	return!n.hasChildren()  &&  LabelName.equals(n.getFirstChild().getString());	return  !n.hasChildren();  	non-compiled	[CE]  cannot  find  symbol  LabelName	7	None	replace
20	[BUG]  [BUGGY]    n.removeChild(labelName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  private  static  boolean  matchingExitNode(Node  n,  int  type,  String  labelName)  {  if  (n.getType()  ==  type)  {  if  (type  ==  Token.RETURN)  {    [BUGGY]    n.removeChild(labelName);  [BUGGY]  return  !n.hasChildren();  }  else  {  if  (labelName  ==  null)  {  return  !n.hasChildren();  }  else  {  return  n.hasChildren()  &&  labelName.equals(n.getFirstChild().getString());  }  }  }  return  false;  [CLASS]  MinimizeExitPoints  [METHOD]  matchingExitNode  [RETURN_TYPE]  boolean  Node  n  int  type  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  type  Node  n  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.8164965809277261	280	280	2	replace	    n.removeChild(labelName);		non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	8	None	add
