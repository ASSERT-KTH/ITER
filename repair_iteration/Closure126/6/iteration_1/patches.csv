bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  labelName  =  tryBlock.getLastChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  tryBlock.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  tryBlock.getLastChild();	      Node    labelName    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
2	[BUG]  [BUGGY]  Node  labelName  =  n.getFirstChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  n.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  n.getFirstChild();	      Node    labelName    =    tryBlock.getFirstChild();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	5	None	replace
3	[BUG]  [BUGGY]  Node  returnType  =  tryBlock.getReturnType();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getReturnType();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock.getReturnType();	      Node    returnType    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
4	[BUG]  [BUGGY]  Node  returnType  =  tryBlock.getType();  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getType();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock.getType();	      Node    returnType    =    tryBlock.getNext();    	non-compiled	[CE]  incompatible  types	17	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  returnType  =  tryBlock.getFirstChild();	      Node    returnType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
6	[BUG]  [BUGGY]  Node  returnType  =  tryBlock.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock.getFirstChild();	      Node    returnType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
7	[BUG]  [BUGGY]  Node  returnType  =  tryBlock.getString();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getString();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock.getString();	      Node    returnType    =    tryBlock.getNext();    	non-compiled	[CE]  incompatible  types	17	None	replace
8	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getCurrentNode();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.getCurrentNode();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock.getLastChild();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
10	[BUG]  [BUGGY]  Node  c  =  tryBlock.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.getLastChild();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock.getFirstChild();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
12	[BUG]  [BUGGY]  Node  c  =  tryBlock.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.getFirstChild();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
13	[BUG]  [BUGGY]  Node  c  =  tryBlock.getCurrentStructure();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getCurrentStructure();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.getCurrentStructure();	      Node    c    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	9	6	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	9	6	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	9	6	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	9	6	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
22	[BUG]  [BUGGY]  Node  labelName  =  tryBlock.getString(),  exitType);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  tryBlock.getString(),  exitType);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  tryBlock.getString(),  exitType);	      Node    labelName    =    tryBlock.getString();    	non-compiled	[CE]  ';'  expected	3	None	replace
23	[BUG]  [BUGGY]  Node  labelName  =  tryBlock.getLabelName();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  tryBlock.getLabelName();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  tryBlock.getLabelName();	      Node    labelName    =    tryBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	replace
24	[BUG]  [BUGGY]  Node  labelName  =  tryBlock.getQualifiedName();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  tryBlock.getQualifiedName();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  tryBlock.getQualifiedName();	      Node    labelName    =    tryBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	replace
25	[BUG]  [BUGGY]  Node  labelName  =  tryBlock.getString()  +  1;  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]                AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  tryBlock.getString()  +  1;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  tryBlock.getString()  +  1;	      Node    labelName    =    tryBlock.getString();    	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	replace
26	[BUG]  [BUGGY]  tryMinimizeExits(catchBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchBlock  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(catchBlock,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(catchBlock,  exitType,  labelName);	  tryMinimizeExits(catchCodeBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchBlock	12	None	replace
27	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getFalse();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getFalse();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getFalse();	      Node    escapeType    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
28	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getEscapedChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getEscapedChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getEscapedChild();	      Node    escapeType    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  escapeType  =  tryBlock.getParent();	      Node    escapeType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
30	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getParent();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getParent();	      Node    escapeType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
31	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getNext()  :  null;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getNext()  :  null;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getNext()  :  null;	      Node    escapeType    =    tryBlock.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
32	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	6	6	add
33	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	6	6	add
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	6	6	add
35	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	6	6	add
36	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  NodeUtil.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  NodeUtil.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    NodeUtil.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
37	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  >>  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  >>  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()  >>  Token.EXPR_RESULT);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	6	None	add
38	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  >=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	6	6	add
39	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  >=  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  >=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()  >=  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	6	6	add
40	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnType  =  tryBlock.getNext();  [CE]  variable  returnType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    Node  returnType  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  returnType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
41	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  exitType  =  tryBlock.getNext();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  exitType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    Node  exitType  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Node    returnType    =    tryBlock.getNext();    Node  escapeType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
43	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    Node  escapeType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnedType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Node    returnType    =    tryBlock.getNext();    Node  returnedType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
45	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnedType  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnedType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    Node  returnedType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
46	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  labelName  =  tryBlock.getNext();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  labelName  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    Node  labelName  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock  ==  null);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock  ==  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock  ==  null);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
53	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.NAME);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.NAME);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.NAME);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.getType()  ==  Token.NAME);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  RuntimeException  	19	6	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock!=  null);	  	compilable	  [FE]  AssertionFailedError  	18	2	add
56	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock!=  null);	  	compilable	  [FE]  AssertionFailedError  	18	2	add
57	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock  ==  null);	  	compilable	  [FE]  RuntimeException  	18	6	add
58	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  ==  null);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  ==  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock  ==  null);	  	compilable	  [FE]  RuntimeException  	18	6	add
59	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  >=  null);  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  >=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock  >=  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	add
60	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  >>  null);  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  >>  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock  >>  null);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	add
61	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock!=  null);  NodeUtil.checkState(tryBlock!=  null);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  NodeUtil.checkState(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock!=    null);    NodeUtil.checkState(tryBlock!=  null);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
62	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  [BUGGY]  null);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock!=  null);  Preconditions.checkState(tryBlock  [BUGGY]  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock!=    null);    Preconditions.checkState(tryBlock  [BUGGY]  null);	  	non-compiled	[CE]  ')'  expected	18	None	add
63	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	8	6	add
64	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	8	6	add
65	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(tryBlock.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
66	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	8	6	add
67	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	8	6	add
68	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  >=  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	8	6	add
69	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  >=  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  >=  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()  >=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	8	6	add
70	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  >>  Token.FUNCTION);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]            RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Preconditions.checkState(tryBlock.getType()  >>  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Preconditions.checkState(tryBlock.getType()  >>  Token.FUNCTION);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	8	None	add
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	7	6	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	7	6	replace
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	7	6	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()!=  Token.EXPR_RESULT);  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()!=  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT  ||  tryBlock.getType()!=  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  AssertionFailedError  	7	6	replace
79	[BUG]  [BUGGY]  Node  exitType  =  tryBlock.getNext()  &&  labelName.equals(n.getString());  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock.getNext()  &&  labelName.equals(n.getString());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock.getNext()  &&  labelName.equals(n.getString());	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
80	[BUG]  [BUGGY]  Node  exitType  =  tryBlock.getNext()  -  1;  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock.getNext()  -  1;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock.getNext()  -  1;	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
81	[BUG]  [BUGGY]  Node  exitType  =  tryBlock.getNext(),  labelName);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock.getNext(),  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock.getNext(),  labelName);	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  ';'  expected	20	None	replace
82	[BUG]  [BUGGY]  Node  exitType  =  tryBlock.getLastChild();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock.getLastChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock.getLastChild();	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
83	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(labelName,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(labelName,  exitType,  labelName);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	13	None	replace
84	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  n,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(labelName,  n,  exitType,  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(labelName,  n,  exitType,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	13	None	replace
85	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  entryType,  exitType);  [CE]  cannot  find  symbol  entryType  [FE]                  AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(labelName,  entryType,  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(labelName,  entryType,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  entryType	13	None	replace
86	[BUG]  [BUGGY]  tryMinimizeExits(peekNode,  exitType,  labelName);  [CE]  cannot  find  symbol  peekNode  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(peekNode,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(peekNode,  exitType,  labelName);	  tryMinimizeExits(catchNode,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  peekNode	10	None	replace
87	[BUG]  [BUGGY]  tryMinimizeExits(callNodes,  exitType,  labelName);  [CE]  cannot  find  symbol  callNodes  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(callNodes,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(callNodes,  exitType,  labelName);	  tryMinimizeExits(catchNodes,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  callNodes	11	None	replace
88	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	23	6	add
89	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	23	6	add
90	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	23	6	add
91	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	23	6	add
92	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Node  c  =  tryBlock.getType()  ==  Token.CATCH;  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [CE]  incompatible  types  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Node  c  =  tryBlock.getType()  ==  Token.CATCH;  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Node  c  =  tryBlock.getType()  ==  Token.CATCH;  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  incompatible  types	23	None	add
93	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  NodeUtil.checkState(tryBlock.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  NodeUtil.checkState(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    NodeUtil.checkState(tryBlock.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
94	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Node  c  =  tryBlock.getType()  ==  Token.CATCH;  Preconditions.checkState(c.getType()  ==  Token.CATCH);  [CE]  incompatible  types  [FE]            RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Node  c  =  tryBlock.getType()  ==  Token.CATCH;  Preconditions.checkState(c.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Node  c  =  tryBlock.getType()  ==  Token.CATCH;  Preconditions.checkState(c.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  incompatible  types	23	None	add
95	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()  >>  Token.CATCH);  [CE]  no  suitable  method  found  for  checkState(int)  [FE]              RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Preconditions.checkState(tryBlock.getType()  >>  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Preconditions.checkState(tryBlock.getType()  >>  Token.CATCH);	  	non-compiled	[CE]  no  suitable  method  found  for  checkState(int)	23	None	add
96	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(labelName,  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(labelName,  exitType);	  tryMinimizeExits(exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	25	None	replace
97	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	tryMinimizeExits(n,  exitType,  labelName);	  tryMinimizeExits(exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	25	6	replace
98	[BUG]  [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(n,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(n,  exitType,  labelName);	  tryMinimizeExits(exitType,    labelName);    	compilable	  [FE]  StackOverflowError  	25	6	replace
99	[BUG]  [BUGGY]  tryMinimizeExit(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExit(catchCodeBlock,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(catchCodeBlock,  exitType,  labelName);	  tryMinimizeExit(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	15	None	replace
100	[BUG]  [BUGGY]  tryMinimizeExit(catchNode,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNode  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExit(catchNode,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(catchNode,  exitType,  labelName);	  tryMinimizeExit(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNode	15	None	replace
101	[BUG]  [BUGGY]  tryMinimizeExit(tryBlock,  exitType,  labelName,  falseBlock);  [CE]  cannot  find  symbol  falseBlock  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExit(tryBlock,  exitType,  labelName,  falseBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(tryBlock,  exitType,  labelName,  falseBlock);	  tryMinimizeExit(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  falseBlock	15	None	replace
102	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
103	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  attemptBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  attemptBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  attemptBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
104	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  startBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  startBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  startBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
105	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  triedBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  triedBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  triedBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
106	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryingBlock.getNext();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryingBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryingBlock.getNext();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
107	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getNext();  [CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    Node  escapeType  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
108	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  exitType  =  tryBlock.getNext();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  exitType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    Node  exitType  =  tryBlock.getNext();	  	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
109	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  attemptBlock.getNext();  [CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  attemptBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    Node  escapeType  =  attemptBlock.getNext();	  	non-compiled	[CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
110	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  triedBlock.getNext();  [CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  triedBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    Node  escapeType  =  triedBlock.getNext();	  	non-compiled	[CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
111	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  node  escapeType  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  node  escapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    node  escapeType  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(n.getType()  ==  Token.CATCH);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  AssertionFailedError  	24	6	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()!=  Token.CATCH);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  AssertionFailedError  	24	6	replace
116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.CATCH);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.CATCH);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH  ||  tryBlock.getType()  ==  Token.CATCH);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
120	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Node  tryBlock.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  Node  tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    Node  tryBlock.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  ';'  expected	8	None	add
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnsType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Node    returnType    =    tryBlock.getNext();    Node  returnsType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
122	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnsType  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  Node  returnsType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    Node  returnsType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	16	2	add
123	[BUG]  [BUGGY]      Node  returnType  =  tryBlock.getNext();  node  returnType  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  returnType  =  tryBlock.getNext();  node  returnType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    returnType    =    tryBlock.getNext();    node  returnType  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
124	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Node  tryBlock.getType()  ==  Token.CATCH);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  Node  tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    Node  tryBlock.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  ';'  expected	23	None	add
125	[BUG]  [BUGGY]  tryMinimizeExits(testBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  testBlock  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(testBlock,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(testBlock,  exitType,  labelName);	  tryMinimizeExits(tree,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  testBlock	14	None	replace
126	[BUG]  [BUGGY]  tryMinimizeExits(testCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  testCodeBlock  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(testCodeBlock,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(testCodeBlock,  exitType,  labelName);	  tryMinimizeExits(tree,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  testCodeBlock	14	None	replace
127	[BUG]  [BUGGY]  tryMinimizeExits(tree,  labelName,  exitType,  exitType);  [CE]  cannot  find  symbol  tree  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(tree,  labelName,  exitType,  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(tree,  labelName,  exitType,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  cannot  find  symbol  tree	13	None	replace
128	[BUG]  [BUGGY]  tryMinimizeExits(n,  labelName,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(n,  labelName,  exitType,  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(n,  labelName,  exitType,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	13	None	replace
129	[BUG]  [BUGGY]  tryMinimizeExits(exitType,  labelName,  tryBlock);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(exitType,  labelName,  tryBlock);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(exitType,  labelName,  tryBlock);	  tryMinimizeExits(exitType,    labelName);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	25	None	replace
130	[BUG]  [BUGGY]  tryMinimizeExits(t,  exitType,  labelName);  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(t,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(t,  exitType,  labelName);	  tryMinimizeExits(exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  t	25	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  returnType  =  tryBlock.getParent();	      Node    returnType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
132	[BUG]  [BUGGY]  Node  returnType  =  tryBlock.getParent();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock.getParent();	      Node    returnType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
133	[BUG]  [BUGGY]  Node  returnType  =  tryBlock!=  null?  tryBlock.getNext()  :  exitType;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock!=  null?  tryBlock.getNext()  :  exitType;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock!=  null?  tryBlock.getNext()  :  exitType;	      Node    returnType    =    tryBlock.getNext();    	non-compiled	[CE]  incompatible  types	17	None	replace
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH,  exitType);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH,  exitType);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH,  exitType);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH,  exitType);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH,  exitType);	      Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    	compilable	  [FE]  RuntimeException  	24	6	replace
136	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  exitType);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  exitType);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  exitType);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  exitType);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  exitType);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
138	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  labelName);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  labelName);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT,  labelName);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(triesBlock.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  triesBlock  [FE]        RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(triesBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(triesBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  triesBlock	7	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  EscapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	        Node    escapeType    =    tryBlock.getNext();    Node  EscapeType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	21	2	add
142	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  EscapeType  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  EscapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    Node  EscapeType  =  tryBlock.getNext();	  	compilable	  [FE]  AssertionFailedError  	21	2	add
143	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  NOde  escapeType  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  NOde  escapeType  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    NOde  escapeType  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
144	[BUG]  [BUGGY]  Node  exitType  =  tryBlock.getExitType();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock.getExitType();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock.getExitType();	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
145	[BUG]  [BUGGY]  Node  exitType  =  tryBlock!=  null?  tryBlock.getNext()  :  exitType;  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock!=  null?  tryBlock.getNext()  :  exitType;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock!=  null?  tryBlock.getNext()  :  exitType;	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
146	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getExitType();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getExitType();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getExitType();	      Node    escapeType    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
147	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getEscaped();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getEscaped();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getEscaped();	      Node    escapeType    =    tryBlock.getNext();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
148	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Node  tryBlock.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Node  tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Node  tryBlock.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  ';'  expected	6	None	add
149	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  node  c  =  tryBlock.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  node  c  =  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    node  c  =  tryBlock.getNext();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
150	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getNext();  }  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getNext();  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
151	[BUG]  [BUGGY]  tryMinimizeExit(tree,  exitType,  labelName);  [CE]  cannot  find  symbol  tree  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExit(tree,  exitType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(tree,  exitType,  labelName);	  tryMinimizeExit(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  tree	15	None	replace
152	[BUG]  [BUGGY]  tryMinimizeExit(tryBlock,  escapeType,  labelName);  [CE]  cannot  find  symbol  escapeType  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExit(tryBlock,  escapeType,  labelName);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(tryBlock,  escapeType,  labelName);	  tryMinimizeExit(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  escapeType	15	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.hasChildren());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.hasChildren());	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.hasChildren());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.hasChildren());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.hasChildren());	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getFirstChild()!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getFirstChild()!=  null);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getFirstChild()!=  null);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getFirstChild()!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION  ||  tryBlock.getFirstChild()!=  null);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  AssertionFailedError  	9	6	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
158	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  null;	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock.getParent();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
160	[BUG]  [BUGGY]  Node  c  =  tryBlock.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.getParent();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
162	[BUG]  [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock!=  null?  tryBlock.getNext()  :  tryBlock.getNext();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	9	6	replace
164	[BUG]  [BUGGY]  Preconditions.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	9	6	replace
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkArgument(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkArgument(tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
166	[BUG]  [BUGGY]  Preconditions.checkArgument(tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkArgument(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkArgument(tryBlock.getType()  ==  Token.EXPR_RESULT);	      Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    	compilable	  [FE]  RuntimeException  	7	6	replace
167	[BUG]  [BUGGY]  Node  exitType  =  tryBlock.getFirstChild();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  exitType  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  exitType  =  tryBlock.getFirstChild();	      Node    exitType    =    tryBlock.getNext();    	non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	20	None	replace
168	[BUG]  [BUGGY]  tryMinimizeExits(catchNodes,  exitType,  labelName,  escapeType);  [CE]  cannot  find  symbol  catchNodes  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(catchNodes,  exitType,  labelName,  escapeType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(catchNodes,  exitType,  labelName,  escapeType);	  tryMinimizeExits(catchNodes,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNodes	11	None	replace
169	[BUG]  [BUGGY]  tryMinimizeExits(catchNodes,  exitType,  labelName,  false);  [CE]  cannot  find  symbol  catchNodes  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(catchNodes,  exitType,  labelName,  false);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(catchNodes,  exitType,  labelName,  false);	  tryMinimizeExits(catchNodes,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol  catchNodes	11	None	replace
170	[BUG]  [BUGGY]  Node  labelName  =  tryBlock.getNext(),  exitType);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  labelName  =  tryBlock.getNext(),  exitType);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  labelName  =  tryBlock.getNext(),  exitType);	      Node    labelName    =    tryBlock.getNext();    	non-compiled	[CE]  ';'  expected	4	None	replace
171	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Node  tryBlock  =  tryBlock.getFirstChild();  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Node  tryBlock  =  tryBlock.getFirstChild();  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Node  tryBlock  =  tryBlock.getFirstChild();  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  tryBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
172	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  tryBlock  [FE]      RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  }  else  {  tryMinimizeExits(tryBlock,  exitType,  labelName);	  	non-compiled	[CE]  cannot  find  symbol  tryBlock	6	None	add
173	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  NodeUtil.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  NodeUtil.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.FUNCTION);    NodeUtil.checkArgument(tryBlock.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
174	[BUG]  [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  NodeUtil.checkCatchHandler(tryBlock.getType()  ==  Token.CATCH);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  NodeUtil.checkCatchHandler(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Preconditions.checkState(tryBlock.getType()    ==    Token.CATCH);    NodeUtil.checkCatchHandler(tryBlock.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
175	[BUG]  [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getParent();  [CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  escapeType  =  tryBlock.getNext();  Node  escapeType  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    escapeType    =    tryBlock.getNext();    Node  escapeType  =  tryBlock.getParent();	  	non-compiled	[CE]  variable  escapeType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	21	None	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  returnType  =  tryBlock.removeFirstChild();	      Node    returnType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
177	[BUG]  [BUGGY]  Node  returnType  =  tryBlock.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  returnType  =  tryBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  returnType  =  tryBlock.removeFirstChild();	      Node    returnType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
178	[BUG]  [BUGGY]  tryMinimizeExits(exitType,  labelName,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExits(exitType,  labelName,  exitType);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(exitType,  labelName,  exitType);	  tryMinimizeExits(labelName,    exitType,    exitType);    	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	13	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkArgument(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Preconditions.checkArgument(tryBlock!=  null);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  AssertionFailedError  	19	6	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(tryBlock!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkArgument(tryBlock!=  null);  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkArgument(tryBlock!=  null);	      Preconditions.checkState(tryBlock!=    null);    	compilable	  [FE]  AssertionFailedError  	19	6	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.isExit());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null  &&  tryBlock.isExit());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock!=  null  &&  tryBlock.isExit());	      Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(tryBlock!=  null,  tryBlock.isExit());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(tryBlock!=  null,  tryBlock.isExit());  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Preconditions.checkState(tryBlock!=  null,  tryBlock.isExit());	      Preconditions.checkState(tryBlock!=    null);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  escapeType  =  tryBlock.removeFirstChild();	      Node    escapeType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
184	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.removeFirstChild();	      Node    escapeType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  escapeType  =  tryBlock.getFirstChild();	      Node    escapeType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
186	[BUG]  [BUGGY]  Node  escapeType  =  tryBlock.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  escapeType  =  tryBlock.getFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  escapeType  =  tryBlock.getFirstChild();	      Node    escapeType    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock.removeFirstChild();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
188	[BUG]  [BUGGY]  Node  c  =  tryBlock.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.removeFirstChild();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.removeFirstChild();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.cloneTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	Node  c  =  tryBlock.cloneTree();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
190	[BUG]  [BUGGY]  Node  c  =  tryBlock.cloneTree();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  Node  c  =  tryBlock.cloneTree();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	Node  c  =  tryBlock.cloneTree();	      Node    c    =    tryBlock.getNext();    	compilable	  [FE]  AssertionFailedError  	2	6	replace
191	[BUG]  [BUGGY]  tryMinimizeExit(tryBlock,  exitType,  labelName,  false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]  tryMinimizeExit(tryBlock,  exitType,  labelName,  false);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(tryBlock,  exitType,  labelName,  false);	  tryMinimizeExit(tryBlock,    exitType,    labelName);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
192	[BUG]  [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getParent();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();    [BUGGY]      Node  c  =  tryBlock.getNext();  Node  c  =  tryBlock.getParent();  [BUGGY]    tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	        Node    c    =    tryBlock.getNext();    Node  c  =  tryBlock.getParent();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
