bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  c  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Node  c  =  tryBlock.getNext();		compilable	  [FE]  AssertionFailedError  	12	2	add
2	[BUG]  [BUGGY]    Node  c  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  c  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  c  =  tryBlock.getNext();		compilable	  [FE]  AssertionFailedError  	12	2	add
3	[BUG]  [BUGGY]    Node  labelName  =  tryBlock.getString();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  labelName  =  tryBlock.getString();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  labelName  =  tryBlock.getString();		non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
4	[BUG]  [BUGGY]    Node  labelName  =  tryBlock.getNext();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  labelName  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  labelName  =  tryBlock.getNext();		non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
5	[BUG]  [BUGGY]    Node  labelName  =  tryBlock.getFirstChild();  [CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  labelName  =  tryBlock.getFirstChild();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  labelName  =  tryBlock.getFirstChild();		non-compiled	[CE]  variable  labelName  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	12	6	add
7	[BUG]  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Preconditions.checkState(tryBlock.getType()  ==  Token.EXPR_RESULT);		compilable	  [FE]  RuntimeException  	12	6	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);		compilable	  [FE]  RuntimeException  	12	6	add
9	[BUG]  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Preconditions.checkState(tryBlock.getType()  ==  Token.FUNCTION);		compilable	  [FE]  RuntimeException  	12	6	add
10	[BUG]  [BUGGY]  tryMinimizeExits(catchNode,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNode  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(catchNode,  exitType,  labelName);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(catchNode,  exitType,  labelName);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  catchNode	11	None	replace
11	[BUG]  [BUGGY]  tryMinimizeExits(catchNodes,  exitType,  labelName);  [CE]  cannot  find  symbol  catchNodes  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(catchNodes,  exitType,  labelName);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(catchNodes,  exitType,  labelName);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  catchNodes	11	None	replace
12	[BUG]  [BUGGY]  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  catchCodeBlock  [FE]        AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(catchCodeBlock,  exitType,  labelName);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  catchCodeBlock	11	None	replace
13	[BUG]  [BUGGY]  tryMinimizeExits(labelName,  exitType,  exitType);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(labelName,  exitType,  exitType);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(labelName,  exitType,  exitType);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	11	None	replace
14	[BUG]  [BUGGY]  tryMinimizeExits(tree,  exitType,  labelName);  [CE]  cannot  find  symbol  tree  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(tree,  exitType,  labelName);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(tree,  exitType,  labelName);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol  tree	11	None	replace
15	[BUG]  [BUGGY]  tryMinimizeExit(tryBlock,  exitType,  labelName);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExit(tryBlock,  exitType,  labelName);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExit(tryBlock,  exitType,  labelName);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  returnType  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Node  returnType  =  tryBlock.getNext();		compilable	  [FE]  AssertionFailedError  	12	2	add
17	[BUG]  [BUGGY]    Node  returnType  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  returnType  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  returnType  =  tryBlock.getNext();		compilable	  [FE]  AssertionFailedError  	12	2	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock!=  null);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Preconditions.checkState(tryBlock!=  null);		compilable	  [FE]  AssertionFailedError  	12	2	add
19	[BUG]  [BUGGY]    Preconditions.checkState(tryBlock!=  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock!=  null);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Preconditions.checkState(tryBlock!=  null);		compilable	  [FE]  AssertionFailedError  	12	2	add
20	[BUG]  [BUGGY]    Node  exitType  =  tryBlock.getNext();  [CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  exitType  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  exitType  =  tryBlock.getNext();		non-compiled	[CE]  variable  exitType  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	12	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  escapeType  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Node  escapeType  =  tryBlock.getNext();		compilable	  [FE]  AssertionFailedError  	12	2	add
22	[BUG]  [BUGGY]    Node  escapeType  =  tryBlock.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Node  escapeType  =  tryBlock.getNext();  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Node  escapeType  =  tryBlock.getNext();		compilable	  [FE]  AssertionFailedError  	12	2	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	add	    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);		compilable	  [FE]  RuntimeException  	12	6	add
24	[BUG]  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);  [BUGGY]  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	    Preconditions.checkState(tryBlock.getType()  ==  Token.CATCH);		compilable	  [FE]  RuntimeException  	12	6	add
25	[BUG]  [BUGGY]  tryMinimizeExits(exitType,  labelName);  [CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  Node  elseBlock  =  ifBlock.getNext();  if  (elseBlock  !=  null)  {  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  [BUGGY]  tryMinimizeExits(exitType,  labelName);  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }    [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	129	129	2	replace	tryMinimizeExits(exitType,  labelName);	tryMinimizeExits(tryBlock,  exitType,  labelName);  	non-compiled	[CE]  method  tryMinimizeExits  in  class  MinimizeExitPoints  cannot  be  applied  to  given  types;	11	None	replace
