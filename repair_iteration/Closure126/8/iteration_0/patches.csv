bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	    Node  elseBlock  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	16	2	add
2	[BUG]  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Node  elseBlock  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	16	2	add
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	    Preconditions.checkState(allCatchNodes.hasOneChild());		compilable	  [FE]  RuntimeException  	16	2	add
4	[BUG]  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Preconditions.checkState(allCatchNodes.hasOneChild());		compilable	  [FE]  RuntimeException  	16	2	add
5	[BUG]  [BUGGY]    Node  catchNode  =  allCatchNodes.getFirstChild();  [CE]  variable  catchNode  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  catchNode  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Node  catchNode  =  allCatchNodes.getFirstChild();		non-compiled	[CE]  variable  catchNode  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	    Node  c  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	16	2	add
7	[BUG]  [BUGGY]    Node  c  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Node  c  =  allCatchNodes.getFirstChild();		compilable	  [FE]  AssertionFailedError  	16	2	add
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	    Preconditions.checkState(allCatchNodes.isEmpty());		compilable	  [FE]  RuntimeException  	16	6	add
9	[BUG]  [BUGGY]    Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Preconditions.checkState(allCatchNodes.isEmpty());		compilable	  [FE]  RuntimeException  	16	6	add
10	[BUG]  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(allCatchNodes);		non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  AssertionFailedError  	15	2	replace
12	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  AssertionFailedError  	15	2	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  AssertionFailedError  	15	6	replace
14	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  AssertionFailedError  	15	6	replace
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	6	replace
16	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	6	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	2	replace
18	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	2	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	6	replace
20	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	6	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  AssertionFailedError  	15	2	replace
22	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  AssertionFailedError  	15	2	replace
23	[BUG]  [BUGGY]    Node  finallyBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  finallyBlock  =  allCatchNodes.getFirstChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Node  finallyBlock  =  allCatchNodes.getFirstChild();		non-compiled	[CE]  variable  finallyBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	16	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	    Node  elseBlock  =  allCatchNodes.getLastChild();		compilable	  [FE]  AssertionFailedError  	16	2	add
25	[BUG]  [BUGGY]    Node  elseBlock  =  allCatchNodes.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Node  elseBlock  =  allCatchNodes.getLastChild();		compilable	  [FE]  AssertionFailedError  	16	2	add
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	6	replace
27	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	compilable	  [FE]  RuntimeException  	15	6	replace
28	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {	if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());		compilable	  [FE]  RuntimeException  	16	6	add
30	[BUG]  [BUGGY]    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]  if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());		compilable	  [FE]  RuntimeException  	16	6	add
