bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
2	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
3	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.isOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes.isOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes.isOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	18	6	replace
5	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	18	6	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	18	6	replace
7	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	18	6	replace
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	18	6	replace
9	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	18	6	replace
10	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  catchNode  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getLastChild();	      Node    catchNode    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  Node  catchNode  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  catchNode  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  n.getFirstChild();	      Node    catchNode    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  Node  catchNode  =  tryBlock.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  catchNode  =  tryBlock.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  tryBlock.getFirstChild();	      Node    catchNode    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  catchNode  =  allCatchNodes.getNext();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getNext();	      Node    catchNode    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	16	2	replace
15	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	16	2	replace
16	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	16	6	replace
18	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)||  allCatchNodes.isEmpty())  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	16	6	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	8	6	add
20	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	8	6	add
21	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  allCatchNodes.isEmpty());	  	non-compiled	[CE]  ';'  expected	8	None	add
22	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes.isEmpty());	  	non-compiled	[CE]  ';'  expected	8	None	add
23	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
24	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  AllCatchNodes.isEmpty();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  AllCatchNodes.isEmpty();	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
25	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getLastChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getChildCount();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  c  =  allCatchNodes.getChildCount();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getChildCount();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  c  =  allCatchNodes.get(0);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.get(0);	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getNext();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  c  =  allCatchNodes.getNext();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getNext();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	24	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	24	2	add
31	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  otherBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  otherBlock  =  allCatchNodes.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	24	2	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	24	2	add
33	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  thenBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  thenBlock  =  allCatchNodes.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	24	2	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	24	2	add
35	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  anotherBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  anotherBlock  =  allCatchNodes.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	24	2	add
36	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock);	      Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(tryBlock,  allCatchNodes);	      Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);	      Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(labelName);	      Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  allCatchNodes);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  allCatchNodes);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n,  allCatchNodes);	      Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildren());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildren());	      Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFirstChild());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.hasFirstChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasFirstChild());	      Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.hasFinally());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasFinally());	      Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount());  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.hasChildCount());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.hasChildCount());	      Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.get(0);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(0);	      Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
46	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.getfirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getfirstChild();	      Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
47	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.get(1);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(1);	      Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
48	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
49	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  If(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))    {    If(!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	19	None	add
50	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  if(!NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))    {    if(!NodeUtil.isFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
51	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
52	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  If(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    If(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	13	None	add
53	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
54	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
55	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
56	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
57	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	6	replace
59	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	6	replace
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	2	replace
61	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	2	replace
62	[BUG]  [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
63	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)||!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
64	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes)&&!NodeUtil.isExpressionNode(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  &&  allCatchNodes.isEmpty());	      Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty()  &&  tryMinimizeExits(tryBlock,  exitType,  labelName));	      Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getFirstChild());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getFirstChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.getFirstChild());	      Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty(),  exitType);	      Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
69	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
70	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
71	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
72	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  }  else  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  }  else  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  }  else  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
73	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
74	[BUG]  [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  c  =  allCatchNodes.getFirstChild();  Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    c    =    allCatchNodes.getFirstChild();    Node  c  =  allCatchNodes.getFirstChild();  Preconditions.checkState(AllCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	6	None	add
75	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  ||  allCatchNodes.isEmpty());	      Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes!=  null  &&  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes!=  null  &&  allCatchNodes.isEmpty());	      Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty());	      Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	3	2	add
79	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	3	2	add
80	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
81	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
82	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild());  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes.hasOneChild());	  	non-compiled	[CE]  ';'  expected	3	None	add
83	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  cannot  find  symbol  preconditions  [FE]            RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkState(allCatchNodes.hasOneChild());  preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  cannot  find  symbol  preconditions	3	None	add
84	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]              RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	14	2	replace
86	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	14	2	replace
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	14	6	replace
88	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	14	6	replace
89	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	14	None	replace
90	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
91	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getLastChild();	      Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
92	[BUG]  [BUGGY]  Node  finallyBlock  =  tryBlock.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  finallyBlock  =  tryBlock.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  tryBlock.getFirstChild();	      Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
93	[BUG]  [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  finallyBlock  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  n.getFirstChild();	      Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
94	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.getFirstChild(),  tryBlock);	      Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
95	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
96	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getLastChild();	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
98	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  otherBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  otherBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
100	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  thenBlock  =  allCatchNodes.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  thenBlock  =  allCatchNodes.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	1	2	add
101	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
102	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
103	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    If(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
104	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  if(allCatchNodes  >=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    if(allCatchNodes  >=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
105	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
106	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	15	None	add
107	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.isFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.isFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
108	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.getChildCount();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getChildCount();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwnerChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.getOwnerChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getOwnerChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.getNext();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.getNext();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.getNext();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	22	2	replace
112	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	22	2	replace
113	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	22	6	replace
114	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	22	6	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	22	6	replace
116	[BUG]  [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes  ==  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	22	6	replace
117	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	22	None	replace
118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	29	6	add
119	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	29	6	add
120	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node  allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  ';'  expected	29	None	add
121	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  AllCatchNodes  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  AllCatchNodes	29	None	add
122	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [CE]  cannot  find  symbol  ALLCatchNodes  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  ALLCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol  ALLCatchNodes	29	None	add
123	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty();	  	non-compiled	[CE]  ')'  expected	29	None	add
124	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
125	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    If(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	17	None	add
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
127	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
129	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
130	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	12	6	replace
131	[BUG]  [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasOneChild()  &&  NodeUtil.hasFinally(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	12	6	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
133	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
135	[BUG]  [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
136	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
137	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)||  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
138	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
139	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
140	[BUG]  [BUGGY]  Node  elseBlock  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  n.getLastChild();	      Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	6	replace
142	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	6	replace
143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	2	replace
144	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	2	replace
145	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
146	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
147	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
148	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  }  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  }  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  }  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
149	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
150	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(anyCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
152	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  allCatchNodes.hasOneChild()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
154	[BUG]  [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildren()  ||  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
155	[BUG]  [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.hasChildCount()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
156	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
157	[BUG]  [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(triesBlock);	      Node    allCatchNodes    =    NodeUtil.getAllCatchNodes(allCatchNodes);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
158	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
159	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	14	6	replace
161	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	14	6	replace
162	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	14	2	replace
163	[BUG]  [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  ||!NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	14	2	replace
164	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    AllCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  not  a  statement	29	None	add
165	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes.hasOneChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes.hasOneChild();	  	non-compiled	[CE]  ';'  expected	3	None	add
166	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.getLeastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  c  =  allCatchNodes.getLeastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.getLeastChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >  0);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >  0);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.size()  >  0);	      Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
168	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  tryMinimizeExits(allCatchNodes.getFirstChild(),  exitType,  labelName);	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)||    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
170	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isExpressionNode(allCatchNodes)&&  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
171	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
172	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes.isEmpty());  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
173	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
174	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
175	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
176	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  }  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  }  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  }  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	24	None	add
177	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	24	None	add
178	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild();  if(NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	24	None	add
179	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  exitType);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty(),  exitType);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty(),  exitType);	      Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
180	[BUG]  [BUGGY]  Node  elseBlock  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  n.getFirstChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
181	[BUG]  [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  tryBlock.getFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  tryBlock.getFirstChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
182	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
183	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(!NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
184	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  if(NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
185	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes).getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
186	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(allCatchNodes);  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
187	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  catchNode  =  allCatchNodes.getChildCount();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.getChildCount();	      Node    catchNode    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
188	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
189	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchHandler(allCatchNodes);  Preconditions.checkState(!NodeUtil.hasCatchHandler(allCatchNodes))  {	  	non-compiled	[CE]  ';'  expected	13	None	add
190	[BUG]  [BUGGY]  Node  finallyBlock  =  tryBlock.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  finallyBlock  =  tryBlock.getLastChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  tryBlock.getLastChild();	      Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
191	[BUG]  [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchHandler(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	8	6	add
193	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	8	6	add
194	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
195	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	8	None	add
196	[BUG]  [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  finallyBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  finallyBlock  =  allCatchNodes.removeFirstChild();	      Node    finallyBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  n.isTree());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.isEmpty()  ||  n.isTree());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.isEmpty()  ||  n.isTree());	      Preconditions.checkState(allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
198	[BUG]  [BUGGY]  Node  catchNode  =  allCatchNodes.removeFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  catchNode  =  allCatchNodes.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  catchNode  =  allCatchNodes.removeFirstChild();	      Node    catchNode    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
199	[BUG]  [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasFinally(allCatchNodes))  {  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasFinally(allCatchNodes))    {    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
200	[BUG]  [BUGGY]  Node  c  =  allCatchNodes.removeFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  c  =  allCatchNodes.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  c  =  allCatchNodes.removeFirstChild();	      Node    c    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  ==  null);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)  ==  null);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0)  ==  null);	      Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)!=  null);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkState(allCatchNodes.get(0)!=  null);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkState(allCatchNodes.get(0)!=  null);	      Preconditions.checkState(allCatchNodes.hasOneChild());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
203	[BUG]  [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  n.isTree())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  n.isTree())  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!NodeUtil.hasCatchHandler(allCatchNodes)&&  n.isTree())  {	  if(!NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
204	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  n.isTree())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  n.isTree())  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchHandler(allCatchNodes)||  n.isTree())  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
205	[BUG]  [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes!=  null  &&  NodeUtil.hasCatchBlock(allCatchNodes))  {	  if(allCatchNodes!=    null    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	6	replace
207	[BUG]  [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(allCatchNodes.isEmpty()  ||!NodeUtil.hasFinally(allCatchNodes))  {	  if(!NodeUtil.hasFinally(allCatchNodes))    {    	compilable	  [FE]  RuntimeException  	20	6	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
209	[BUG]  [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(!allCatchNodes.hasChildren()  &&  NodeUtil.hasCatchHandler(allCatchNodes))  {	  if(allCatchNodes.hasOneChild()    &&    NodeUtil.hasCatchHandler(allCatchNodes))    {    	compilable	  [FE]  AssertionFailedError  	12	6	replace
210	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.removeFirstChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.removeFirstChild();  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.removeFirstChild();	      Node    elseBlock    =    allCatchNodes.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
211	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getLastChild();  Node  elseBlock  =  allCatchNodes.getLastChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getLastChild();    Node  elseBlock  =  allCatchNodes.getLastChild());	  	non-compiled	[CE]  ';'  expected	24	None	add
212	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	29	None	add
213	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	29	6	add
214	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	29	6	add
215	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	29	6	add
216	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkNotNull(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	compilable	  [FE]  RuntimeException  	29	6	add
217	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    Preconditions.checkEquals(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
218	[BUG]  [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasCatchHandler(allCatchNodes)&&  NodeUtil.isFinally(allCatchNodes)||  NodeUtil.hasFinally(allCatchNodes))  {	  if(NodeUtil.hasCatchHandler(allCatchNodes)&&    NodeUtil.isFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
219	[BUG]  [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Node  elseBlock  =  allCatchNodes.get(n);  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Node  elseBlock  =  allCatchNodes.get(n);	      Node    elseBlock    =    allCatchNodes.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
220	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);  preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
221	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Node  allCatchNodes  =  NodeUtil.getAllCatchNodes(n);  Preconditions.checkState(allCatchNodes.hasOneChild());	  	non-compiled	[CE]  variable  allCatchNodes  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	3	None	add
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	add	        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	3	2	add
223	[BUG]  [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Preconditions.checkState(allCatchNodes.hasOneChild());  Preconditions.checkNotNull(allCatchNodes.hasOneChild());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Preconditions.checkState(allCatchNodes.hasOneChild());    Preconditions.checkNotNull(allCatchNodes.hasOneChild());	  	compilable	  [FE]  RuntimeException  	3	2	add
224	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.hasFinally(allCatchNodes)&&  NodeUtil.isExpressionNode(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes))  {  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  if(NodeUtil.isCatchBlock(allCatchNodes))  {  [BUGGY]    Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	if(NodeUtil.isCatchBlock(allCatchNodes))  {	  if(NodeUtil.hasFinally(allCatchNodes))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
226	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.isEmpty());	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
227	[BUG]  [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }  [CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)  [FE]      AssertionFailedError    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]      Node  elseBlock  =  allCatchNodes.getFirstChild();  Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	        Node    elseBlock    =    allCatchNodes.getFirstChild();    Node  elseBlock  =  allCatchNodes.getFirstChild();  if(NodeUtil.hasFinally(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  return;  }	  	non-compiled	[CE]  variable  elseBlock  is  already  defined  in  method  tryMinimizeExits(Node,int,String)	1	None	add
228	[BUG]  [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    tryMinimizeExits(elseBlock,  exitType,  labelName);  }  return;  }  if  (n.isTry())  {  Node  tryBlock  =  n.getFirstChild();  tryMinimizeExits(tryBlock,  exitType,  labelName);  Node  allCatchNodes  =  NodeUtil.getCatchBlock(n);    [BUGGY]  Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());  [BUGGY]    if  (NodeUtil.hasCatchHandler(allCatchNodes))  {  Preconditions.checkState(allCatchNodes.hasOneChild());  Node  catchNode  =  allCatchNodes.getFirstChild();  Node  catchCodeBlock  =  catchNode.getLastChild();  tryMinimizeExits(catchCodeBlock,  exitType,  labelName);  }      if  (NodeUtil.hasFinally(n))  {  [CLASS]  MinimizeExitPoints  [METHOD]  tryMinimizeExits  [RETURN_TYPE]  void  Node  n  int  exitType  String  labelName  [VARIABLES]  AbstractCompiler  compiler  String  labelName  boolean  int  exitType  Node  allCatchNodes  c  catchCodeBlock  catchNode  elseBlock  falseBlock  finallyBlock  ifBlock  ifTree  labelBlock  n  trueBlock  tryBlock  	projects/Closure126/src/com/google/javascript/jscomp/MinimizeExitPoints.java	0.5773502691896258	131	131	2	replace	Preconditions.checkArgument(allCatchNodes.isEmpty()  ||  allCatchNodes.isEmpty());	      Preconditions.checkState(allCatchNodes.isEmpty()    ||    allCatchNodes.isEmpty());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
